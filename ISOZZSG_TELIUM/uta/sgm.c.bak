#include "sdk30.h"
#include "log.h"
#include "bri.h" //@agmr - BRI
#include "logon.h" //@@AS0.0.26

// logo + tulisan BRI
/*const unsigned char __BMP_briLogo[]=
{
0, 126,
0x00, 
0xC0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0xFE, 
0xFE, 0xFE, 0xFE, 0xFE, 0xBE, 0x3E, 0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFE, 0xBE, 
0x3E, 0x3E, 0x3E, 0x3E, 0x7E, 0xFC, 0xFC, 0xF8, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 
0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0x3C, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0x7F, 
0x3F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 
0x0F, 0x0F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x60, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0x9F, 
0x0F, 0x07, 0x03, 0x61, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0x8F, 0x07, 0x03, 0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7C, 0x7C, 0x7C, 0x7C, 
0x7C, 0x7C, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xC7, 0x81, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 
0xCF, 0x8F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x7F, 
0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xC1, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFE, 0xFC, 0xF8, 0xF0, 
0xE0, 0xC0, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 
0xC0, 0xC0, 0xE0, 0xE0, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x3F, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFC, 0xF0, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF8, 
0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xC7, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC1, 0xC3, 0xC7, 
0xCF, 0xDF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 
0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x07, 
0x07, 0x07, 0x07, 0x07, 0x07, 0x04, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0
};*/
 // logo + tulisan BANK BRI
const unsigned char __BMP_briLogo[]=
{
0, 126,
0x00, 
0xF0, 0xFC, 0xFC, 0xFE, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0x7E, 0xFE, 0xFE, 0xFE, 
0xDE, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0xFE, 0xFE, 0xFE, 0xFE, 0xDE, 0x1E, 0x1E, 0x3E, 0xFE, 0xFC, 
0xFC, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFF, 0xFF, 0x7F, 
0x1F, 0x87, 0xC0, 0xE0, 0xF0, 0xF8, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
0xFF, 0xFF, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0x60, 0x60, 0xE0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 
0xE0, 0x80, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 
0x80, 0xC0, 0xE0, 0xE0, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 
0xE0, 0x60, 0x60, 0xE0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0x60, 0x60, 
0xE0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x06, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFB, 0xF1, 0xE0, 0xC6, 
0x8F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xF9, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xC6, 0xC6, 0xFF, 0xFF, 0xFF, 0x79, 0x00, 0x00, 0xC0, 
0xF8, 0xFF, 0xFF, 0x3F, 0x33, 0x33, 0x3F, 0xFF, 0xFF, 0xF8, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 
0xFF, 0x0F, 0x1F, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 
0x3F, 0x7F, 0xF9, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 
0xFF, 0xC6, 0xC6, 0xFF, 0xFF, 0xFF, 0x79, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x7E, 
0xFF, 0xF7, 0xE7, 0xC3, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xE1, 0xFF, 0xFF, 0xFF, 
0xBF, 0x8E, 0x80, 0x80, 0x80, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0xBF, 0xFF, 0xFE, 0xFC, 0xFF, 0xFF, 
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0x00, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0
};
/*const unsigned char __BMP_briLogo[]=
{
0, 126,
0x00, 
0xE0, 0xF8, 0xFC, 0xFC, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x3E, 0xFE, 0xFE, 0xFE, 0xFE, 0x1E, 
0x1E, 0x1E, 0x3E, 0xFE, 0xFE, 0xFE, 0xFE, 0x1E, 0x1E, 0x1E, 0x3E, 0xFC, 0xFC, 0xF8, 0xE0, 0x00, 
0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 
0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 
0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x60, 0x70, 0xF8, 0xFC, 0x9F, 0x0F, 0x07, 0x61, 0xF0, 
0xF0, 0xF8, 0xFE, 0x9F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x63, 0x63, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xDE, 0x00, 0x80, 
0xF0, 0xFC, 0xFF, 0xFF, 0x9F, 0x8F, 0x9F, 0xFF, 0xFF, 0xFC, 0xF0, 0x80, 0x00, 0xFF, 0xFF, 0xFF, 
0xFF, 0x7F, 0xFF, 0xFC, 0xF8, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0x9F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0x63, 0x63, 0x63, 0x77, 0xFF, 0xFF, 0xFF, 0xDE, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0x63, 0x63, 0xFF, 0xFF, 0xFF, 0xFF, 0x9E, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8F, 0xFF, 0xFC, 0xF8, 0x00, 
0x00, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x7C, 0xF8, 0xF0, 0xE0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1C, 0x1C, 0x1E, 0x1F, 0x1F, 0x1F, 0x0F, 0x07, 0x00, 0x1F, 
0x1F, 0x1F, 0x1F, 0x03, 0x03, 0x03, 0x03, 0x03, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x1F, 0x1F, 0x1F, 
0x1F, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x1E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 
0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 0x1C, 0x1F, 0x1F, 0x0F, 0x07, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
0x00, 0x00, 0x01, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x00, 
0xFF, 0,
0, 126,
0x00, 
0x00, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x01, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
126, 0
};*/

//const unsigned char __BMP_briLogo[]=
//{
//0, 136,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 136,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0x0F, 
//0x07, 0x07, 0x07, 0x07, 0x07, 0x0F, 0xFF, 0xFF, 0xFF, 0xC7, 0x07, 0x07, 0x0F, 0x1F, 0xFF, 0xFF, 
//0x07, 0x07, 0x0F, 0xFF, 0xFE, 0xFC, 0xE0, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
//0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 
//0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 
//0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 
//0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 136,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
//0x00, 0xE0, 0xF0, 0xF8, 0xFC, 0xBE, 0x1F, 0x47, 0xE3, 0xF0, 0xF8, 0xFC, 0xBE, 0x1F, 0x0F, 0x07, 
//0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xE3, 
//0xF7, 0xFF, 0xFF, 0x9E, 0x00, 0x00, 0xC0, 0xF8, 0xFF, 0xFF, 0x3F, 0x3F, 0xFF, 0xFF, 0xF8, 0xE0, 
//0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFC, 0xF0, 0xC0, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xF7, 0xF8, 0xFF, 0xFF, 0x9F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xE3, 0xE3, 0xE3, 0xF7, 0xFF, 0xFF, 0x9E, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 
//0xE3, 0xFF, 0xFF, 0xBF, 0x3F, 0x0C, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 136,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
//0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0xFF, 0xFC, 0xF8, 0xE1, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0xFC, 
//0xF0, 0xE0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x38, 0x38, 
//0x3C, 0x3F, 0x1F, 0x0F, 0x38, 0x3F, 0x3F, 0x3F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x3F, 0x3F, 
//0x3F, 0x3C, 0x20, 0x3F, 0x3F, 0x3F, 0x00, 0x01, 0x03, 0x0F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x3F, 
//0x3F, 0x3F, 0x3F, 0x2F, 0x01, 0x0F, 0x3F, 0x3F, 0x3E, 0x3C, 0x30, 0x20, 0x00, 0x00, 0x00, 0x3F, 
//0x3F, 0x3F, 0x3F, 0x38, 0x38, 0x38, 0x3C, 0x3F, 0x1F, 0x0F, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 
//0x03, 0x1F, 0x3F, 0x3F, 0x3E, 0x38, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 136,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x1F, 0x1E, 
//0x1C, 0x1C, 0x1C, 0x1C, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 
//0x1D, 0x1F, 0x1F, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 136,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//136, 0
//};
//
//const unsigned char logo_idle[]=
//{
//0, 124,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 
//0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 
//0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 
//0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xFC, 0xFC, 
//0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 
//0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 124,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0x87, 0x87, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xC1, 0xE1, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 
//0xF8, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 124,
//0x00, 
//0xE0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
//0x3F, 0x9F, 0x07, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x0F, 0xFF, 0xFF, 0x7F, 
//0x1F, 0x0F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x9F, 0xCF, 0xEF, 0xF7, 0xF7, 
//0x77, 0x03, 0x03, 0xE7, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0xE7, 0xF3, 0xF3, 0xF3, 0x03, 0x87, 0xFF, 
//0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0x1F, 0x07, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x8F, 0xE7, 0xF7, 0xF3, 0xFB, 
//0xFB, 0xFF, 0xFF, 0x3F, 0x1F, 0x8F, 0xC7, 0xE7, 0xF3, 0xF3, 0xF7, 0xC7, 0x0F, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0x00, 
//0xFF, 0,
//0, 124,
//0x00, 
//0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xFE, 
//0xFF, 0xFF, 0x80, 0x80, 0xCF, 0xE7, 0xE3, 0xF3, 0xFD, 0xFE, 0xFF, 0x80, 0xC0, 0xE1, 0xF0, 0xF8, 
//0xFE, 0xFF, 0xFF, 0xFC, 0xC0, 0x87, 0xCF, 0xF7, 0xF1, 0xE0, 0xE0, 0xF3, 0xF3, 0x7B, 0x79, 0x7C, 
//0x00, 0x00, 0x10, 0x9F, 0xDF, 0xEF, 0xE0, 0xC0, 0x83, 0x8B, 0x9D, 0xDD, 0xDE, 0xEF, 0xE7, 0xF3, 
//0xFB, 0xFC, 0xFE, 0x80, 0xC0, 0xE0, 0xF1, 0xF8, 0xFC, 0xFE, 0xFF, 0xFC, 0xE0, 0x83, 0xCF, 0xE7, 
//0xF3, 0xFC, 0xC0, 0x80, 0x8F, 0xCF, 0xE7, 0xF3, 0xF1, 0xC0, 0xC0, 0x87, 0xCF, 0xCF, 0xCF, 0xE7, 
//0xF7, 0xFB, 0xF9, 0xE0, 0xC0, 0xCF, 0xCF, 0xCF, 0xCF, 0xE7, 0xF3, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x00, 
//0xFF, 0,
//0, 124,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x0F, 0x1F, 0x3F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x03, 0xF1, 0xFC, 0xFC, 0xFE, 0x3F, 0x07, 
//0x80, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x3F, 
//0x1F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 124,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 
//0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0x7F, 0x7C, 0x78, 0x7B, 0x7B, 0x7B, 0xF8, 0xFC, 0xFE, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 
//0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x0F, 
//0x0F, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0xFF, 0,
//0, 124,
//0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//124, 0
//};

static const unsigned char appname[]    = __IDLEAPP__;
int emvGetAids(_DEL_ *sel, uchar id);

int more_function( NO_SEGMENT no, void *p1, void *p2 )
{
	StateHeader(0);
	hdlMainMenu();
	dspClear();
	StateHeader(1);
	return FCT_OK;
}


/** Allows the application to display its idle message when Manager goes back
 *  to idle (the application should have the higher priority).
 * \return                                           
 *  FCT_OK
 * \header sdk30.h
 * \source entry.c 
*/
int idle_message (NO_SEGMENT no, void *p1, void *p2)
{
	FILE *hDisplay;
	int nFont;

	/// Idle message management
	hDisplay = fopen("DISPLAY","w");        ///< Open display driver.
	nFont = GetDefaultFont();               ///< Retrieve default font

#if 0

	CreateGraphics(_LARGE_);                ///< Create graphic font
	_DrawString((char*) IdleMsg,  0, 20, _OFF_);
	PaintGraphics();                        ///< Display idle message

	SetDefaultFont(nFont);                  ///< Restore default font
#endif
	DisplayBitmap( 0, 20, (unsigned char *)__BMP_briLogo, 8, _OFF_);

	fclose(hDisplay);	                    ///< Close display driver

	return FCT_OK;
}


int is_delete(NO_SEGMENT no,void *paramin,S_DELETE *paramout)
{
	paramout->deleting=DEL_YES;
	return (FCT_OK);
}
/*static const char *root(void) {
    static char utaNNNN[1 + 3 + 4 + 1] = "";    // '/' + "UTA" +"NNNN" + Z
 
    if(*utaNNNN == 0)
        sprintf(utaNNNN, "/UTA%04X", __APPID__);
    return utaNNNN;
}*/

#if 0
static void chkParamFileExist(void) {
	S_FS_PARAM_CREATE ParamCreat, ParamCreat2;
	int ret;
	char filepath[25+1];
	char filepath2[30+1];
	byte dat[20]="";
	S_FS_FILE  *pFile;
	S_FS_DIR *pHostDir;
	S_FS_FILEINFO dirData;
	unsigned long size;
		   
	memset(dat, 0, sizeof(dat));
	memclr(filepath,sizeof(filepath));
	memclr(filepath2,sizeof(filepath2));
 
			ParamCreat.Mode = FS_WRITEONCE;
						
			ret = FS_mount ("/HOST",&ParamCreat.Mode);
			pHostDir = FS_opendir ("/HOST/*");
					
			while( FS_readdir ( pHostDir, &dirData ) == FS_OK ) {
				
				
				if(strcmp(dirData.FileName,"PAGE0010.NVM") == 0){
					
					dspClear();
		    	    dspLS(1, "   FILE FOUND   ");
					ttestall(0,100);
				    sprintf(filepath,"/%s/%s","HOST",dirData.FileName);
				    pFile = FS_open (filepath, "r");
				    
				   // ret = FS_read(dat, dirData.FileSize, 1, pFile);    //load from file
				    //if(ret == 1){
				   // 	 dspLS(2, "    . . . .     ");
				    //	 dspLS(3, "  READING DONE  ");
				    //	 ttestall(0,100);
				    	 		
				    //	 prtS(dat);
				    //}
					}
				    else{
				    	dspLS(2, "    . . . .     ");
				    	dspLS(3, "  READING ERROR ");
				    	ttestall(0,100);
				    }
				    
				    //FS_close(pFile);
				}
		
			FS_closedir(pHostDir);		
			FS_unmount("/HOST");			
}
#endif // 0
//int after_reset( NO_SEGMENT no, void *p1, S_TRANSOUT *etatseq ){
int after_reset( NO_SEGMENT noappli, void *param_in, S_TRANSOUT *param_out)
{
	FLAG_CHGT  chgt;
	TYPE_CHGT  type;
	DATE       date;
	S_TRANSOUT paramseq;

	read_date(&date);
	memcpy (&paramseq, param_out, sizeof (paramseq));

	//* check for first run : cold or warm reset ?
	if (first_init (noappli,&chgt,&type) != FSE_FAILED)
	{
		//if (chgt == 0xFF){
		//* cold reset
		//raz_init(noappli);
		//}
	}

	//chkParamFileExist();
	hdlPowerOn();

	paramseq.noappli = noappli;
	memcpy (param_out, &paramseq, sizeof (paramseq));
	return (OK);

}

int is_state(NO_SEGMENT no,void *p1,S_ETATOUT *etatseq)
{
	S_ETATOUT etatout;
	int retour;

	memcpy (&etatout, etatseq, sizeof(etatout));
	etatout.returned_state[etatout.response_number].state.response = REP_OK;
	memcpy (etatseq, &etatout, sizeof(etatout));
	retour = is_name (no, PT_NULL, etatseq);
	return (retour);
}

int is_name(NO_SEGMENT no,void *p1,S_ETATOUT *etatseq)
{
	S_ETATOUT etatout;
	memset(&etatout, 0, sizeof(etatout));

	memcpy ((char *)&etatout, (char *)etatseq, sizeof(etatout));
	strcpy((char *)etatout.returned_state[etatout.response_number].appname,(char *)appname);
	etatout.returned_state[etatout.response_number].no_appli = no;
	etatout.response_number++;
	memcpy (etatseq, &etatout, sizeof(etatout));
	return (FCT_OK);
}

int give_your_domain(NO_SEGMENT no,void *p1,S_INITPARAMOUT *param_out)
{
	S_INITPARAMOUT etatout;

	memcpy (&etatout, param_out, sizeof(etatout));//|MSK_SWIPE
	//etatout.returned_state[etatout.response_number].mask     = MSK_MDP|MSK_TYPE_PPAD|MSK_PINPAD|MSK_STANDARD|MSK_LANGUE|MSK_FRMT_DATE|MSK_DATE;
	etatout.returned_state[etatout.response_number].mask     = MSK_ALL_PARAM;
	etatout.returned_state[etatout.response_number].application_type = TYP_EXPORT;
	etatout.response_number++;
	memcpy (param_out, &etatout, sizeof(etatout));
	return (FCT_OK);
}

int is_change_init(NO_SEGMENT noappli, void *p1, S_ETATOUT *param_out)
{
	S_ETATOUT etatout;
	int       retour;
	memcpy(&etatout, param_out, sizeof(etatout));
	// accept all
	etatout.returned_state[etatout.response_number].state.mask=0;
	memcpy(param_out,&etatout,sizeof(etatout));
	retour = is_name (noappli, PT_NULL, param_out);
	return(FCT_OK);
}

static int getTrk(char *trk,const S_TRANSIN *src)
{
	const char *ptr;
	char *dst;
	byte len;
	VERIFY(trk);
	VERIFY(src);
	memcpy(trk+0*128,src->track1,sizeof(src->track1));

	ptr= src->track2;
	len= 0;
	if(*ptr++!='B')
		return -1;
	dst= trk+1*128;
	while(*ptr!='F')
	{
		if(len>=128)
			return -1;
		if(*ptr=='D')
			*dst++= '=';
		else
			*dst++= *ptr;
		len++;
		ptr++;
	}
	memcpy(trk+2*128,src->track3,sizeof(src->track3));
	return 128*3;
}

int debit_non_emv(NO_SEGMENT no,S_TRANSIN *param_in,S_TRANSOUT *param_out)
{
	S_TRANSIN card_in;
	unsigned char buf[128*3]; //trk1 + trk2 + trk3
	int ret;

	memset(buf,0, sizeof(buf));
	memcpy (&card_in, param_in, sizeof(card_in));
	ret= getTrk(buf,&card_in);
	if(ret>0)
		hdlMagStripe((char *)buf);

	return (FCT_OK);

}


int is_for_you_after(NO_SEGMENT no,S_TRANSIN * param_in, S_CARDOUT * param_out)
{

	S_TRANSIN card_in;
	int ret;
	int idx;
	unsigned char buf[128*3];//trk1 + trk2 + trk3

	memcpy (&card_in, param_in, sizeof(card_in));

	switch(card_in.support){
		case TRACK2_SUPPORT:
		case TRACK12_SUPPORT:
		case TRACK32_SUPPORT:
			memset(buf,0, sizeof(buf));
			idx= param_out->response_number;
			ret= getTrk(buf,&card_in);
			if(ret<0){
				param_out->returned_state[idx].cardappnumber = 0;
			}else{
				//ret = hdlAskMagCard(buf);
				param_out->returned_state[idx].cardappnumber = ret;
			}
			
			strcpy(param_out->returned_state[idx].appname, appname);
			param_out->returned_state[idx].cardapp[0].priority = CARD_PRIORITY;
			strcpy(param_out->returned_state[idx].cardapp[0].cardappname, appname);
			param_out->returned_state[idx].no_appli = no;
			param_out->response_number++;
			break;
		default:
			param_out->returned_state[idx].cardappnumber = 0;
			if((param_in->power_on_result) == 0)
			{
				ret = emvCheckCardBlocked();
				if (ret)
				{
					trcS("Card Blocked\n");
					usrInfo(infEmvCrdBlock);
				}
				else
				{
					ret= emvCheckFallback();
					if (ret)
					{
						trcS("Fallback Allowed\n");
						emvSetFallBack(1);
						usrInfo(infUnknownAID);
						pmtFallback();
						goto lblStop;
					}					
				}
			}

			break;
	}
    
	return (FCT_OK);
	lblStop:
	return STOP;
}
int keyboard_event(NO_SEGMENT noappli,S_KEY *key_in,S_KEY *key_out){
//    int ret;
	
	switch (key_in->keycode)
	{
	case N0: case N1: case N2: case N3: case N4: 
	case N5: case N6: case N7: case N8: case N9: 
	case T_VAL : case F4 :case F2 : case F3 :case F1:  
	case T_ANN :	
		key_out->keycode = 0;               // Inhibit these keys to Manager for International domain
		break; 
	case UP : case DOWN :
		hdlMainMenu();
		key_out->keycode= 0; //key_in->keycode;
		break;
	case T_POINT :                               
		 admEDCFunction();
		 key_out->keycode = 0; 
		 break;
	case T_F :   
	    {
	        int ret;                           // do not filter F key and return the same key ! 
		    ret = valAskPwd(appAdmPwd);
		    //CHECK(ret == kbdVAL, lblKO);
		    if(ret != kbdVAL)
                key_out->keycode = 0;
		    else  
		    key_out->keycode=key_in->keycode;   // Return the same key value for keys above !
	    }
		break;
	case T_CORR :  case NAVI_CLEAR : case NAVI_OK : 
		key_out->keycode=key_in->keycode;   // Return the same key value for keys above ! 
		break; 
	default :
		key_out->keycode=key_in->keycode;
		break;
	}

	//hdlKey (key_out->keycode);
    
	return (FCT_OK);
/*
	lblKO:
		key_out->keycode=0;
		return -1;
*/		
}

int time_function (NO_SEGMENT noappli,void *p1,void *p2)
{
	hdlWakeUp();
	return (FCT_OK);
}

int file_received(NO_SEGMENT no,S_FILE * param_in,void *p2)
{
	S_FS_PARAM_CREATE ParamCreat;
	int ret;
	char filepath[25+1];
	char dir[25+1];
	byte dat[600]="";
	S_FS_FILE  *pFile;
	S_FS_DIR *pHostDir;
	S_FS_FILEINFO dirData;
	tBuffer bRsp;

	bufInit(&bRsp, dat, sizeof(dat));
	memclr(filepath,sizeof(filepath));
	memclr(dir,sizeof(dir));

	sprintf(dir,"/%s",param_in->volume_name);

	if(strcmp(dir,"/HOST") == 0)
	{

		ParamCreat.Mode = FS_WRITEONCE;

		ret = FS_mount (dir,&ParamCreat.Mode);
		pHostDir = FS_opendir ("/HOST/*");

		while( FS_readdir ( pHostDir, &dirData ) == FS_OK )
		{


			if(strcmp(dirData.FileName,"LALALA.TXT") == 0)
			{

				dspClear();
				dspLS(0, " INITIALISATION ");
				dspLS(1, "   FILE FOUND   ");
				ttestall(0,100);
				sprintf(filepath,"/%s/%s",param_in->volume_name,param_in->file_name);
				pFile = FS_open (filepath, "r");

				ret = FS_read(bRsp.ptr, dirData.FileSize, 1, pFile);    //load from file
				if(ret == 1)
				{
					dspLS(2, "    . . . .     ");
					dspLS(3, "  READING DONE  ");
					ttestall(0,100);

					bRsp.pos = dirData.FileSize;
					prtS(bRsp.ptr);
				}
				else
				{
					dspLS(2, "    . . . .     ");
					dspLS(3, "  READING ERROR ");
					ttestall(0,100);
				}

				FS_close(pFile);
			}
		};

		FS_closedir(pHostDir);
		FS_unmount(dir);
	};

	return (FCT_OK);
}

//------------------------------------------------------------------------------
// from Trn62ww23
int give_aid(NO_SEGMENT no, S_TRANSIN * param_in, _DEL_ *  param_out) {
	emvGetAids(param_out, no);
	return (FCT_OK);
}

int is_card_emv_for_you (NO_SEGMENT no, S_AID * aid, S_CARDOUT * crdout){
	// Accept the card
	crdout->response_number = 1;
	strcpy(crdout->returned_state[0].appname, appname);
	crdout->returned_state[0].cardapp[0].priority = 1;
	strcpy(crdout->returned_state[0].cardapp[0].cardappname, "EMV CHIP");
	crdout->returned_state[0].cardappnumber = 1;
	crdout->returned_state[0].no_appli = no;

	return STOP;
}

int debit_emv (NO_SEGMENT no, S_TRANSIN * transin, S_TRANSOUT * transout){
	hdlSmartCard((char*)&transin->del);
	transout->noappli = no;
	transout->rc_payment = PAY_OK;
	return STOP;
}



