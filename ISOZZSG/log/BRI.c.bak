#include "SDK30.h"
#include "OEM_Public.h"
#include "sys.h"
#undef __USE_DEL_INTERFACE__
#include "TlvTree.h"
#include "LinkLayer.h"
#include "oem_dgprs.h"
#ifdef __CHN_GPRS__
#include "gprs_lib.h"
#endif

#ifdef __CHN_SSL__
#include <string.h>
#include <SSL_.h>
#include <X509_.h>
#endif

#ifdef __CHN_FTP__
#include <FTP_.h>
#endif

#ifdef __CHN_TCP__
#include<IP_.h>
#endif
   
#ifdef __CHN_SCK__
#include<IP_.h>
#endif

#include "stdlib.h"
#include "lineEncryption.h"
#include "BRI.h"
#include "prepaid.h"

typedef struct sComChn {
    byte chn;                   // communication channel used
    byte chnRole;
    struct {
        LL_HANDLE hdl;
        char separator;
        unsigned long int conn_delay;   // 4 Second delay
        unsigned long int ll_conn_delay;
        unsigned int send_timeout;
        int ifconn;
#ifdef __CHN_COM__
        byte BperB;             //BITS_PER_BYTE 7 or not
        byte Parity;            //PARITY
#endif
#ifdef __CHN_SCK__
        int hdlSck;
        struct sockaddr_in peeraddr_in; // For peer socket address.
#endif
#ifdef __CHN_GPRS__
        struct {                //chn= chnGprs
            unsigned int cTimeout;
            unsigned int cValue;
        } gprs;
#endif
#ifdef __CHN_SSL__
        SSL_HANDLE hdlSsl;
        SSL_PROFILE_HANDLE hdlProfile;
        char SslProfName[PROFILE_NAME_SIZE + 1];
#endif
    } prm;
    TLV_TREE_NODE hCfg;
    TLV_TREE_NODE hPhyCfg;
    TLV_TREE_NODE hDLinkCfg;
    TLV_TREE_NODE hTransCfg;
} tComChn;

extern tComChn prepaidCom;

//++ @ BRI report 
typedef enum 
{
    //card service
    GANTI_PIN,
    AKTIVASI_KARTU,
    RENEWAL_KARTU,
    GANTI_PASSWORD_SPV,
    REISSUE_PIN,
    
    //mini atm
    INFO_SALDO,
    INFO_SALDO_BANK_LAIN,
    TRANSFER_SESAMA_BRI,
    TRANSFER_ANTAR_BANK,
    /*Changed By Ali*/
    PEMBAYARAN_TV,
    PEMBAYARAN_TELKOM,
    /*End Of Changed By Ali*/        
    PEMBAYARAN_PLN,
    PEMBAYARAN_CICILAN,
    PEMBAYARAN_SIMPATI,
    PEMBAYARAN_MENTARI,
    PEMBAYARAN_IM3,
    PEMBAYARAN_XL,
    PEMBAYARAN_ZAKAT,
    PEMBAYARAN_INFAQ,
    
    PEMBAYARAN_HALO,
    PEMBAYARAN_MATRIX,
    
    //tunai
    TARIK_TUNAI,
    VOID_TARIK_TUNAI,
    SETOR_SIMPANAN,
    SETOR_PINJAMAN,
	/*Changed By Ali*/
	TRX_TRANSFER,
	TRX_PULSA,
	/*End Of Changed By Ali*/
#ifdef PREPAID
    PREPAID_PAYMENT,
    TOPUP_DEPOSIT,
    TOPUP_ONLINE,
    AKTIVASI_DEPOSIT,
    PREPAID_REDEEM,
#endif    

    tTotalEnd
}tTotalIdx;

typedef struct
{
    char amt[lenAmt+1];
    char pan[lenPan+1];
    char txnDateTime[lenDatTim+1];
    char refNum[lenRrn+1];
    char expDat[lenExpDat+1];
    char appCode[lenAutCod+1];
    char transName[21];
    card stan;
    card roc;
    
    //card service log
    char nomorKartuPetugas[lenNomorKartuPetugas+1];
    char nomorKartuLama[lenNomorKartuLama+1];        
}DETAIL_TRANS_T;
    
static word mLogKey[mLogEnd - mLogBeg - 1] = {
    traVoidFlag,                ///<logVoidFlag: Indicator if this txn is already void
    traTipFlag,
    traMti,
    traMnuItm,                  ///<logMnuItm: menu item selected
    traDatTim,                  ///<logDatTim: current date and time CCYYMMDDhhmmss
    traBinIdx,                  ///<logBinIdx: index in Bin multirecord
    traAcqIdx,                  ///<logAcqIdx: index in Acq multirecord
    traIssIdx,                  ///<logIssIdx: index in Iss multirecord
    traPan,                     ///<logPan: card number
    traExpDat,                  ///<logExpDat: expiry date
    traExpDatFmt,			//<logExpDatFmt
    traTrk2,                    ///<logTrk2: rack 2 of the card
    traAutCod,                  ///<logAutCod: Authorization (approval) code
    regAutCodOff,
    acqCurBat,                  ///<logBatNum: batch number
    traAmt,                     ///<logTraAmt: Transaction Amount
    traFmtAmt,		  //amount formatted	
    traTipAmt,                  ///<logTipAmt:  Transaction Tip Amount
    traFmtTip,
    traEmvICC,		//revICCData, bit 55
    regSTAN,                    ///<logSTAN: System Trace Audit Number 1..999999
    traRrn,                     ///<logRrn: Retrieval Reference Number
    traRspCod,		//response code
    traPinBlk,
    regInvNum,                  ///<logROC: invoice number / R.O.C.
    traEntMod,                  ///<logEntMod: POS Entry Mode
    traConCode,                 ///<logConCod: POS Condition Code
    traCardType,                 ///<logCardType: Card Type
    
    traSubType,
    traInquiryAmt,
    
    traNomorRekeningTujuan,
    traNomorRekeningTujuanBRI,
    traNamaPenerima,
    traNomorRekeningAsal,
    traNomorRekeningAsalBRI,
    traNamaPengirim,
    traCustomerRefNumber,
    traNamaBankAsal,
    traNamaBankTujuan,
    traJenisRekening,
    traJenisTransfer,
    
    traKodeWilayah,
    traNamaPelangganPLN,
    traPelangganId,
    traLWBP,
    traMPLO,
    traMeter,  
    traBillPeriod1,         
    traBillPeriod2,          
    traBillPeriod3,          
    traBillPeriod4,  
    traCustomerSegment,
    traPowerConsuming,      
    
    traTotalOutstanding,
    traBillStatus,
    traPaymentStatus ,
    traCustomerName,
    traContractNumber,
    traCustomerType,
    traAdminCharge,
    traPaymentNumber,
    traDueDate,
    traTotalAmount,
    traPokokHutang,
    traBunga,
    traPenaltyFee,
    
    traNoTelpon,
    traNominalVoucher,
    traPeriode,
    traNoVoucher,
    traKodeMRP,
    
    traSisaSaldo,
    traFee,
    traJenisKartu
};

static word cLogKey[cLogEnd - cLogBeg - 1] = {
    traVoidFlag,                ///<logVoidFlag: Indicator if this txn is already void
    traTipFlag,
    traMti,
    traMnuItm,                  ///<logMnuItm: menu item selected
    traDatTim,                  ///<logDatTim: current date and time CCYYMMDDhhmmss
    traBinIdx,                  ///<logBinIdx: index in Bin multirecord
    traAcqIdx,                  ///<logAcqIdx: index in Acq multirecord
    traIssIdx,                  ///<logIssIdx: index in Iss multirecord
    traPan,                     ///<logPan: card number
    traExpDat,                  ///<logExpDat: expiry date
    traExpDatFmt,			//<logExpDatFmt
    traTrk2,                    ///<logTrk2: rack 2 of the card
    traAutCod,                  ///<logAutCod: Authorization (approval) code
    regAutCodOff,
    acqCurBat,                  ///<logBatNum: batch number
    traAmt,                     ///<logTraAmt: Transaction Amount
    traFmtAmt,		  //amount formatted	
    traTipAmt,                  ///<logTipAmt:  Transaction Tip Amount
    traFmtTip,
    traEmvICC,		//revICCData, bit 55
    regSTAN,                    ///<logSTAN: System Trace Audit Number 1..999999
    traRrn,                     ///<logRrn: Retrieval Reference Number
    traRspCod,		//response code
    traPinBlk,
    regInvNum,                  ///<logROC: invoice number / R.O.C.
    traEntMod,                  ///<logEntMod: POS Entry Mode
    traConCode,                 ///<logConCod: POS Condition Code
    traCardType,                 ///<logCardType: Card Type
  
    traNomorKartuPetugas,
    traNomorRekeningAsalBRI,
    traNamaPenerima,
    traTanggalLahir,      
    traNomorKartuLama,     
    traKodeUkerLama,       
    traKodeUkerBaru,       
    traStatusKartu
};

static word tLogKey[tLogEnd - tLogBeg - 1] = {
    traVoidFlag,                ///<logVoidFlag: Indicator if this txn is already void
    traTipFlag,
    traMti,
    traMnuItm,                  ///<logMnuItm: menu item selected
    traDatTim,                  ///<logDatTim: current date and time CCYYMMDDhhmmss
    traBinIdx,                  ///<logBinIdx: index in Bin multirecord
    traAcqIdx,                  ///<logAcqIdx: index in Acq multirecord
    traIssIdx,                  ///<logIssIdx: index in Iss multirecord
    traPan,                     ///<logPan: card number
    traExpDat,                  ///<logExpDat: expiry date
    traExpDatFmt,			//<logExpDatFmt
    traTrk2,                    ///<logTrk2: rack 2 of the card
    traAutCod,                  ///<logAutCod: Authorization (approval) code
    regAutCodOff,
    acqCurBat,                  ///<logBatNum: batch number
    traAmt,                     ///<logTraAmt: Transaction Amount
    traFmtAmt,		  //amount formatted	
    traTipAmt,                  ///<logTipAmt:  Transaction Tip Amount
    traFmtTip,
    traEmvICC,		//revICCData, bit 55
    regSTAN,                    ///<logSTAN: System Trace Audit Number 1..999999
    traRrn,                     ///<logRrn: Retrieval Reference Number
    traRspCod,		//response code
    traPinBlk,
    regInvNum,                  ///<logROC: invoice number / R.O.C.
    traEntMod,                  ///<logEntMod: POS Entry Mode
    traConCode,                 ///<logConCod: POS Condition Code
    traCardType,                 ///<logCardType: Card Type   
    traTrk1,
    
    traNomorRekeningAsalBRI,
    traNamaPenerima,
    traSisaSaldo,    
    traFee   
};
//--  BRI1 report

static word cLogKeyContext[cLogEnd - cLogBeg - 1] = {  //for some unknown reason , logEnd - logBeg doesnt work... for now hardcoded...
            traVoidFlagContext,         ///<logVoidFlag: Indicator if this txn is already void
            traMnuItmContext,           ///<logMnuItm: menu item selected
            traDatTimContext,           ///<logDatTim: current date and time CCYYMMDDhhmmss
            traBinIdxContext,           ///<logBinIdx: index in Bin multirecord
            traAcqIdxContext,           ///<logAcqIdx: index in Acq multirecord
            traIssIdxContext,           ///<logIssIdx: index in Iss multirecord
            traPanContext,              ///<logPan: card number
            traExpDatContext,           ///<logExpDat: expiry date
            traTrk2Context,             ///<logTrk2: rack 2 of the card
            traAutCodContext,           ///<logAutCod: Authorization (approval) code
            regBatNumContext,           ///<logBatNum: batch number
            traAmtContext,              ///<logTraAmt: Transaction Amount
            traTipAmtContext,           ///<logTipAmt:  Transaction Tip Amount
            regSTANContext,             ///<logSTAN: System Trace Audit Number 1..999999
            traRrnContext,              ///<logRrn: Retrieval Reference Number
            regInvNumContext,           ///<logROC: invoice number / R.O.C.
            traEntModContext,           ///<logEntMod: POS Entry Mode
            traConCodeContext,          ///<logConCod: POS Condition Code
            traCardTypeContext        ///<logCardType: Card Type      
        };

static word mLogKeyContext[mLogEnd - mLogBeg - 1] = {  //for some unknown reason , logEnd - logBeg doesnt work... for now hardcoded...
            traVoidFlagContext,         ///<logVoidFlag: Indicator if this txn is already void
            traMnuItmContext,           ///<logMnuItm: menu item selected
            traDatTimContext,           ///<logDatTim: current date and time CCYYMMDDhhmmss
            traBinIdxContext,           ///<logBinIdx: index in Bin multirecord
            traAcqIdxContext,           ///<logAcqIdx: index in Acq multirecord
            traIssIdxContext,           ///<logIssIdx: index in Iss multirecord
            traPanContext,              ///<logPan: card number
            traExpDatContext,           ///<logExpDat: expiry date
            traTrk2Context,             ///<logTrk2: rack 2 of the card
            traAutCodContext,           ///<logAutCod: Authorization (approval) code
            regBatNumContext,           ///<logBatNum: batch number
            traAmtContext,              ///<logTraAmt: Transaction Amount
            traTipAmtContext,           ///<logTipAmt:  Transaction Tip Amount
            regSTANContext,             ///<logSTAN: System Trace Audit Number 1..999999
            traRrnContext,              ///<logRrn: Retrieval Reference Number
            regInvNumContext,           ///<logROC: invoice number / R.O.C.
            traEntModContext,           ///<logEntMod: POS Entry Mode
            traConCodeContext,          ///<logConCod: POS Condition Code
            traCardTypeContext         ///<logCardType: Card Type
        };
        
static word tLogKeyContext[tLogEnd - tLogBeg - 1] = {  //for some unknown reason , logEnd - logBeg doesnt work... for now hardcoded...
            traVoidFlagContext,         ///<logVoidFlag: Indicator if this txn is already void
            traMnuItmContext,           ///<logMnuItm: menu item selected
            traDatTimContext,           ///<logDatTim: current date and time CCYYMMDDhhmmss
            traBinIdxContext,           ///<logBinIdx: index in Bin multirecord
            traAcqIdxContext,           ///<logAcqIdx: index in Acq multirecord
            traIssIdxContext,           ///<logIssIdx: index in Iss multirecord
            traPanContext,              ///<logPan: card number
            traExpDatContext,           ///<logExpDat: expiry date
            traTrk2Context,             ///<logTrk2: rack 2 of the card
            traAutCodContext,           ///<logAutCod: Authorization (approval) code
            regBatNumContext,           ///<logBatNum: batch number
            traAmtContext,              ///<logTraAmt: Transaction Amount
            traTipAmtContext,           ///<logTipAmt:  Transaction Tip Amount
            regSTANContext,             ///<logSTAN: System Trace Audit Number 1..999999
            traRrnContext,              ///<logRrn: Retrieval Reference Number
            regInvNumContext,           ///<logROC: invoice number / R.O.C.
            traEntModContext,           ///<logEntMod: POS Entry Mode
            traConCodeContext,          ///<logConCod: POS Condition Code
            traCardTypeContext         ///<logCardType: Card Type            
        };        


//static tComChn prepaidCom;
//byte prepaidRespCode[2];

#define CHK if(ret<0) return ret;

void hapusAwalan(char* str,char c)
{
/*********************************************************************
Diberi akhiran NULL
**********************************************************************/
   card len=0;
   card i=0;
   card lenStr = strlen(str);

   for(i=0; i < lenStr; i++)
   {
      len = lenStr-i;
      if(str[i] == c) continue;
      memmove(str,str+i,len);
      str[len]=0;
      return;
   }
   if(i == lenStr)
   {
      str[0] = 0;
   }
}

void trimRight(char* buf, byte chr)
{
   char* ptr;

   ptr = buf+strlen(buf)-1;
   while(1)
   {
      if(*ptr == chr)
      {
         *ptr = 0;
         ptr--;
         continue;
      }
      break;
   }
}

void trimLeft(char* buf, byte chr)
{
	byte i;   
	
	i=0;
	while (i<strlen(buf)) {
		if (buf[i] == chr)
			i++;
		else break;
	}

	memmove(buf,&buf[i],strlen(buf)-i);
	buf[strlen(buf)-i] = 0x0;
}


int isBRIPrint(void)
{
	byte type;
	int ret;

	MAPGETBYTE(traTxnType,type,lblKO);

	switch(type)
	{
	    case trtInfoSaldo:
	    	ret = KonfirmasiInfoSaldo8();
	    	return ret;
	    case trtInfoSaldoBankLain:
	    	ret = KonfirmasiInfoSaldoLain8();
	    	return ret;
	    case trtTransferSesamaBRIInquiry:  
	    case trtTransferAntarBankInquiry:  
		/*Changed By Ali*/
		case trtPembayaranTVBerlanggananInquiry:
		case trtPembayaranTelkomInquiry:
		case trtTrxPhoneBankingTransferInquiry:
		case trtPembayaranKKBRIInquiry:
		/*End of Changed By Ali*/	            
	    case trtPembayaranPLNInquiry:  
	    case trtPembayaranCicilanInquiry:
	    case trtSetorSimpananInquiry:
	    case trtSetorPinjamanInquiry:
	    case trtAktivasiKartuOtorisasi:	      
	    case trtAktivasiKartuInquiry:
	    case trtRenewalKartuOtorisasi:
	    case trtRenewalKartuInquiry:
//	    case trtRenewalKartu:
	    case trtReissuePINOtorisasi:
	    case trtPembayaranPascaBayarInquiry:
	        return 0;
	    default:
	        return 1;            
	}
	
lblKO:
	return -1;
}

char* convertBulan(byte jenis, char* bulanHuruf, byte bulanAngka)
{
    char *blnPendek[]={
    "-: ", //monSpr
    "Jan", //monJan
    "Feb", //monFeb
    "Mar", //monMar
    "Apr", //monApr
    "May", //monMay
    "Jun", //monJun
    "Jul", //monJul
    "Aug", //monAug
    "Sep", //monSep
    "Oct", //monOct
    "Nov", //monNov
    "Dec", //monDec
    };  

    char *blnPanjang[]={
    "-: ", //monSpr
    "JANUARI", //monJan
    "FEBRUARI", //monFeb
    "MARET", //monMar
    "APRIL", //monApr
    "MEI", //monMay
    "JUNI", //monJun
    "JULI", //monJul
    "AGUSTUS", //monAug
    "SEPTEMBER", //monSep
    "OKTOBER", //monOct
    "NOVEMBER", //monNov
    "DESEMBER", //monDec
    };        

    if(bulanAngka <= 12)
    {
        if(jenis == 0)
            strcpy(bulanHuruf,blnPendek[bulanAngka]);
        else
            strcpy(bulanHuruf,blnPanjang[bulanAngka]);
    }
    else
        bulanHuruf[0] = 0;
        
    return bulanHuruf;
}

int isBRISaveToBatch(void)
{
	byte type;
	int ret;
	char RspCod[lenRspCod + 1];

	MAPGETBYTE(traTxnType,type,lblKO);
	MAPGET(traRspCod, RspCod, lblKO);
	switch(type)
	{
	    case trtInfoSaldo:
	    case trtTransferSesamaBRIInquiry:  
	    case trtTransferAntarBankInquiry:     
		/*Changed By Ali*/
		case trtPembayaranTVBerlanggananInquiry:
		case trtPembayaranTelkomInquiry:
		case trtTrxPhoneBankingTransferInquiry:
		case trtRegistrasiSmsBanking:
		case trtPembayaranKKBRIInquiry:
		/*End of Changed By Ali*/		        
	    case trtPembayaranPLNInquiry:  
	    case trtPembayaranCicilanInquiry:
	    case trtSetorSimpananInquiry:
	    case trtSetorPinjamanInquiry:
	    case trtAktivasiKartuOtorisasi:
	    case trtAktivasiKartuInquiry:
	    case trtRenewalKartuOtorisasi:
	    case trtRenewalKartuInquiry:
	    case trtReissuePINOtorisasi:
	    case trtRegistrasiInternetBanking:
	    case trtRegistrasiPhoneBanking:
	    case trtGantiPIN:
	    case trtGantiPasswordSPV:
	    case trtPembayaranPascaBayarInquiry:
#ifdef ABSENSI	        
		/*Changed By Ali*/
		case trtAbsensi:
		/*End Of Changed By Ali*/	        
#endif			        
	        return 0;
#ifdef PREPAID
        case trtPrepaidInfoDeposit:
            return 0;
        case trtPrepaidPayment:
            return 1;
#endif	        
	    default:
	        if(memcmp(RspCod,"00",2)==0)
	                    return 1;
	        switch(type)
	        {
	            case trtAktivasiKartu:
	            case trtRenewalKartu:
	                if(memcmp(RspCod,"NC",2)==0)
	                    return 1;
	            default:
	                return 0;
	        }
	        return 0;            
	}
	
lblKO:
	return -1;
}

int isBRITransaction (void)
{
	byte type;
	int ret;

	MAPGETBYTE(traTxnType,type,lblKO)
	if( (type >= trtInfoSaldo && type <= trtPembayaranPascaBayar)
#ifdef ABSENSI	    
      || (type == trtAbsensi) /*Changed By Ali*/
#endif   	    
	  )
		return 1;
	else 
		return 0;
lblKO:
	return -1;
}

int isPembelianTransaction (void)
{
//	byte type;
	int ret;
	word mnuItem;

	MAPGETWORD(traMnuItm,mnuItem,lblKO);
	if(mnuItem > mnuPembelian && mnuItem <= mnuSettlement)
		return 1;
	else 
		return 0;
lblKO:
	return -1;
}

//++ @agmr - BRI1
int whichBRITransaction (void)
{
	byte type;
	int ret;

	MAPGETBYTE(traTxnType,type,lblKO)
	switch(type)
	{	    
        case trtInfoSaldo :
        case trtInfoSaldoBankLain:
        case trtTransferSesamaBRI:
        case trtTransferAntarBank:
        case trtPembayaranPLN:
        case trtPembayaranCicilan:
        case trtPembayaranPulsa:
        case trtPembayaranZakat:
        case trtPembayaranPascaBayar:  
		/*Changed By Ali*/
		case trtPembayaranTVBerlangganan:
		case trtPembayaranTelkom:
		case trtTrxPhoneBankingTransfer:
		case trtTrxPhoneBankingPulsa:
		case trtRegistrasiSmsBanking:
		case trtPembayaranKKBRI:
		case trtPembayaranKKANZ:
		case trtPembayaranKKCITIKK:
		case trtPembayaranKKCITIKTA:
		case trtPembayaranKKHSBCKK:
		case trtPembayaranKKHSBCKTA:
		case trtPembayaranKKRBSKK:
		case trtPembayaranKKRBSKTA:
		case trtPembayaranKKStanCharKK:
		case trtPembayaranKKStanCharKTA:
		/*End of Changed By Ali*/                       
            return MINI_ATM_LOG;
      
        case trtSetorPinjaman:
        case trtSetorSimpanan:
        case trtTarikTunai:
        case trtVoidTarikTunai:
            return TUNAI_LOG;
          
        case trtAktivasiKartu:   
        case trtRenewalKartu:
        case trtReissuePIN:
            return CARD_SERVICE_LOG;
#ifdef PREPAID
        case trtPrepaidInfoDeposit:
        case trtPrepaidPayment:
        case trtPrepaidDeposit:
        case trtPrepaidTopUp:
        case trtPrepaidRedeem:
        case trtPrepaidAktivasi:
#endif
        case trtInstallment:
        case trtRegistrasiInternetBanking:
        case trtRegistrasiPhoneBanking:
        case trtGantiPIN:
        case trtGantiPasswordSPV:
        case trtReissuePINOtorisasi:
        case trtRenewalKartuOtorisasi:
        case trtAktivasiKartuOtorisasi:
        case trtTransferSesamaBRIInquiry:
        case trtTransferAntarBankInquiry:
        case trtPembayaranPLNInquiry:
        case trtPembayaranCicilanInquiry:
        case trtSetorPinjamanInquiry:
        case trtSetorSimpananInquiry:
        case trtAktivasiKartuInquiry:
        case trtRenewalKartuInquiry:
        case trtPembayaranPascaBayarInquiry:
        default:
            return 0;
	}
	
lblKO:
    return 0;
}
//-- @agmr - BRI1

/*
int isBRIPaymentTransaction(void)
{
	byte type, flag;
	int ret;

	MAPGETBYTE(traTxnType,type,lblKO);
	MAPGETBYTE(traInquiryFlag,flag,lblKO);
	if(type >= trtInfoSaldo && type <= trtChangePIN && flag == 0)
		return 1;
	else 
		return 0;
	
lblKO:
	return -1;
}
*/

int pmtBRICustomInput()
{
    int ret;
    byte txnType;
    
    MAPGETBYTE(traTxnType, txnType, lblKO);
    switch(txnType)
    {
        case trtRegistrasiInternetBanking:
        case trtRegistrasiPhoneBanking:
        case trtInfoSaldo:
        case trtRenewalKartuOtorisasi:
        case trtAktivasiKartuOtorisasi:	
        case trtReissuePINOtorisasi:	
            return 1;
        case trtInfoSaldoBankLain:
            return (inputInfoSaldoBankLain());
        case trtTransferSesamaBRIInquiry:
            return (inputTransferSesamaBRI());
        case trtTransferAntarBankInquiry:
            return (inputTransferAntarBank());  
        case trtPembayaranPLNInquiry:
            return (inputPembayaranPLN());
        case trtPembayaranPulsa:
            return (inputPembayaranPulsa());  
        case trtPembayaranCicilanInquiry:
            return (inputPembayaranCicilan());
        case trtSetorSimpananInquiry:    
        case trtSetorPinjamanInquiry:
            return (inputSetoran(txnType)); 
        case trtTarikTunai:
            return (inputTarikTunai());
        case trtPembayaranZakat:
            return (inputPembayaranZakat());
        case trtInstallment:
            return (inputInstallment());
        case trtPembayaranPascaBayarInquiry:
            return (inputPembayaranPascaBayar());
        case trtGantiPasswordSPV:
            return (inputGantiPasswordSPV());
        case trtReissuePIN:
            return (inputReissuePIN()); 
		/*Changed By Ali*/
		case trtRegistrasiSmsBanking:
			return (inputSmsBanking());
		case trtPembayaranTVBerlanggananInquiry:
			return (inputPembayaranTV());
		case trtPembayaranTelkomInquiry:
			return (inputPembayaranTelkom());
		case trtTrxPhoneBankingTransferInquiry:
			return (inputTrxTransfer());
		case trtTrxPhoneBankingPulsa:
			return (inputTrxPulsa());
		case trtPembayaranKKBRIInquiry:
			return (inputPembayaranKKBRI());  
		case trtPembayaranKKANZ:
			return (inputPembayaranKKANZ());  
		case trtPembayaranKKCITIKK:
			return (inputPembayaranKKCITI());  
		case trtPembayaranKKCITIKTA:
			return (inputPembayaranKKCITI());  
		case trtPembayaranKKHSBCKK:
			return (inputPembayaranKKHSBC()); 
		case trtPembayaranKKHSBCKTA:
			return (inputPembayaranKKHSBC());  
		case trtPembayaranKKRBSKK:
			return (inputPembayaranKKRBS());  
		case trtPembayaranKKRBSKTA:
			return (inputPembayaranKKRBS());  
		case trtPembayaranKKStanCharKTA:
			return (inputPembayaranKKStanChar());
		case trtPembayaranKKStanCharKK:
			return (inputPembayaranKKStanChar());
		/*End Of Changed By Ali*/                     
#ifdef PREPAID
        case trtPrepaidDeposit:
            return (inputPrepaidDeposit());
        case trtPrepaidTopUp:
        case trtPrepaidAktivasi:
            ret = pmtPrepaidInquiry();
            if(ret < 0)
                goto lblKO; 
            break;
        case trtPrepaidRedeemInquiry:
            ret = pmtPrepaidRedeemInquiry();
            if(ret < 0)
                goto lblKO;                        
            break;      
#endif        
       default:
            break;     
    }
    
    return 1;
lblKO:
    if(ret == -100)
        return ret;
    return -1;
}

int infoKodeBank()
{
    char msg[151][22] =
    {
		"002:B R I",
		"003:EKSPOR INDONESIA",
		"008:MANDIRI",
		"009:B N I",
		"011:DANAMON",
		"013:PERMATA",

		"014:B C A",
		"016:B I I",
		"019:PANIN",
		"020:ARTA NIAGA",
		"    KENCANA",
		"022:CIMB NIAGA",

		"023:BUANA",
		"026:LIPPO",
		"028:OCBC NISP",
		"030:AMEX",
		"031:CITIBANK",
		"032:JP MORGAN CHASE",

		"033:BANK OF AMERICA",
		"034:ING INDONESIA",
		"036:BANK WINDU",
		"037:ARTHA GRAHA",
		"039:CREDIT AGRICOLE",
		"    INDO",

		"040:BANGKOK BANK",
		"041:HSBC",
		"042:TOKYO",
		"045:SUMITOMO MITSUI",
		"046:D B S",
		"047:RESONA PERDANIA",

		"048:MIZUHO",
		"050:S C B",
		"052:RBS / ABN AMRO",
		"053:KEPPEL TATLEE",
		"    BUANA",
		"054:CAPITAL",

		"057:BNP PARIBAS",
		"058:U O B",
		"059:KOREA EXCHANGE",
		"060:RABOBANK",
		"061:A N Z",
		"067:DEUTSCHE BANK",

		"068:WOORI",
		"069:BANK OF CHINA",
		"076:BUMI ARTA",
		"087:EKONOMI",
		"088:ANTARDAERAH",
		"089:RABOBANK / HAGA",

		"093:I F I",
		"095:CENTURY/MUTIARA",
		"097:MAYAPADA",
		"110:JABAR BANTEN",
		"111:D K I",
		"112:D I Y",

		"113:JATENG",
		"114:JATIM",
		"115:BPD JAMBI",
		"116:BPD ACEH",
		"117:BPD SUMUT",
		"118:NAGARI",

		"119:BPD RIAU",
		"120:SUMSEL",
		"121:BPD LAMPUNG",
		"122:BPD KALSEL",
		"123:KALBAR",
		"124:BPD KALTIM",

		"125:BPD KALTENG",
		"126:BPD SULSEL",
		"127:BANK SULUT",
		"128:BANK NTB",
		"129:BPD BALI",
		"130:BANK NTT",

		"131:BPD MALUKU",
		"132:BPD PAPUA",
		"133:BPD BENGKULU",
		"134:BANK SULTENG",
		"135:BPD SULTRA",
		"145:B N P",

		"146:SWADESI",
		"147:MUAMALAT",
		"151:MESTIKA",
		"153:SINARMAS",
		"157:MASPION",
		" ",
		
		"159:RABOBANK/",
		"    HAGAKITA",
		"161:GANESHA",
		"162:WINDU KENTJANA",
		"164:HALIM INDONESIA",
		" ",
		
		"166:HARMONI",
		"    INTERNATIONAL",
		"167:KESAWAN",
		"200:B T N",
		"212:HS 1906",
		"213:B T P N",

		"405:SWAGUNA",
		"422:JASA ARTA",
		"426:MEGA",
		"441:BUKOPIN",
		"451:SYARIAH MANDIRI",
		" ",

		"459:BISNIS",
		"    INTERNASIONAL",
		"466:SRI PARTHA",
		"472:JASA JAKARTA",
		"484:BINTANG",
		"    MANUNGGAL",

		"485:BUMIPUTERA",
		"490:YUDHA BHAKTI",
		"491:MITRANIAGA",
		"494:AGRO",
		"498:INDOMONEX",
		"501:BANK ROYAL",

		"503:ALFINDO",
		"506:MEGA SYARIAH",
		"513:BANK INA",
		"517:HARFA",
		"520:PRIMA MASTER",
		"    BANK",

		"521:PERSYARIKATAN",
		"523:DIPO",
		"    INTERNATIONAL",
		"525:BANK AKITA",
		"526:LIMAN",
		"    INTERNATIONAL",

		"531:ANGLOMAS",
		"535:KESEJAHTERAAN",
		"536:U I B",
		"542:ARTOS INDONESIA",
		"547:PURBA DANARTA",
		" ",
		
		"548:MULTI ARTA",
		"    SENTOSA",
		"553:MAYORA",
		"555:BANK INDEX",
		"558:EKSEKUTIF",
		"559:CENTRATAMA",

		"562:FAMA",
		"    INTERNASIONAL",
		"564:SINAR HARAPAN",
		"    BALI",
		"566:VICTORIA",
		"567:BANK HARDA",

		"945:FINCONESIA",
		"946:MERINCORP",
		"947:MAYBANK",
		"948:OCBC INDONESIA",
		"949:CHINA TRUST",
		"950:COMMONWEALTH",
		{NULL}
    };
    int ret;
//    char buf[50];
    ret = scrollDisplay8(msg,151,6,"    KODE BANK"," ");
    //ret = scrollDisplay(msg,5,3,"INFO KODE BANK",NULL);
    return ret;
}

int pmtBRIKonfirmasiTanpaInquiry(byte txnType)
{
/*
return 0 : batal kirim
return 1 : ada pengiriman
return -1 : error
*/    
    int ret;
//    char buf[50];
//    char key = 0; 
     
    switch(txnType)
    {
        case trtPembayaranPulsa:
            ret = KonfirmasiPembayaranPulsa(); 
            break;
        case trtPembayaranZakat:    
            ret = KonfirmasiPembayaranZakat();
            break;
        case trtRegistrasiInternetBanking:
            ret = KonfirmasiRegistrasiInternetBanking();
            break;    
        case trtRegistrasiPhoneBanking:
            ret = KonfirmasiRegistrasiPhoneBanking(); 
            break;
		/*Changed By Ali*/
		case trtRegistrasiSmsBanking:
			ret = KonfirmasiRegistrasiSmsBanking();
			break;
		case trtPembayaranKKBRI:
			ret = KonfirmasiPembayaranKKBRIBayar();
			break;
		case trtPembayaranKKANZ:
			ret = KonfirmasiPembayaranKKANZ();
			break;
		case trtPembayaranKKCITIKK:
			ret = KonfirmasiPembayaranKKCITI();
			break;
		case trtPembayaranKKCITIKTA:
			ret = KonfirmasiPembayaranKKCITI();
			break;
		case trtPembayaranKKHSBCKK:
			ret = KonfirmasiPembayaranKKHSBC();
			break;
		case trtPembayaranKKHSBCKTA:
			ret = KonfirmasiPembayaranKKHSBC();
			break;
		case trtPembayaranKKRBSKK:
			ret = KonfirmasiPembayaranKKRBS();
			break;
		case trtPembayaranKKRBSKTA:
			ret = KonfirmasiPembayaranKKRBS();
			break;
		case trtPembayaranKKStanCharKK:
			ret = KonfirmasiPembayaranKKStanChar();
			break;
		case trtPembayaranKKStanCharKTA:
			ret = KonfirmasiPembayaranKKStanChar();
			break;
		/*End Of Changed By Ali*/            
        case trtReissuePINOtorisasi:
        case trtAktivasiKartuOtorisasi:
//        case trtRenewalKartuOtorisasi:
            ret = KonfirmasiKartuOtorisasi();
           break;  
        case trtInstallment:
            ret = KonfirmasiInstallment();
            break; 
        case trtVoidTarikTunai:
            ret = KonfirmasiVoidTarikTunai();
            break;
       default:
            ret = 1;
           
    }
//    goto lblEnd;
//lblKO:
//    ret =  -1;
//lblEnd:
    return ret;
}


int pmtBRIKonfirmasiSesudahInquiry()
{
/*
return 0 : selesai
return 1 : ada pengiriman selanjutnya
return -1 : error
*/    
    int ret;
    byte isInquiry = 0;
    byte nextTxn = 0;
    byte txnType; 
     
    MAPGETBYTE(traTxnType, txnType, lblKO);       
    MAPGETBYTE(traInquiryFlag, isInquiry, lblKO);
//    if(isInquiry == 0)
//        return 0;
    MAPPUTBYTE(traInquiryFlag,0,lblKO);
    switch(txnType)
    {
        case trtTransferSesamaBRIInquiry:
            ret = KonfirmasiTransferSesamaBRI();
            break;
        case trtTransferAntarBankInquiry:
            ret = KonfirmasiTransferAntarBank();
            break;            
        case trtPembayaranCicilanInquiry:
            ret = KonfirmasiPembayaranCicilan8();                     
            break;
        case trtSetorPinjamanInquiry:
        case trtSetorSimpananInquiry:
            ret = KonfirmasiSetoran(txnType); 
            break;   
		/*Changed By Ali*/
		case trtPembayaranTVBerlanggananInquiry:
			ret = KonfirmasiPembayaranTV();
			break;
		case trtPembayaranTelkomInquiry:
			ret = KonfirmasiPembayaranTelkom();
			break;
		case trtTrxPhoneBankingTransferInquiry:
			ret = KonfirmasiTrxTransfer();
			break;
		case trtTrxPhoneBankingPulsa:
			ret = KonfirmasiTrxPulsa();
			break;
		case trtPembayaranKKBRIInquiry:
			ret = KonfirmasiPembayaranKKBRIBayar();
			break;
#ifdef ABSENSI			
		case trtAbsensi:
			ret = KonfirmasiAbsensi();
			break;
#endif			
		/*End of Changed By Ali*/                       
        case trtPembayaranPLNInquiry:
            ret = KonfirmasiPembayaranPLN();     
			break;            
		case trtReissuePINOtorisasi:	
		case trtAktivasiKartuOtorisasi:
		case trtRenewalKartuOtorisasi:  		         
            ret = 9999;      
		    break;
        case trtAktivasiKartuInquiry:  
        case trtRenewalKartuInquiry:            
            ret = KonfirmasiAktivasiKartu();
            break;
		case trtPembayaranPascaBayarInquiry:
			//ret = KonfirmasiPembayaranPascaBayar();
			ret = KonfirmasiPembayaranPascaBayar8();
			break;
			
#ifdef PREPAID
        case trtPrepaidRedeemInquiry:
            ret = KonfirmasiPrepaidRedeem();
            break;
#endif			
       default:
            ret = 0;	        
            break;
           
    }
//    if(ret < 1) goto lblKO;
    if(ret == 0) goto lblEnd;

    MAPGETBYTE(traNextTxn, nextTxn, lblKO);
    if(nextTxn == 0)
    {
        ret = 0;
        goto lblEnd;
    }
    MAPPUTBYTE(traTxnType, nextTxn, lblKO);
    ret = 1;
    goto lblEnd;
lblKO:
    ret =  -1;
lblEnd:
    return ret;
}

int isBRIInquiryTransaction()
{
	byte txnType;
	int ret;
	MAPGETBYTE(traTxnType,txnType,lblKO);
	switch(txnType)
	{
		case trtTransferSesamaBRIInquiry:
		case trtTransferAntarBankInquiry:
		case trtPembayaranPLNInquiry:
		case trtPembayaranCicilanInquiry:
		case trtSetorPinjamanInquiry:
		case trtSetorSimpananInquiry:
		case trtPembayaranPascaBayarInquiry:
		/*Changed By Ali*/
		case trtPembayaranTVBerlanggananInquiry:
		case trtPembayaranTelkomInquiry:
		case trtTrxPhoneBankingTransferInquiry:
		case trtPembayaranKKBRIInquiry:
		/*End of Changed By Ali*/			    
#ifdef PREPAID
        case trtPrepaidRedeemInquiry:
#endif			    
			return 1;
		default:
			return 0;
	}
lblKO:
	return 0;
}

int inputInfoSaldoBankLain()
{
    int ret;
    int key;
    
    while(1)
    {
        key = usrInfo(infInfoSaldoBankLain);
        if(key == '1')
        {
            MAPPUTBYTE(traJenisRekening,REK_TABUNGAN,lblKO);
            break;       
        }   
        else if(key == '2')
        {
            MAPPUTBYTE(traJenisRekening,REK_GIRO,lblKO);
            break;    
        }
        else if(key == 0xff)
            goto lblKO;
        
        else if(key == 0)
            goto lblBatal;
    }
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;    
lblKO:
    ret = -1;
lblEnd:
    return ret;        
}

int inputTransferSesamaBRI()
{
    int ret;
//    char key;
    char buf[20];
    byte Exp;
    
    dspClear();
    dspLS(0|0x40,"  Transfer BRI");
    dspLS(1,"Nomor Rekening");
    dspLS(2,"Tujuan:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(3, buf, lenNomorRekeningBRI+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= lenNomorRekeningBRI)
	    	break;
	    Beep();
    }    
    MAPPUTSTR(traNomorRekeningTujuanBRI,buf,lblKO);
    
    dspClear();
    dspLS(0|0x40,"  Transfer BRI");
    dspLS(1,"Jumlah:      Rp.");
    memset(buf,0,sizeof(buf));
    MAPGETBYTE(appExp, Exp, lblKO);
    while(1)
    {
	    ret = enterAmt(2,buf,Exp);
	    if(ret == kbdANN)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(buf[0] != '0' && buf[0] != 0)
	    	break;
	    Beep();
    }

    MAPPUTSTR(traAmt,buf,lblKO);
//	ret = valAmount();
//	CHECK(ret > 0, lblKO);      // Check amount limit

    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;    
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int inputTransferAntarBank()
{
    int ret;
    int key;
    char buf[20];
    byte Exp;
//    typedef struct sInfo {
//    char cmd;                   ///<command: i- ignore, s- show, b- beep
//    char msg[dspH][dspW + 1];   ///<messages to display on each line
//    byte dly;                   ///<timeout in seconds
//} tInfo;
    tInfo inf;

    inf.cmd = 's';
    strcpy(inf.msg[0],"  Antar Bank");
    strcpy(inf.msg[1],"Rekening Asal");    
    strcpy(inf.msg[2],"1. Tabungan");
    strcpy(inf.msg[3],"2. Giro");
    inf.dly = 30;
    
    while(1)
    {
        key = info(&inf);
        if(key == '1')
        {
            MAPPUTBYTE(traJenisRekening,REK_TABUNGAN,lblKO);
            break;       
        }   
        else if(key == '2')
        {
            MAPPUTBYTE(traJenisRekening,REK_GIRO,lblKO);
            break;    
        }
        else if(key == 0xff)
            goto lblKO;
        
        else if(key == 0)
        {    
            ret = 0;    
            goto lblEnd;
        }       
    }
    
	dspClear();
//    dspLS(0,"  Antar Bank");
/*	display_text(2, 0, 	"Kode Bank dan Nomor",  	dsp_ALIGN_LEFT);
	display_text(3, 0, 	"Rekening Tujuan:",  	dsp_ALIGN_LEFT);
*/	
	dspLS(0,"Kode Bank dan Nomor");
	dspLS(1,"Rekening Tujuan:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, sizeof(buf));
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;   
	    if(strlen(buf) >= 10)
	    	break;
	    Beep();
    }
    mapPut(traBankId,buf,3);
    MAPPUTSTR(traNomorRekeningTujuan,buf+3,lblKO);

    dspClear();
    dspLS(0|0x40,"  Antar Bank");
    dspLS(1,"Jumlah:      Rp.");
    memset(buf,0,sizeof(buf));
    MAPGETBYTE(appExp, Exp, lblKO);
    while(1)
    {
	    ret = enterAmt(2,buf,Exp);
	    if(ret == kbdANN)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(buf[0] != '0' && buf[0] != 0)
	    	break;
	    Beep();
    }

    MAPPUTSTR(traAmt,buf,lblKO);
//    ret = valAmount();
//    CHECK(ret > 0, lblKO);      // Check amount limit
    
    dspClear();
//    dspLS(0,"  Antar Bank");
    dspLS(0,"Enter Cust Ref Number");
    dspLS(1,"atau Lanjut:");
    dspLS(3,"BATAL     LANJUT");
    memset(buf,0,sizeof(buf));
    ret = enterPhr(2, buf, sizeof(buf));
    if(ret == kbdANN || ret == kbdF1)
        goto lblBatal;
    if(ret < 0)
        goto lblKO;   
        
    MAPPUTSTR(traCustomerRefNumber,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;     
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

/*Changed By Ali*/
int inputPembayaranTV()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"TV BERLANGGANAN");
    dspLS(1,"No ID Pelanggan:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenNoTelpon+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traNamaPenerima,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;    
}

int inputPembayaranTelkom()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"PEMB. TELKOM");
    dspLS(1,"KODE AREA + TELP:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenNoTelpon+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traNamaPenerima,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;    
}

int inputSmsBanking()
{
	
	int ret;
    char buf[20], buf_2[20];
	char key;
    
    dspClear();
    dspLS(0|0x40,"  SMS BANKING");
    dspLS(1,"No Telepon:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenNoTelpon);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
        
	MAPPUTSTR(traNoTelpon,buf,lblKO);


	dspClear();
    dspLS(0|0x40,"  SMS BANKING");
    dspLS(1,"PIN  :");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenPINInternetBanking);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traPINInternetBanking,buf,lblKO);

	dspClear();
    dspLS(0|0x40,"  SMS BANKING");
    dspLS(1,"Konfirmasi PIN  :");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenPINInternetBanking);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }

	MAPGET(traPINInternetBanking,buf_2,lblKO);
	if(strcmp(buf_2, buf) == 0){
    	MAPPUTSTR(traPINInternetBanking,buf,lblKO);
	}else{
		dspClear();
    	dspLS(0|0x40,"  SMS BANKING");
    	dspLS(1,"  PIN  Salah");
		key = acceptable_key(kbdVAL_kbdANN, 60);
		CHECK(key != kbdANN, lblBatal);
	}
	
	return 1;
	lblBatal:
		ret = 0;
		goto lblEnd;	   
	lblKO:
		ret = -1;
	lblEnd:
		return ret; 

}

int inputTrxTransfer()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"  REG TRANSFER");
    dspLS(1,"Input No Rek:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenPelangganId+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traPelangganId,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;        
}

int inputTrxPulsa()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"  REG PULSA");
    dspLS(1,"Input No HP:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenPelangganId+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traNoTelpon,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;       
}

int inputPembayaranKKBRI()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"  PEMB. KK BRI");
    dspLS(1,"Input No KK:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenMeter+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 16)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traMeter,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;    
}

int inputPembayaranKKANZ()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA ANZ");
    dspLS(1,"Input No KK/KTA:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenMeter+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traMeter,buf,lblKO);

	dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA ANZ");
    dspLS(1,"Input Jumlah:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenAmt+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traAmt,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;    
}

int inputPembayaranKKCITI()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA CITI");
    dspLS(1,"Input No KK/KTA:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenMeter+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traMeter,buf,lblKO);

	dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA CITI");
    dspLS(1,"Input Jumlah:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenAmt+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traAmt,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;    
}

int inputPembayaranKKHSBC()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA HSBC");
    dspLS(1,"Input No KK/KTA:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenMeter+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traMeter,buf,lblKO);

	dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA HSBC");
    dspLS(1,"Input Jumlah:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenAmt+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traAmt,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;    
}

int inputPembayaranKKRBS()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA RBS");
    dspLS(1,"Input No KK/KTA:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenPhone+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traMeter,buf,lblKO);

	dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA RBS");
    dspLS(1,"Input Jumlah:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenAmt+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traAmt,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;    
}

int inputPembayaranKKStanChar()
{
	int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA SCB");
    dspLS(1,"Input No KK/KTA:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenMeter+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traMeter,buf,lblKO);

	dspClear();
    dspLS(0|0x40,"PEMB. KK/KTA SCB");
    dspLS(1,"Input Jumlah:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenAmt+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traAmt,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;    
}


/*End of Changed By Ali*/

int inputPembayaranPLN()
{
    int ret;
    char buf[20];
    
    dspClear();
    dspLS(0|0x40,"  PLN");
    dspLS(1,"No ID Pelanggan:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(2, buf, lenPelangganId+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 4)
	    	break;
	    Beep();
    }
    
    MAPPUTSTR(traPelangganId,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int inputPembayaranCicilan()
{
    int ret, minBufLen =4, maxBufLen =16 ;
//    char key;
    char buf[20];
    char buf1[30];
    byte subType;
    
    MAPGETBYTE(traSubType,subType,lblKO);
    switch(subType)
    {
        case CICILAN_FIF:
            strcpy(buf1,"Pembayaran FIF");
            break;
        case CICILAN_BAF:
            strcpy(buf1,"Pembayaran BAF");
            break;
        case CICILAN_OTO:
            strcpy(buf1,"Pembayaran OTO");
            break;
        case CICILAN_FNS:
            strcpy(buf1,"Pemb Finansia");
            break;
        case CICILAN_VER:
            strcpy(buf1,"Pemb Verena");
            break;
        case CICILAN_WOM:
            strcpy(buf1,"Pembayaran WOM");
            break;            
    }
    
    
    dspClear();
    dspLS(0|0x40,buf1);
    dspLS(1,"No Kontrak:");
    memset(buf,0,sizeof(buf));
    while(strlen(buf) <minBufLen)
    {
	    ret = enterPhr(2, buf, maxBufLen+1);
	    if(ret == kbdANN)
	        goto lblBatal;
	    if(ret == kbdVAL && strlen(buf) < minBufLen)
	    	Beep();
    }
    if(ret < 0)
        goto lblKO;    
    MAPPUTSTR(traContractNumber,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int inputPembayaranPulsa()
{
    int ret;
//    char key;
    char buf[20];
    char buf1[30];
    byte subType;
    
    dspClear();
    
    memset(buf1,0,sizeof(buf1));
    MAPGETBYTE(traSubType,subType,lblKO);
    switch(subType/10)
    {
        case 1:
            strcpy(buf1,"Nomor SIMPATI:");
            break;
        case 2:
            strcpy(buf1,"Nomor MENTARI:");
            break;
        case 3:
            strcpy(buf1,"Nomor IM3:");
            break;
        case 4:
            strcpy(buf1,"Nomor XL:");
            break;  
		/*Changed By Ali*/
		case 5:
			strcpy(buf1, "Nomor Esia");
			dspLS(0|0x40,"  Kode Daerah");
    		dspLS(1,buf1);
			memset(buf,0,sizeof(buf));
		    while (1)
		    {
			    ret = enterPhr(2, buf, lenBillPeriod+1);
			    if(ret == kbdANN)
			        goto lblBatal;
			    if(ret < 0)
			        goto lblKO;
			    if(strlen(buf) >= 3)
			    	break;
			    Beep();
		    }
		    MAPPUTSTR(traBillPeriod1,buf,lblKO);
			break;
		case 6:
			strcpy(buf1, "Nomor SMART:");
			break;
		case 7:
			strcpy(buf1, "Nomor FREN:");
			break;
		case 8:
			strcpy(buf1, "Nomor THREE:");
			break;
		case 9:
			strcpy(buf1, "Nomor AXIS:");
			break;
		/*End Of Changed By Ali*/             
    }    
    
    dspLS(0|0x40,"  Isi Ulang");
    dspLS(1,buf1);
    memset(buf,0,sizeof(buf));
    while (1)
    {
	    ret = enterPhr(2, buf, lenNoTelpon +1);
	    if(ret == kbdANN)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) >= 8)
	    	break;
	    Beep();
    }
    MAPPUTSTR(traNoTelpon,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int inputSetoran(byte txnType)
{
    int ret;
//    char key;
    char buf[20];
    byte Exp;
    
    dspClear();
    if(txnType == trtSetorPinjamanInquiry)
        dspLS(0|0x40,"Setoran Pinjaman");
    else
        dspLS(0|0x40,"Setoran Simpanan");
            
    dspLS(1,"No. Rekening:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
        ret = enterPhr(2, buf, lenNomorRekeningBRI+1);
        if(ret == kbdANN || ret == 0)
            goto lblBatal;
        if(ret < 0)
            goto lblKO;
        if(strlen(buf) >= lenNomorRekeningBRI)
        	break;
        Beep();
    }
    MAPPUTSTR(traNomorRekeningAsalBRI,buf,lblKO);
    
    dspClear();
    if(txnType == trtSetorPinjamanInquiry)
        dspLS(0|0x40,"Setoran Pinjaman");
    else
        dspLS(0|0x40,"Setoran Simpanan");    
    dspLS(1,"Amount:");
    memset(buf,0,sizeof(buf));
    MAPGETBYTE(appExp, Exp, lblKO);
    while(1)
    {
	    ret = enterAmt(2,buf,Exp);
	    if(ret == kbdANN)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(buf[0] != '0' && buf[0] != 0)
	    	break;
	    Beep();
    }

    MAPPUTSTR(traAmt,buf,lblKO);   
//    ret = valAmount();
//    CHECK(ret > 0, lblKO);      // Check amount limit
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;      
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int inputTarikTunai()
{
    int ret;
//    char key;
    char buf[20];
    byte Exp;
    
    dspClear();

    dspLS(0|0x40," Tarik Tunai");
    dspLS(1,"Jumlah:      Rp.");
    dspLS(3,"BATAL     LANJUT");
    memset(buf,0,sizeof(buf));
    MAPGETBYTE(appExp, Exp, lblKO);
    while(1)
    {
	    ret = enterAmt(2,buf,Exp);
	    if(ret == kbdANN || ret == kbdF1)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(buf[0] != '0' && buf[0] != 0)
	    	break;
	    Beep();
    }

//{//hapus
//    char tmp[30];
//    
//    sprintf(tmp,"traAmt:%s",buf);
//    prtS(tmp);
//}
    MAPPUTSTR(traAmt,buf,lblKO); 
//    ret = valAmount();
//    CHECK(ret > 0, lblKO);      // Check amount limit
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;      
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int inputPembayaranZakat()
{
    int ret;
//    char key;
    char buf[20];
    byte Exp;
    byte subType;
    
    MAPGETBYTE(traSubType,subType,lblKO);
    
    dspClear();
    if(subType == ZAKAT_DHUAFA || subType == ZAKAT_YBM)
        dspLS(0|0x40," ZAKAT");
    else if(subType == INFAQ_DHUAFA || subType == INFAQ_YBM)
        dspLS(0|0x40," INFAQ");   
    else if(subType == DPLK_DHUAFA || subType == DPLK_YBM)
        dspLS(0|0x40," DPLK");                
            
    dspClear();
    dspLS(1,"Jumlah:      Rp.");
    memset(buf,0,sizeof(buf));
    MAPGETBYTE(appExp, Exp, lblKO);
    while(1)
    {
	    ret = enterAmt(2,buf,Exp);
	    if(ret == kbdANN)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(buf[0] != '0' && buf[0] != 0)
	    	break;
	    Beep();
    }

    MAPPUTSTR(traAmt,buf,lblKO);   
//    ret = valAmount();
//    CHECK(ret > 0, lblKO);      // Check amount limit
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;      
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int inputInstallment()
{
    int ret;
//    char key;
    char buf[20];
    byte Exp;
    byte len;
    char tmp[5];
    card term;
    
    dspClear();
    dspLS(0|0x40,"CICILAN BRING");
    memset(buf,0,sizeof(buf));
    while(1)
    {
        strcpy(buf,"Term (3-24):");
        len = strlen(buf);
        ret = enterPhr(3, buf, 3+len);
        if(ret == kbdANN || ret == 0)
            goto lblBatal;
        if(ret < 0)
            goto lblKO;
        
        strcpy(tmp,&buf[len]);
        dec2num(&term,tmp,2);
        if( 0 == term % 3 && term >=3 && term <= 24)
        	break;
        	
        memset(buf,0,sizeof(buf));
        Beep();
    }
    
    MAPPUTSTR(traInstallmentTerm,tmp,lblKO);
    
    dspClear();
    dspLS(0|0x40,"CICILAN BRING");
    memset(buf,0,sizeof(buf));
    while(1)
    {
        strcpy(buf,"Plan (1-3):");
        len = strlen(buf);
        ret = enterPhr(3, buf, 2+len);
        if(ret == kbdANN || ret == 0)
            goto lblBatal;
        if(ret < 0)
            goto lblKO;
        
        strcpy(tmp,&buf[len]);
        dec2num(&term,tmp,2);
        if(term < 1 || term > 3)
        {
        	memset(buf,0,sizeof(buf));
        	Beep();
            continue;
        }else 
            break;
    }    
    
    MAPPUTSTR(traInstallmentPlan,tmp,lblKO);
    
//    dspClear();
//    dspLS(0,"  INSTALLMENT");
//    dspLS(1,"Installment Plan:");
//    memset(buf,0,sizeof(buf));
//    ret = enterPhr(2, buf, sizeof(buf));
//    if(ret == kbdANN)
//        goto lblBatal;
//    if(ret < 0)
//        goto lblKO;    
//    MAPPUTSTR(traInstallmentPlan,buf,lblKO);
        
    dspClear();
    dspLS(0|0x40,"CICILAN BRING");
    dspLS(2,"Amount:      Rp.");

    memset(buf,0,sizeof(buf));
    MAPGETBYTE(appExp, Exp, lblKO);
    while(1)
    {
	    ret = enterAmt(3,buf,Exp);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(buf[0] != '0' && buf[0] != 0)
	    	break;
	    Beep();
    }
//prtS(buf);         
    MAPPUTSTR(traAmt,buf,lblKO);
//    ret = valAmount();
//    CHECK(ret > 0, lblKO);      // Check amount limit

    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;    
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int inputPembayaranPascaBayar()
{
    int ret;
//    char key;
    char buf[20];
//    byte Exp;
    word MnuItm;

    MAPGETWORD(traMnuItm, MnuItm, lblKO);
	dspClear();
	switch(MnuItm)
   	{
   		case mnuPembayaranHalo:
    		dspLS(0|0x40,"  HALO");
    		dspLS(1,"No Kartu HALO:");
    		break;
    	case mnuPembayaranMatrix:
    		dspLS(0|0x40,"  MATRIX");
    		dspLS(1,"No Matrix:");  
    	break;  		
   }

    memset(buf,0,sizeof(buf));
    while(1)
    {
    ret = enterPhr(2, buf, lenNoTelpon+1);
    if(ret == kbdANN)
        goto lblBatal;
    if(ret < 0)
        goto lblKO;
    if(strlen(buf) >= 8)
    	break;
    Beep();
    }
    MAPPUTSTR(traNoTelpon,buf,lblKO);
    ret = 1;
    goto lblEnd;
lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;             	
}

#ifdef PREPAID
int inputPrepaidDeposit()
{
    int ret;
    char buf[25];
//    word MnuItm;
    
    dspClear();
    
    dspLS(0|0x40,"TOPUP DEPOSIT");
    dspLS(1,"No Kartu Brizzi :");
    memset(buf,0,sizeof(buf));
    while(1)
    {
        ret = enterPhr(2, buf, NOMOR_KARTU_BRIZZI_LEN+1);
        if(ret == kbdANN || ret == 0)
            goto lblBatal;
        if(ret < 0)
            goto lblKO;
        if(strlen(buf) >= NOMOR_KARTU_BRIZZI_LEN)
    	    break;
        Beep();
    }
    MAPPUTSTR(TRA_NOMOR_KARTU_BRIZZI,buf,lblKO);
    if(ret < 0 )
    	goto lblKO;
    goto lblEnd;

lblBatal:
    ret = 0;
    goto lblEnd;       
lblKO:
    ret = -1;
lblEnd:
    return ret;           
}

#endif


int KonfirmasiTransferSesamaBRI()
{
    int ret;
    char namaPenerima[31];
    char rekeningTujuan[20];
    char jumlah[20];
    byte key;
    char amount[20];
//    card Amt;
//    char buf[25], str[25];    

    dspClear();
    
    memset(rekeningTujuan,0,sizeof(rekeningTujuan));
    mapGet(traNomorRekeningTujuanBRI,rekeningTujuan,sizeof(rekeningTujuan));

    memset(namaPenerima,0,sizeof(namaPenerima));
    mapGet(traNamaPenerima,namaPenerima,sizeof(namaPenerima));

	memset(amount,0,sizeof(amount));
	mapGet(traAmt,amount,sizeof(amount));
/* @@OA	dec2num(&Amt, amount, strlen(amount));
	memset(amount,0,sizeof(amount));
	Amt = Amt/100;
	num2dec(amount,Amt,0);
*/	memset(jumlah,0,sizeof(jumlah));
//			strcpy(buf,"Rp. ");
//			fmtAmt(buf+4, amount, 0, ".,");
	strcpy(jumlah,"Rp."); //@@OA
	fmtAmt(jumlah+3, amount, 0, ",.");
//			sprintf(str,"Saldo : %s",buf);
//			MAPPUTSTR(rptBuf1,str,lblKO);	          

//    
//    memset(jumlah,0,sizeof(jumlah));
//    mapGet(traAmt,jumlah,sizeof(jumlah));   
    
    dspLS(0,rekeningTujuan);
    dspLS(1,namaPenerima);
    dspLS(2,jumlah);
//@@OA     dspLS(3,"BATAL     LANJUT");
    dspLS(3,"CONFIRM YES / NO");
    
	kbdStart(1);
    while(1)
    {
    	key = kbdKey();
        switch(key)
        {
            //@@OA case kbdF1:
            case kbdANN: 
                goto lblBatal;
            //@@OA case kbdF4:
            case kbdVAL:
                ret = 1;
                goto lblEnd;
        }
    }

    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;   
/*
lblKO:
    ret = -1;
*/    
lblEnd:
	kbdStop();
    return ret;       
}


int KonfirmasiTransferAntarBank()
{
    int ret;
    char namaPenerima[31];
    char namaBankTujuan[20];
    char rekeningTujuan[20];
    char namaBankAsal[20];
    char refNumber[20];
    char jumlah[20];
    char msg[12][21];
    char amount[20];
    
    dspClear();
    
    memset(namaBankTujuan,0,sizeof(namaBankTujuan));
    mapGet(traNamaBankTujuan,namaBankTujuan,sizeof(namaBankTujuan));
    
    memset(namaBankAsal,0,sizeof(namaBankAsal));
    mapGet(traNamaBankAsal,namaBankAsal,sizeof(namaBankAsal));
        
    memset(refNumber,0,sizeof(refNumber));
    mapGet(traCustomerRefNumber,refNumber,sizeof(refNumber));
 
    memset(rekeningTujuan,0,sizeof(rekeningTujuan));
    mapGet(traNomorRekeningTujuan,rekeningTujuan,sizeof(rekeningTujuan));

    memset(namaPenerima,0,sizeof(namaPenerima));
    mapGet(traNamaPenerima,namaPenerima,sizeof(namaPenerima));
    if(strlen(namaPenerima) > 16)
        namaPenerima[16] = 0;
    
   	memset(amount,0,sizeof(amount));
	mapGet(traAmt,amount,sizeof(amount));
/*	dec2num(&Amt, amount, strlen(amount));
	memset(amount,0,sizeof(amount));
	Amt = Amt/100;
	num2dec(amount,Amt,0);
*/	memset(jumlah,0,sizeof(jumlah));
//			strcpy(buf,"Rp. ");
//			fmtAmt(buf+4, amount, 0, ".,");
	fmtAmt(jumlah, amount, 0, ",.");
//			sprintf(str,"Saldo : %s",buf);
//			MAPPUTSTR(rptBuf1,str,lblKO);	          
/*    
    memset(jumlah,0,sizeof(jumlah));
    mapGet(traAmt,jumlah,sizeof(jumlah));   
*/    
    
    memset(msg,0,sizeof(msg));
//    sprintf(str,"%16s",namaBankAsal);
    strcpy(msg[0],"Bank Asal :");
    memcpy(msg[1],namaBankAsal,20);
    strcpy(msg[2],"Bank Tujuan :");
    memcpy(msg[3],namaBankTujuan,20);
    strcpy(msg[4],"No. Rekening :");
    memcpy(msg[5],rekeningTujuan,20);
    strcpy(msg[6],"Nama Nasabah :");
    memcpy(msg[7],namaPenerima,20);
    strcpy(msg[8],"Cust. Ref :");
    memcpy(msg[9],refNumber,20);
    strcpy(msg[10],"Jumlah :");
    memcpy(msg[11],jumlah,20);
    

    ret = scrollDisplay(msg,12,2,"   ANTAR BANK","BATAL     LANJUT");    
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	
lblBatal:
    ret = 0;
    goto lblEnd;    
/*    
lblKO:
    ret = -1;
*/    
lblEnd:
    return ret;        
      
}

int KonfirmasiPembayaranPulsa()
{
    int ret;
//    char key;
//    char buf[20];
    char buf1[30];
    char nomor[20], kode_area[20];
    char jumlah[20], amount[20]; // @@OA
    byte key;
    int count = 0;
    
    byte subType;
    
    dspClear();
    
    MAPGETBYTE(traSubType,subType,lblKO);
    switch(subType/10)
    {
        case 1:
            strcpy(buf1,"Nomor SIMPATI:");
            break;
        case 2:
            strcpy(buf1,"Nomor MENTARI:");
            break;
        case 3:
            strcpy(buf1,"Nomor IM3:");
            break;
        case 4:
            strcpy(buf1,"Nomor XL:");
            break;  
		/*Changed By Ali*/
		case 5:
			strcpy(buf1, "Nomor ESIA");
			mapGet(traBillPeriod1, kode_area, sizeof(kode_area));
			count =1;
			break;
		case 6:
            strcpy(buf1, "Nomor SMART:");
            break;
		case 7:
			strcpy(buf1, "Nomor FREN:");
			break;
		case 8:
			strcpy(buf1, "Nomor THREE:");
			break;
		case 9:
			strcpy(buf1, "Nomor AXIS:");
			break;
		/*End Of Changed By Ali*/             
    }    
    
    memset(nomor,0,sizeof(nomor));
    mapGet(traNoTelpon,nomor,sizeof(nomor));
	memset(amount,0,sizeof(amount));
	mapGet(traAmt,amount,sizeof(amount));
/* @@OA	dec2num(&Amt, amount, strlen(amount));
	memset(amount,0,sizeof(amount));
	Amt = Amt/100;
	num2dec(amount,Amt,0);
*/	memset(jumlah,0,sizeof(jumlah));
	strcpy(jumlah,"Rp."); //@@OA
	fmtAmt(jumlah+3, amount, 0, ",.");
	
    dspLS(0,buf1);
    dspLS(1,nomor);
	if(count)
    	dspLS(1,strcat(kode_area, nomor));
    else
    	dspLS(1,nomor);
    dspLS(2,jumlah);
    dspLS(3,"CONFIRM YES / NO");
	
	kbdStart(1);
    while(1)
    {
    	key = kbdKey();
        switch(key)
        {
            //@@OA case kbdF1:
            case kbdANN: 
                goto lblBatal;
            //@@OA case kbdF4:
            case kbdVAL:
                ret = 1;
                goto lblEnd;
        }
    }

    return 1;
lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;   

lblKO:
    ret = -1;
        
lblEnd:
	kbdStop();
    return ret; 
    
}


//int KonfirmasiPembayaranCicilan()
//{
//    int ret;
////    char key;
//    char buf[30];
//    char str[50];
////    char amount[20];
////    card amt/*,adminAmt,totalAmt*/;
//    char msg[10][21];
//    
//    memset(msg,0,sizeof(msg));
//    
//    //No kontrak
//    strcpy(msg[0],"No Kontrak :");
//    
//    memset(buf,0,sizeof(buf));
//    mapGet(traContractNumber,buf,sizeof(buf));
//    sprintf(str,"%-16s",buf);
//    strcpy(msg[1],str);
//    
//    //Nama
//    strcpy(msg[2],"Nama :");
//    
//    memset(buf,0,sizeof(buf));
//    mapGet(traCustomerName,buf,sizeof(buf));
//    sprintf(str,"%-16s",buf);
//    strcpy(msg[3],str); 
//    
//    //Jatuh tempo
//    strcpy(msg[4],"Jatuh Tempo :");
//    
//    memset(buf,0,sizeof(buf));
//    memset(str,0,sizeof(str));
//    mapGet(traDueDate,buf,sizeof(buf));
//    memcpy(str,buf,2);
//    strcat(str,"-");
//    memcpy(str+3,buf+2,2);
//    strcat(str,"-");
//    strcat(str,buf+4);
//    sprintf(buf,"%-16s",str);
//    strcpy(msg[5],buf);
//    
//    //Angsuran
//    strcpy(msg[6],"Angsuran ke :");
//    
//    memset(buf,0,sizeof(buf));
//    mapGet(traPaymentNumber,buf,sizeof(buf));
//    strcat(msg[6],buf);
//    
//    strcpy(msg[7],""); 
//    
//    //Tagihan
//    strcpy(msg[8],"Tagihan :");
//    
//    memset(buf,0,sizeof(buf));
//    mapGet(traTotalAmount,buf,sizeof(buf));
//	buf[strlen(buf) - 2] = 0;    
//    mapPut(traAmt,buf,lenAmt); //simpan untuk payment
//    strcpy(str,"Rp. ");
//    fmtAmt(str+4,buf,0,".,");
//    strcpy(msg[9],str);
//     
//    ret = scrollDisplay(msg,10,2,"CICILAN","BATAL     LANJUT");
//   
//    if(ret == kbdVAL || ret == kbdF4)
//    {
//    	ret = 1;
//    	goto lblEnd;
//    }	
//    else
//    {
//    	goto lblBatal;
//    }	
////    return 1;
//lblBatal:
//    ret = 0;
//    usrInfo(infUserCancel);
//    goto lblEnd;   
///*    
//lblKO:
//    ret = -1;
//*/    
//lblEnd:
//    kbdStop();
//    return ret;       
//}
    
int KonfirmasiPembayaranCicilan8()
{
    int ret;
    char str[128];
    char buf[128];//,buf1[128];
    char judul[30];
//    char baris1[30];char baris2[30];
//    byte key;
    char msg[10][22];
    int i=0;

    strcpy(judul,"CICILAN");
    
    //No kontrak
    strcpy(msg[i++],"No Kontrak :");
    
    memset(msg,0,sizeof(msg));
    memset(buf,0,sizeof(buf));
    mapGet(traContractNumber,buf,sizeof(buf));
    sprintf(str,"%-16s",buf);
    strcpy(msg[i++],str);
    
    //Nama
    strcpy(msg[i++],"Nama :");
    
    memset(buf,0,sizeof(buf));
    mapGet(traCustomerName,buf,sizeof(buf));
    sprintf(str,"%-16s",buf);
    strcpy(msg[i++],str); 
    
    //Jatuh tempo
    strcpy(msg[i++],"Jatuh Tempo :");
    
    memset(buf,0,sizeof(buf));
    memset(str,0,sizeof(str));
    mapGet(traDueDate,buf,sizeof(buf));
    memcpy(str,buf,2);
    strcat(str,"-");
    memcpy(str+3,buf+2,2);
    strcat(str,"-");
    strcat(str,buf+4);
    sprintf(buf,"%-16s",str);
    strcpy(msg[i++],buf);
    
    //Angsuran
    strcpy(msg[i++],"Angsuran ke :");
    
    memset(buf,0,sizeof(buf));
    mapGet(traPaymentNumber,buf,sizeof(buf));
    strcat(msg[i++],buf);
    
    //Tagihan
    strcpy(msg[i++],"Tagihan :");
    
    memset(buf,0,sizeof(buf));
    mapGet(traTotalAmount,buf,sizeof(buf));
	buf[strlen(buf) - 2] = 0;    
    mapPut(traAmt,buf,lenAmt); //simpan untuk payment
    strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcpy(msg[i++],str);
     
    ret = scrollDisplay8(msg,i,6,judul,"BATAL      LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*    
lblKO:
    ret = -1;
*/    
lblEnd:
    kbdStop();
    return ret;         
}

int KonfirmasiInfoSaldo8()
{
    int ret;
    char str[128];
    char buf[128];//,buf1[128];
    char judul[30];
//    char baris1[30];char baris2[30];
//    byte key;
    char msg[10][22];
    int i=0;

    strcpy(judul,"INFORMASI SALDO");
    
    memset(msg,0,sizeof(msg));
    //Nama
    strcpy(msg[i++],"Nama :");
    
    memset(buf,0,sizeof(buf));
    mapGet(traNamaPengirim,buf,sizeof(buf));
    sprintf(str,"%-16s",buf);
    strcpy(msg[i++],str); 
    
    //Tagihan
    strcpy(msg[i++],"Saldo :");
    
    memset(buf,0,sizeof(buf));
    mapGet(traSisaSaldo,buf,sizeof(buf));
	buf[strlen(buf) - 2] = 0;    
    strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcpy(msg[i++],str);
     
    ret = scrollDisplay8(msg,i,6,judul,"PRINT?      YES/NO"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    //usrInfo(infUserCancel);
    goto lblEnd;
/*    
lblKO:
    ret = -1;
*/    
lblEnd:
    kbdStop();
    return ret;         
}

int KonfirmasiInfoSaldoLain8()
{
    int ret;
    char str[128];
    char buf[128];//,buf1[128];
    char judul[30];
//    char baris1[30];char baris2[30];
//    byte key;
    char msg[10][22];
    byte jenis;
    int i=0;

    strcpy(judul,"INFORMASI SALDO");
    
    memset(msg,0,sizeof(msg));
    //Nama
    strcpy(msg[i++],"Nama/Bank :");
    
    memset(buf,0,sizeof(buf));
    mapGet(traNamaBankAsal,buf,sizeof(buf));
    sprintf(str,"%-16s",buf);
    strcpy(msg[i++],str); 
    
    // Jenis Rekening
    strcpy(msg[i++],"Jenis Rek :");
    MAPGETBYTE(traJenisRekening,jenis,lblKO);
    if(jenis == REK_TABUNGAN)
        strcpy(msg[i++],"TABUNGAN");
    else
        strcpy(msg[i++],"GIRO");            
    
	//Tagihan
    strcpy(msg[i++],"Saldo :");
    
    memset(buf,0,sizeof(buf));
    mapGet(traSisaSaldo,buf,sizeof(buf));
	buf[strlen(buf) - 2] = 0;    
   strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcpy(msg[i++],str);
     
    ret = scrollDisplay8(msg,i,6,judul,"PRINT?      YES/NO"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    //usrInfo(infUserCancel);
    goto lblEnd;

lblKO:
    ret = -1;

lblEnd:
    kbdStop();
    return ret;         
}

int KonfirmasiSetoran(byte txnType)
{
    int ret;
//    char key;
    char buf[30];
//    char str[50];
    char amount[20];
//    card amt/*,adminAmt,totalAmt*/;
    char msg[10][22];
    char judul[25];
    int i = 0;
    memset(msg,0,sizeof(msg));
    
    dspClear();
    
    if(txnType == trtSetorPinjamanInquiry)
        strcpy(judul,"Setoran Pinjaman");
    else
        strcpy(judul,"Setoran Simpanan");        
    memset(msg,0,sizeof(msg));
    
    //Nama
    strcpy(msg[i++], "Nama:");
    memset(buf,0,sizeof(buf));
    mapGet(traNamaPenerima,buf,sizeof(buf));
    strcpy(msg[i++],buf);    
    
    strcpy(msg[i++], "No Rekening:");
    memset(buf,0,sizeof(buf));
    mapGet(traNomorRekeningAsalBRI,buf,sizeof(buf));
    strcpy(msg[i++],buf);  
    
    strcpy(msg[i++], "Jumlah Setor:");
    memset(amount,0,sizeof(amount));
    mapGet(traAmt,amount,sizeof(amount));
    memset(buf,0,sizeof(buf));
    strcpy(buf,"Rp. ");
    fmtAmt(buf+4, amount, 0, ",.");
    strcpy(msg[i++],buf);
     
    //ret = scrollDisplay(msg,3,2,judul,"BATAL     LANJUT");    
	ret = scrollDisplay8(msg,i,6,judul,"BATAL      LANJUT"); 
    
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	
        
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;  
/*    
lblKO:
    ret = -1;
*/    
lblEnd:
    return ret;        
    
}

int KonfirmasiTarikTunai()
{
    int ret;
    char key;
    char buf[30];
    char amount[20];
    card Amt;
    
    dspClear();

    dspLS(0|0x40,"  Tarik Tunai");
    dspLS(1,"Konfirmasi");
    
	memset(amount,0,sizeof(amount));
	mapGet(traAmt,amount,sizeof(amount));
	dec2num(&Amt, amount, strlen(amount));
	memset(amount,0,sizeof(amount));
	Amt = Amt/100;
	num2dec(amount,Amt,0);
	memset(buf,0,sizeof(buf));
	strcpy(buf,"Rp. ");
	fmtAmt(buf+4, amount, 0, ",.");
       
    dspLS(2,buf);
    dspLS(3,"BATAL   LANJUT");

    while(1)
    {
    	key = kbdKey();
        switch(key)
        {
            case kbdF1:
            case kbdANN: 
                goto lblBatal;
            case kbdF4:
            case kbdVAL:
                ret = 1;
                goto lblEnd;
                   
        }
    }
        
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;     
    /*    
    lblKO:
        ret = -1;
    */    
lblEnd:
    return ret;        
    
}

int KonfirmasiVoidTarikTunai()
{
    int ret;
    char buf[50];
    char amount[20];
    char msg[4][22];
    char judul[25];
//    card tmp;
    
    memset(msg,0,sizeof(msg));
    
    dspClear();
    
    strcpy(judul,"Void Tarik Tunai");
        
    //No Acc.
    memset(buf,0,sizeof(buf));
    mapGet(traPan,buf,sizeof(buf));
    strcpy(msg[1],buf);    
    
    //Nama
    memset(buf,0,sizeof(buf));
    mapGet(traTrk1,buf,sizeof(buf));
    memcpy(msg[2],buf,20);  
    
    //Trace number
    memset(buf,0,sizeof(buf));
    memset(amount,0,sizeof(buf));    
    strcpy(buf,"Trc : ");
    mapGet(traFindRoc,amount,sizeof(amount));
    fmtPad(amount,-6,'0');
    sprintf(buf,"Trc: %s",amount);
    strcpy(msg[3],buf);     
    
    //Amount
    memset(amount,0,sizeof(amount));
    mapGet(traAmt,amount,sizeof(amount));
//    dec2num(&tmp, amount, strlen(amount));
//    memset(amount,0,sizeof(amount));
//    tmp = tmp/100;
//    num2dec(amount,tmp,0);
    memset(buf,0,sizeof(buf));
    strcpy(buf,"Rp. ");
    fmtAmt(buf+4, amount, 0, ",.");
    strcpy(msg[4],buf);
     
    ret = scrollDisplay8(msg,5,6,judul,"BATAL     LANJUT");    
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    
lblBatal:
    ret = 0;
    goto lblEnd;     
    /*    
    lblKO:
        ret = -1;
    */    
lblEnd:
    return ret;        
    
}

int KonfirmasiPembayaranZakat()
{
    int ret;
    char key;
    char buf[30];
    char amount[20];
    char jenis[10];
    char pengelola[20];
    byte subType = 0;
//    card tmp;
    
    MAPGETBYTE(traSubType,subType,lblKO);
    
    dspClear();
    switch(subType)
    {
        case ZAKAT_DHUAFA:
            strcpy(jenis,"ZAKAT");
            strcpy(pengelola,"Dompet Dhuafa");
            break;
        case ZAKAT_YBM:
            strcpy(jenis,"ZAKAT");
            strcpy(pengelola,"YBM");
            break;      
        case INFAQ_DHUAFA:
            strcpy(jenis,"INFAQ");
            strcpy(pengelola,"Dompet Dhuafa");
            break;
        case INFAQ_YBM:
            strcpy(jenis,"INFAQ");
            strcpy(pengelola,"YBM");
            break;
        case DPLK_DHUAFA:
            strcpy(jenis,"DPLK");
            strcpy(pengelola,"Dompet Dhuafa");
            break;
        case DPLK_YBM:
            strcpy(jenis,"DPLK");
            strcpy(pengelola,"YBM");
            break;                                    
    }


    dspLS(0,jenis);
    dspLS(1,pengelola);
    memset(amount,0,sizeof(amount));
    mapGet(traAmt,amount,sizeof(amount));
/* @@OA   dec2num(&tmp, amount, strlen(amount));
    memset(amount,0,sizeof(amount));
    tmp = tmp/100;
    num2dec(amount,tmp,0);
*/    memset(buf,0,sizeof(buf));
    strcpy(buf,"Rp. ");
    fmtAmt(buf+4, amount, 0, ",.");
       
    dspLS(2,buf);
    dspLS(3,"DATA BENAR?");

    kbdStart(1);
    while(1)
    {
    	key = kbdKey();
        switch(key)
        {
            case kbdF1:
            case kbdANN: 
                goto lblBatal;
            case kbdF4:
            case kbdVAL:
                ret = 1;
                goto lblEnd;   
        }
    }
        
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;     
lblKO:
    ret = -1;
lblEnd:
    kbdStop();
    return ret;   
}

/*Changed By Ali*/
int KonfirmasiPembayaranTV()
{
	//char amount[20],adminAmount[20],totalAmount[20];
    
    int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
    int i=0;
    
    memset(msg,0,sizeof(msg));
    strcpy(judul,"TV BERLANGGANAN");
    
    //NAMA
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NAMA:"); 
    mapGet(traNamaPengirim,buf,lenNamaPemilik);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 

	//PERIODE
	memset(buf,0,sizeof(buf));
	strcpy(msg[i++],"PERIODE:");
	mapGet(traLWBP,buf,lenLWBP);
    sprintf(str,"%18s",buf);
    strcpy(msg[i++],str);
    strcpy(msg[i++],"");


	//AMOUNT
	strcpy(msg[i++],"TAGIHAN :");
    memset(buf,0,sizeof(buf));
    mapGet(traTotalAmount,buf,lenInquiryAmt);
	//buf[strlen(buf) - 2] = 0;    
    //mapPut(traAmt,buf,lenAmt);
    strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcat(msg[i++],str);

	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
 
lblEnd:
    kbdStop();
    return ret;     
}

int KonfirmasiPembayaranTelkom()
{
    int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
    int i=0;
    
    memset(msg,0,sizeof(msg));
    strcpy(judul,"PEMB. TELKOM");
    
    //NO TELP
    memset(buf,0,sizeof(buf));
	MAPGET(traNamaPenerima, buf, lblKO);
    sprintf(str,"NO      : %s",buf);
	strcpy(msg[i++],str); 

	//NAMA
	memset(buf,0,sizeof(buf));
	mapGet(traNamaPengirim,buf,lenNamaPemilik);
    sprintf(str,"NAMA    : %s",buf);
    strcpy(msg[i++],str);

	//TAGIHAN
	strcpy(msg[i++],"");
    memset(buf,0,sizeof(buf));
    mapGet(traTotalAmount,buf,lenInquiryAmt);
    strcpy(str,"TAGIHAN : Rp. ");
    fmtAmt(str+14,buf,0,",.");
    strcat(msg[i++],str);

	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;

lblKO:
    return -1;  
	
lblEnd:
    kbdStop();
    return ret;     
}


/*Changed By Ali*/
int KonfirmasiPembayaranKKBRI()
{
	int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
    int i=0;
    
    memset(msg,0,sizeof(msg));
    strcpy(judul,"PEMB. KK BRI");

	//NO KK
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NO KK :"); 
    mapGet(traMeter,buf,lenMeter);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 
	strcpy(msg[i++],"");

	//NAMA
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NAMA :"); 
    mapGet(traNamaPengirim,buf,lenNamaPemilik);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 
	strcpy(msg[i++],"");

	//TAGIHAN
	strcpy(msg[i++],"TAGIHAN :");
    memset(buf,0,sizeof(buf));
    mapGet(traPelangganId,buf,lenPelangganId);
    strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcat(msg[i++],str);
	strcpy(msg[i++],"");

	//MINIMUM PAYMENT
	strcpy(msg[i++],"PEMB. MINIMAL :");
    memset(buf,0,sizeof(buf));
    mapGet(traTotalAmount,buf,lenInquiryAmt);
    strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcat(msg[i++],str);
	strcpy(msg[i++],"");
	
	//PAY DUE DATE
    memset(buf,0,sizeof(buf));
	strcpy(msg[i++],"PAY DUE DATE      :"); 
	mapGet(traDueDate,buf,lenDueDate);
	trimRight(buf,0x20);  
	sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 
	strcpy(msg[i++],"");

	//AVAILABLE CREDIT
	strcpy(msg[i++],"SISA KREDIT :");
    memset(buf,0,sizeof(buf));
    mapGet(traBunga,buf,lenBunga);
    strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcat(msg[i++],str);
	strcpy(msg[i++],"");

	//AVAILABLE CASH
	strcpy(msg[i++],"SISA TUNAI :");
    memset(buf,0,sizeof(buf));
    mapGet(traNominalVoucher,buf,lenBunga);
    strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcat(msg[i++],str);
	

	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;

    /*
lblKO:
    return -1;  
*/
lblEnd:
    kbdStop();
    return ret;   
}

int KonfirmasiPembayaranKKBRIBayar()
{
	int ret;
    char buf[20];
	
	if(KonfirmasiPembayaranKKBRI())
	{
	    dspClear();
	    dspLS(0|0x40,"  PEMB. KK BRI");
	    dspLS(1,"Input Bayar:");
	    memset(buf,0,sizeof(buf));
	    while(1)
	    {
		    ret = enterPhr(2, buf, lenNoVoucherMitra+1);
		    if(ret == kbdANN || ret == 0)
		        goto lblBatal;
		    if(ret < 0)
		        goto lblKO;
		    if(strlen(buf) >= 3)
		    	break;
		    Beep();
	    }
	    
	    MAPPUTSTR(traAmt,buf,lblKO);
	    
	    return 1;
		lblBatal:
		    ret = 0;
		    goto lblEnd;       
		lblKO:
		    ret = -1;
		lblEnd:
		    return ret; 
	}
	else
		return 0;
}

int KonfirmasiPembayaranKKANZ()
{
	int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
	int i=0;

	memset(msg,0,sizeof(msg));
    strcpy(judul,"PEMB. KK/KTA ANZ");
	
	//NO KK
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NO KK :"); 
    mapGet(traMeter,buf,lenMeter);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 
	strcpy(msg[i++],"");

	//JUMLAH
   strcpy(msg[i++],"JUMLAH :");
	memset(buf,0,sizeof(buf));
	mapGet(traAmt,buf,lenAmt);
	strcpy(str,"Rp. ");
	fmtAmt(str+4,buf,0,",.");
	strcat(msg[i++],str);
	strcpy(msg[i++],"");
	
	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*
lblKO:
    return -1;  
*/
lblEnd:
    kbdStop();
    return ret; 
}

int KonfirmasiPembayaranKKCITI()
{
	int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
	int i=0;

	memset(msg,0,sizeof(msg));
    strcpy(judul,"PEMB. KK/KTA CITI");
	
	//NO KK
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NO KK :"); 
    mapGet(traMeter,buf,lenMeter);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 
	strcpy(msg[i++],"");

	//JUMLAH
	strcpy(msg[i++],"JUMLAH :");
	memset(buf,0,sizeof(buf));
	mapGet(traAmt,buf,lenAmt);
	strcpy(str,"Rp. ");
	fmtAmt(str+4,buf,0,",.");
	strcat(msg[i++],str);
	strcpy(msg[i++],"");
	
	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;

    /*
lblKO:
    return -1;  
	*/
lblEnd:
    kbdStop();
    return ret; 
}

int KonfirmasiPembayaranKKHSBC()
{
	int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
	int i=0;

	memset(msg,0,sizeof(msg));
    strcpy(judul,"PEMB. KK/KTA HSBC");
	
	//NO KK
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NO KK :"); 
    mapGet(traMeter,buf,lenMeter);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 
	strcpy(msg[i++],"");

	//JUMLAH
	strcpy(msg[i++],"JUMLAH :");
	memset(buf,0,sizeof(buf));
	mapGet(traAmt,buf,lenAmt);
	strcpy(str,"Rp. ");
	fmtAmt(str+4,buf,0,",.");
	strcat(msg[i++],str);
	strcpy(msg[i++],"");
	
	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*
lblKO:
    return -1;  
	*/
lblEnd:
    kbdStop();
    return ret; 
}

int KonfirmasiPembayaranKKRBS()
{
	int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
	int i=0;

	memset(msg,0,sizeof(msg));
    strcpy(judul,"PEMB. KK/KTA RBS");
	
	//NO KK
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NO KK :"); 
    mapGet(traMeter,buf,lenMeter);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 
	strcpy(msg[i++],"");

	//NAMA
    strcpy(msg[i++],"JUMLAH :");
	memset(buf,0,sizeof(buf));
	mapGet(traAmt,buf,lenAmt);
	strcpy(str,"Rp. ");
	fmtAmt(str+4,buf,0,",.");
	strcat(msg[i++],str);
	strcpy(msg[i++],"");
	
	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*
lblKO:
    return -1;  
*/
lblEnd:
    kbdStop();
    return ret; 
}

int KonfirmasiPembayaranKKStanChar()
{
	int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
	int i=0;

	memset(msg,0,sizeof(msg));
    strcpy(judul,"PEMB. KK/KTA SCB");
	
	//NO KK
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NO KK :"); 
    mapGet(traMeter,buf,lenMeter);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
	strcpy(msg[i++],str); 
	strcpy(msg[i++],"");

	//NAMA
    strcpy(msg[i++],"JUMLAH :");
	memset(buf,0,sizeof(buf));
	mapGet(traAmt,buf,lenAmt);
	strcpy(str,"Rp. ");
	fmtAmt(str+4,buf,0,",.");
	strcat(msg[i++],str);
	strcpy(msg[i++],"");
	
	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*
lblKO:
    return -1;  
*/
lblEnd:
    kbdStop();
    return ret; 
}

int KonfirmasiTrxTransfer()
{
	int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
    int i=0;
    
    memset(msg,0,sizeof(msg));
    strcpy(judul,"REG. TRX TRANSFER");

	//NAMA
	memset(buf,0,sizeof(buf));
	mapGet(traNamaPengirim,buf,lenNamaPemilik);
    sprintf(str,"NAMA    : %s",buf);
    strcpy(msg[i++],str);

	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*
lblKO:
    return -1;  
*/
lblEnd:
    kbdStop();
    return ret;     
}

int KonfirmasiTrxPulsa()
{
	int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
    int i=0;
    
    memset(msg,0,sizeof(msg));
    strcpy(judul,"REG. TRX PULSA");

	//NAMA
	memset(buf,0,sizeof(buf));
	mapGet(traNoTelpon,buf,lenNoTelpon);
    sprintf(str,"NO HP    : %s",buf);
    strcpy(msg[i++],str);

	ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*
lblKO:
    return -1;  
*/
lblEnd:
    kbdStop();
    return ret;     
}
/*End of Changed By Ali*/

#ifdef ABSENSI
/*Changed By Ali*/
int KonfirmasiAbsensi()
{
		int ret;
		char str[128];
		char buf[128];
		char judul[30];
		char msg[20][22];
		int i=0;
		int cek=0;
		
		memset(msg,0,sizeof(msg));
		strcpy(judul,"ABSENSI");
		strcpy(msg[i++],"");
		
		
		//fitur
		memset(buf,0,sizeof(buf));
		mapGet(traJenisRekening, buf, 1);
		trimRight(buf,0x20);  
		sprintf(str,"%1s",buf);
		if(strcmp(str, "A") == 0)
			sprintf(str, "ABSEN  : DATANG");
		else if(strcmp(str, "B") == 0)
			sprintf(str, "ABSEN  : PULANG");
		else if(strcmp(str, "C") == 0)
			sprintf(str, "ABSEN  : ISTIRAHAT MULAI");
		else if(strcmp(str, "D") == 0)
			sprintf(str, "ABSEN  : ISTIRAHAT SELESAI");
		else if(strcmp(str, "E") == 0)
			sprintf(str, "ABSEN  : LEMBUR DATANG");
		else if(strcmp(str, "F") == 0)
			sprintf(str, "ABSEN  : LEMBUR PULANG");
		else if(strcmp(str, "G") == 0)
			sprintf(str, "ABSEN  : SHIFT I DATANG");
		else if(strcmp(str, "H") == 0)
			sprintf(str, "ABSEN  : SHIFT I PULANG");
		else if(strcmp(str, "I") == 0)
			sprintf(str, "ABSEN  : SHIFT II DATANG");
		else if(strcmp(str, "J") == 0)
			sprintf(str, "ABSEN  : SHIFT II PULANG");
		else if(strcmp(str, "K") == 0)
			sprintf(str, "ABSEN  : SHIFT III DATANG");
		else if(strcmp(str, "L") == 0)
			sprintf(str, "ABSEN  : SHIFT III PULANG");
		strcpy(msg[i++],str); 

		//informasi
		memset(buf,0,sizeof(buf));
		mapGet(traStatusKartu,buf,lenStatusKartu);
		sprintf(str,"%2s",buf);
		if(strcmp(str,"00") == 0)
			strcpy(str,"STATUS : OK");
		else if(strcmp(str,"TL") == 0){
			strcpy(str,"STATUS : TERLAMBAT");
			cek = 1;
		}
		else if(strcmp(str,"CP") == 0)
			strcpy(str,"STATUS : PULANG CEPAT");
		
		strcpy(msg[i++],str);


		//jam
		memset(buf,0,sizeof(buf));
		mapGet(traTanggalLahir,buf,lenTanggalLahir);
		sprintf(str,"JAM    : %8s",buf);
		strcpy(msg[i++],str);

		if(cek){
			//terlambat
			memset(buf,0,sizeof(buf));
			mapGet(traFee, buf, lenTanggalLahir);
			sprintf(str,"TRLMBT : %8s",buf);
			strcpy(msg[i++],str);
		}
		
		ret = scrollDisplay8(msg,i,12,judul,"OK");  
		if(ret == kbdVAL || ret == kbdF4)
		{
			ret = 0;
			goto lblEnd;
		}	
	 
	lblEnd:
		kbdStop();
		return ret; 	

}
/*End of Changed By Ali*/

#endif

int KonfirmasiPembayaranPLN()
{
/*
untuk PLN sesudah payment:
tagihan (traInquiryAmt) = field 4 110 
total bayar (traTotalAmount) = field 4 210 
admin bank (traAdminCharge) = field 4 210 - field 4 110 

untuk PLN sampai inquiry:
tagihan (traInquiryAmt) = field 4 110 
admin bank (traAdminCharge) = field 48 110
total bayar (traTotalAmount) = field 4 110 + field 48 110 
*/    
    char amount[20],adminAmount[20],totalAmount[20];
    
    int ret;
    char str[128];
    char buf[128];
    char judul[30];
    char msg[20][22];
    int i=0,idx=0,temp;
    char baris1[22], baris2[22];
    char *ptr1;//,*ptr2;
    card  blnTagihan ;//blnSemuaTagihan, blnTunggakan;
    
    memset(msg,0,sizeof(msg));
    strcpy(judul,"PEMBAYARN PLN");
    
    //PELANGGAN ID
    memset(buf,0,sizeof(buf));
    mapGet(traPelangganId,buf,lenPelangganId);
    memset(msg,0,sizeof(msg));
    memset(str,0,sizeof(str));
    sprintf(str,"IPEL:%16s",buf);
    strcpy(msg[i++],str);
    
    strcpy(msg[i++],"");
    
    //NAMA
    memset(buf,0,sizeof(buf));
    strcpy(msg[i++],"NAMA:"); 
    mapGet(traNamaPelangganPLN,buf,lenNamaPelangganPLN);
    trimRight(buf,0x20);  
    sprintf(str,"%21s",buf);
    strcpy(msg[i++],str); 

    strcpy(msg[i++],"");
    strcpy(msg[i++],"");
    
    // JUMALH BULAN TUNGGAKAN
//    memset(buf,0,sizeof(buf));
//    mapGet(traTotalOutstanding,buf,lenTotalOutstanding);
//    dec2num(&blnSemuaTagihan,buf,2);
     
    memset(buf,0,sizeof(buf));
    mapGet(traBillStatus,buf,lenBillStatus);
    dec2num(&blnTagihan,buf,1);     

    strcpy(msg[i++],"TOTAL TUNGGAKAN:");
    sprintf(buf,"%02i BULAN",(int)blnTagihan);
    sprintf(str,"%21s",buf);
    strcpy(msg[i++],str);
    strcpy(msg[i++],"");
//    i=6;
//    blnTunggakan = blnSemuaTagihan - blnTagihan;
//    memset(buf,0,sizeof(buf));
//    strcpy(msg[i++],"TOTAL TUNGGAKAN:");
//    sprintf(buf,"%02i BULAN",(int)blnTunggakan);
//    sprintf(str,"%21s",buf);
//    strcpy(msg[i++],str);
//    
//    strcpy(msg[i++],"");
    
    //BULAN TAGIHAN
    memset(buf,0,sizeof(buf));
    memset(baris1,0,sizeof(baris1));
    memset(baris2,0,sizeof(baris2));
    
    if(blnTagihan > MAX_TAGIHAN_PLN)
        blnTagihan = MAX_TAGIHAN_PLN;
    
    ptr1 = buf;
//    strcpy(buf,"BL/TH:");
//    strcpy(msg[i++],"BL/TH:");
    ptr1+=strlen(buf);

    for(idx=0;idx<blnTagihan;idx++)
    {
        if(idx==1 || idx == 3)
        {
            *ptr1++=',';
        }
            
        memset(baris1,0,sizeof(baris1));
        if(idx==0)
            mapGet(traBillPeriod1,baris1,lenBillPeriod);
        if(idx==1)
            mapGet(traBillPeriod2,baris1,lenBillPeriod);
        if(idx==2)
            mapGet(traBillPeriod3,baris1,lenBillPeriod);
        if(idx==3)
            mapGet(traBillPeriod4,baris1,lenBillPeriod);		            		            
        memset(baris2,0,sizeof(baris2));
        temp = (baris1[0]-0x30)*10 + (baris1[1]-0x30);
        sprintf(ptr1,"%s%c%c",convertBulan(0,baris2,temp),baris1[2],baris1[3]);
        ptr1+=5;
        if(idx == 1)
        {
            sprintf(str,"BL/TH:%15s",buf);
            strcpy(msg[i++],str);
            ptr1 = buf;
        }
    }
    if(blnTagihan <= 1)
    {
        sprintf(str,"BL/TH:%15s",buf);
        strcpy(msg[i++],str);
        ptr1 = buf;
    }        
        
    if(blnTagihan > 2)
    {
        sprintf(str,"%21s",buf);
        strcpy(msg[i++],str);
    }

    i=12;
    // TAGIHAN
    strcpy(msg[i++],"TAGIHAN:");
    memset(amount,0,sizeof(amount));
    mapGet(traInquiryAmt,amount,sizeof(amount));

    //amount yang akan dikirim pada field 4 saat payment
    mapPut(traAmt,amount,lenAmt);
    
    memset(buf,0,sizeof(buf));
    strcpy(buf,"Rp. ");
    fmtAmt(buf+4, amount, 0, ",.");
    sprintf(str,"%21s",buf);
    strcpy(msg[i++],str);
        
    //ADMIN
    strcpy(msg[i++],"ADMIN BANK:");
    memset(adminAmount,0,sizeof(adminAmount));
    mapGet(traAdminCharge,adminAmount,lenAdminCharge);
    memset(buf,0,sizeof(buf));
    strcpy(buf,"Rp. ");
    fmtAmt(buf+4, adminAmount, 0, ",.");
    sprintf(str,"%21s",buf);
    strcpy(msg[i++],str);
//    strcat(msg[i++],buf);
//    strcat(msg[i++],buf);

    //TOTAL
//	MAPGET(traAmt, amtS, lblKO);
//	MAPGET(traTipAmt, amtTip, lblKO);
//
//	ret = sizeof(amtTot);
//	VERIFY(ret >= 16 + 1);      //the length should be >= 16+1, see syntax of addStr
//	memset(amtTot, 0, sizeof(amtTot));
    memset(totalAmount,0,sizeof(totalAmount));
//	addStr(totalAmount, amount, adminAmount); 
	mapGet(traTotalAmount,totalAmount,lenTotalAmount);    //tanpa 2 angka dibelakang koma   
    
    //amount yang akan dikirim pada field 4 saat payment
//    mapPut(traAmt,totalAmount,lenAmt);    
    
    strcpy(msg[i++],"TOTAL BAYAR:");
//    totalAmt=amt+adminAmt;
//    memset(amount,0,sizeof(amount));
//    num2dec(amount,totalAmt,0);
    memset(buf,0,sizeof(buf));
//    fmtAmt(buf, amount, 0, ".,");
    strcpy(buf,"Rp. ");
    fmtAmt(buf+4,totalAmount,0,",.");
    sprintf(str,"%21s",buf);
    strcpy(msg[i++],str);
//    strcat(msg[i++],buf);
     
    ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*    
lblKO:
    ret = -1;
*/    
lblEnd:
    kbdStop();
    return ret;         
}

int inputInternetBankingPin()
{
    char pwd1[10], pwd2[10];
    int ret;

    while(1)
    {
        dspClear();
        dspLS(0|0x40,"REG INTERNET");
        dspLS(1|0x40,"BANKING");
        dspLS(3,"");
        memset(pwd1,0,sizeof(pwd1));
        dspLS(2,"Enter PIN :");
        while(1)
	    {
		    ret = enterPwd(3,pwd1,7);
		    if(ret == 0 || ret == kbdANN)
		        goto lblBatal;
		    if(ret < 0)
		        goto lblKO;
		    if(strlen(pwd1) == 6)
		    	break;
		    Beep();
	    }        
        
        memset(pwd2,0,sizeof(pwd2));
        dspLS(2,"Re-Enter PIN:");
        while(1)
	    {
		    ret = enterPwd(3,pwd2,7);
		    if(ret == 0 || ret == kbdANN)
		        goto lblBatal;
		    if(ret < 0)
		        goto lblKO;
		    if(strlen(pwd2) == 6)
		    	break;
		    Beep();
	    }        
        
        if(strcmp(pwd1,pwd2) !=0)
        {
            usrInfo(infPINNotMatch);
            continue;
        }
        else
            break;    
    }
    MAPPUTSTR(traPINInternetBanking,pwd1,lblKO);
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;
lblKO:
    ret = -1;
lblEnd:
    return ret;           
}


int inputGantiPasswordSPV()
{
    char pwd1[10], pwd2[10];
    int ret;

    dspClear();
    dspLS(0|0x40,"UBAH PASS SPV");        
    dspLS(3,"");
    memset(pwd1,0,sizeof(pwd1));
    dspLS(2,"Old Password :");
    while(1)
    {
	    ret = enterPwd(3,pwd1,7);
	    if(ret == 0 ||ret == kbdANN)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(pwd1) == 6)
	    	break;
	    Beep();
    }        
    MAPPUTSTR(traPasswordPetugas,pwd1,lblKO);
    while(1)
    {
        dspClear();
        dspLS(0|0x40,"UBAH PASS SPV");        
        dspLS(3,"");
        memset(pwd1,0,sizeof(pwd1));
        dspLS(2,"New Password :");
        ret = enterPwd(3,pwd1,7);
        if(ret == kbdANN)
            goto lblBatal;
        if(ret == 0)
            goto lblBatal;
        if(ret < 0)
            goto lblKO;
        if(strlen(pwd1) != 6)
        {
            usrInfo(infPassword6Digit);
            continue;
        }
        
        memset(pwd2,0,sizeof(pwd2));
        dspLS(2,"Re-Enter Password:");
        ret = enterPwd(3,pwd2,7);   
        if(ret == kbdANN)
            goto lblBatal;
        if(ret == 0)
            goto lblBatal;
        if(ret < 0)
            goto lblKO;
            
        if(strcmp(pwd1,pwd2) !=0)
        {
            usrInfo(infPasswordNotMatch);
            continue;
        }
        else
            break;    
    }
    MAPPUTSTR(traPINInternetBanking,pwd1,lblKO);
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;
lblKO:
    ret = -1;
lblEnd:
    return ret;          
}

//int inputAktivasiKartu()
//{
//#if 0
//    char pwd1[10], pwd2[10];
//    int ret;
//    char EntMod;   
//    
//    dspClear();
//    dspLS(0,"AKTIVASI KARTU");        
//    dspLS(3,"");
//
//	ret = pmtCardInput();   //Card is not swiped yet; organize the dialog
//	CHECK(ret > 0, lblStop);
//	EntMod = (char) ret;    // 'm'= card swiped, 'c'= card inserted, 'k'= card manually entered
//	MAPPUTBYTE(traEntMod, (byte) EntMod, lblDBA);
//    switch(EntMod)
//    {
//        case 'm':
//		case 'M':
//		    ret = magStripeInput();
//		    break;
//		    
//		case 'c':
//		case 'C':  
//		    break;		
//    }
//    CHECK(ret >= 0, lblStop);
//
//	ret = 1;
//	goto lblEnd;
//
//lblInvalidTrk:
////	inf = infInvalidTrack;
//	goto lblEnd;
//
//lblDBA:
//	if(!ret)
//		goto lblEnd;
////	inf = infDataAccessError;
//	goto lblEnd;
//
//  lblDeclined:
//    inf = inf;
//    goto lblEnd;
//  lblStop:
//    if(!ret)
//        goto lblEnd;
//    inf = infProcessingError;
//    ret = 0;
//    goto lblEnd;
//  lblEnd:
//    if(inf)
//        usrInfo(inf);
//    if(EntMod == 'c' || EntMod == 'C') {
//        dspClear();
//        usrInfo(infRemoveCard);
//        removeCard();
//    }
//	lblFinish:
//    trcS("pmtPayment End\n");
//#endif    
//}
//
//int inputRenewalKartu()
//{
//    char pwd1[10], pwd2[10];
//    int ret;
//
//    dspClear();
//    dspLS(0,"RENEWAL KARTU");        
//    dspLS(3,"");
//
//    return 1;
//lblBatal:
//    ret = 0;
//    goto lblEnd;
//lblKO:
//    ret = -1;
//lblEnd:
//    return ret;     
//}


int inputReissuePIN()
{
    int ret;
    char buf[20];
//    byte Exp;
    
    dspClear();
    dspLS(0|0x40,"  REISSUE PIN");
    dspLS(2,"Nomor Rekening");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPhr(3, buf, lenNomorRekeningBRI+1);
	    if(ret == kbdANN || ret == 0)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
	    if(strlen(buf) == lenNomorRekeningBRI)
	    	break;
	    Beep();
    }
    MAPPUTSTR(traNomorRekeningAsalBRI,buf,lblKO);
    
    ret = pmtNewPinInput();    // New Pin entry
    CHECK(ret > 0, lblKO);		    
    

    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;    
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}


int KonfirmasiAktivasiKartu()
{
    int ret;
    char str[128];
    char buf[128];//,buf1[128];
    char judul[30];
    char baris1[30];char baris2[30];
//    byte key;
    char msg[10][22];
    int i=0;
    byte txnType; 
     
    MAPGETBYTE(traTxnType, txnType, lblBatal);
    memset(msg,0,sizeof(msg));
    
    if(txnType == trtAktivasiKartuInquiry)
        strcpy(judul,"AKTIVASI KARTU");
    else
        strcpy(judul,"RENEWAL KARTU");
    
    //nomor kartu
    memset(buf,0,sizeof(buf));
    mapGet(traPan,buf,sizeof(buf));
    trimRight(buf,0x20);
    strcpy(msg[i++],"Nomor Kartu:");
    strcpy(msg[i++],buf);
    
    //nomor rekening     
    memset(buf,0,sizeof(buf));         
    mapGet(traNomorRekeningAsalBRI,buf,sizeof(buf));
    trimRight(buf,0x20);
    strcpy(msg[i++],"Nomor Rekening:");
    strcpy(msg[i++],buf);
    
    //Nama nasabah
    memset(buf,0,sizeof(buf));
    mapGet(traNamaPenerima,buf,30);
    trimRight(buf,0x20);     
    ret = displayLongText(buf, strlen(buf), baris1, baris2, 20);
    strcpy(msg[i++],"Nama:");
    strcpy(msg[i++],baris1);
    if(ret == 2)
    {
        trimLeft(baris2,0x20);
        strcpy(msg[i++],baris2);
    }

    //Tanggal lahir
    strcpy(msg[i++],"Tanggal Lahir:");
    memset(buf,0,sizeof(buf));
    mapGet(traTanggalLahir,buf,lenTanggalLahir);
    sprintf(str,"%c%c-%c%c-%c%c%c%c",buf[0],buf[1],buf[2],buf[3],buf[4],buf[5],
                                     buf[6],buf[7]);
    
    strcpy(msg[i++],str);

    ret = scrollDisplay8(msg,i,6,judul,"BATAL      LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    goto lblEnd;
/*    
lblKO:
    ret = -1;
*/    
lblEnd:
    kbdStop();
    return ret;         
}

/*
int KonfirmasiRenewalKartu()
{
    int ret;

    dspClear();
    dspLS(0,"RENEWAL KARTU");        
    dspLS(3,"");

    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}

int KonfirmasiReissuePIN()
{
    int ret;

    dspClear();
    dspLS(0,"REISSUE PIN");        
    dspLS(3,"");

    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;
lblKO:
    ret = -1;
lblEnd:
    return ret;         
}
*/
int KonfirmasiRegistrasiInternetBanking()
{
    int ret;
    char key;

    dspClear();
    
    display_text(0,0,"REG INTERNET BANKING",dsp_ALIGN_CENTER);
    display_text(2,0,"Jaga kerahasiaan",dsp_ALIGN_CENTER);
    display_text(3,0,"user id dan password",dsp_ALIGN_CENTER);
    display_text(4,0,"anda",dsp_ALIGN_CENTER);
    display_text(7,0,"BATAL        LANJUT",dsp_ALIGN_CENTER);
    kbdStart(1);
    while(1)
    {
    	key = kbdKey();
        switch(key)
        {
            case kbdF1:
            case kbdANN: 
                goto lblBatal;
            case kbdF4:
            case kbdVAL:
                ret = inputInternetBankingPin();
                if(ret == 0)
                    goto lblBatal;
                if(ret <0 ) 
                    goto lblKO;
                ret = 1;                        
                goto lblEnd;   
        }
    }
    
    kbdStop();
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;
lblKO:
    ret = -1;     
lblEnd:
    kbdStop();
    return ret;       
}

int KonfirmasiRegistrasiSmsBanking()
{
	int ret;
    char key;

    dspClear();
    
    dspLS(0,"Reg SMS Banking");
    dspLS(1,"Jaga kerhsiaan");
    dspLS(2,"PIN Anda");    
    dspLS(3,"BATAL     LANJUT");

    MAPPUTBYTE(traJenisKartu,1,lblKO); //@agmr - BRI - dianggap kartu kredit
    kbdStart(1);
    while(1)
    {
    	key = kbdKey();
        switch(key)
        {
            case kbdF1:
            case kbdANN: 
                goto lblBatal;
            case kbdF4:
            case kbdVAL:
                ret = 1;
                goto lblEnd;   
        }
    }
    kbdStop();
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;     
lblKO:
    ret = -1;
lblEnd:
    kbdStop();
    return ret;    
}

int KonfirmasiRegistrasiPhoneBanking()
{
    int ret;
    char key;

    dspClear();
    
    dspLS(0,"Reg Phn Banking");
    dspLS(1,"Jaga kerhsiaan");
    dspLS(2,"PIN Anda");    
    dspLS(3,"BATAL     LANJUT");

    MAPPUTBYTE(traJenisKartu,1,lblKO); //@agmr - BRI - dianggap kartu kredit
    kbdStart(1);
    while(1)
    {
    	key = kbdKey();
        switch(key)
        {
            case kbdF1:
            case kbdANN: 
                goto lblBatal;
            case kbdF4:
            case kbdVAL:
                ret = 1;
                goto lblEnd;   
        }
    }
    kbdStop();
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;     
lblKO:
    ret = -1;
lblEnd:
    kbdStop();
    return ret;       
}

int KonfirmasiKartuOtorisasi()
{
    int ret;
    char buf[15];

    dspClear();
    dspLS(0,"   OTORISASI");
    
    dspLS(1,"Password SPV:");
    memset(buf,0,sizeof(buf));
    while(1)
    {
	    ret = enterPwd(2, buf, lenPasswordPetugas+1);
	    if(ret == 0 || ret == kbdANN)
	        goto lblBatal;
	    if(ret < 0)
	        goto lblKO;
    
	    if(strlen(buf) == 6)
	    	break;
	    Beep();
    }

    MAPPUTSTR(traPasswordPetugas,buf,lblKO);
    
    return 1;
lblBatal:
    ret = 0;
    goto lblEnd;     
lblKO:
    ret = -1;
lblEnd:
    return ret;       
}

int KonfirmasiPembayaranPascaBayar()
{
    int ret;
    char buf[31];
    char str[50];
//    char amount[20];
//    card amt,totalAmt,adminAmt; 
    char msg[6][21];
    char baris1[21];
    char baris2[21];
    int i=0;

    dspClear();
   
    //Nama Pemilik
    memset(str,0,sizeof(str));
    memset(buf,0,sizeof(buf));
    ret = mapGet(traNamaPenerima,buf,sizeof(buf));
    CHK;
    strcpy(str,"Nama:");
    trimRight(buf,0x20);
    strcat(str,buf);  
    ret = displayLongText(str,strlen(str),baris1,baris2,17);
    strcpy(msg[i], baris1);
    i++;
    if(ret == 2)
    {
    	strcpy(msg[i],baris2);
    	i++;
    }
    
    // NO TELPON
    strcpy(msg[i],"No:");
    memset(buf,0,sizeof(buf));
    ret = mapGet(traNoTelpon,buf,sizeof(buf));
    CHK;
    trimRight(buf,0x20);
    strcat(msg[i],buf);
    i++;
    
    //JUMLAH TAGIHAN
    strcpy(msg[i],"Tagihan:");
    i++;
    ret = mapGet(traTotalAmount,buf,sizeof(buf));
    CHK;
    mapPut(traAmt,buf,lenAmt);   
    trimLeft(buf,'0');  
    if(strlen(buf) >=2)
    	buf[strlen(buf)-2] = 0; //jumlah tagihan dibagi 100 untuk ditampilkan/2 digit dibelakan dibuang   	
    memset(baris1,0,sizeof(baris1));
    strcpy(baris1,"Rp. ");
    fmtAmt(baris1+4,buf,0,",.");   
    sprintf(str,"%16s",baris1);
    strcpy(msg[i],str);
    i++;
    
    ret = scrollDisplay(msg,i,2,"KONFIRMASI","BATAL     LANJUT");
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	
    
lblBatal:
    ret = 0;
    goto lblEnd;     
lblEnd:
    kbdStop();
    return ret;   	
}

int KonfirmasiPembayaranPascaBayar8()
{
    int ret;
    char str[128];
    char buf[128];//,buf1[128];
    char judul[30];
//    char baris1[30];char baris2[30];
//    byte key;
    char msg[10][22];
    int i=0;

    strcpy(judul,"KONFIRMASI");
    
    memset(msg,0,sizeof(msg));
    
    //Nama Pemilik
    strcpy(msg[i++],"Nama:");
    memset(buf,0,sizeof(buf));
    ret = mapGet(traNamaPenerima,buf,sizeof(buf));
    CHK;
    //sprintf(str,"%-16s",buf);
    strcpy(msg[i++],buf);

    // NO TELPON
    strcpy(msg[i++],"No Telpon:");
    memset(buf,0,sizeof(buf));
    ret = mapGet(traNoTelpon,buf,sizeof(buf));
    CHK;
    trimRight(buf,0x20);
    strcat(msg[i++],buf);

    //JUMLAH TAGIHAN
    strcpy(msg[i++],"Tagihan :");
    
    memset(buf,0,sizeof(buf));
    mapGet(traTotalAmount,buf,sizeof(buf));
	buf[strlen(buf) - 2] = 0;    
    mapPut(traAmt,buf,lenAmt); //simpan untuk payment
/*    trimLeft(buf,'0');  
    if(strlen(buf) >=2)
    	buf[strlen(buf)-2] = 0; //jumlah tagihan dibagi 100 untuk ditampilkan/2 digit dibelakan dibuang   	
*/    strcpy(str,"Rp. ");
    fmtAmt(str+4,buf,0,",.");
    strcat(msg[i++],str);
     
    ret = scrollDisplay8(msg,i,6,judul,"BATAL          LANJUT"); 
    if(ret == kbdVAL || ret == kbdF4)
    {
    	ret = 1;
    	goto lblEnd;
    }	
    else
    {
    	goto lblBatal;
    }	    

lblBatal:
    ret = 0;
    usrInfo(infUserCancel);
    goto lblEnd;
/*    
lblKO:
    ret = -1;
*/    
lblEnd:
    kbdStop();
    return ret;         
}


int KonfirmasiInstallment()
{
    char key;
    int ret;
    char plan[10], term[10], amount[20];
    char buf[50];
    
    dspClear();
    display_text(0, 0, "CICILAN BRING", dsp_ALIGN_CENTER);
    
    ret = mapGet(traInstallmentTerm,term,sizeof(term));
    CHK;
//    strcpy(buf,"Term  :");
//    strcat(buf,term);
    sprintf(buf,"Term : %14s",term );
    display_text(3, 0, buf, dsp_ALIGN_LEFT);
    
    ret = mapGet(traInstallmentPlan,plan,sizeof(plan));
    CHK;
//    strcpy(buf,"Plan  :");
//    strcat(buf,plan);
    sprintf(buf,"Plan : %14s",plan );
    display_text(4, 0, buf, dsp_ALIGN_LEFT);
    
    ret = mapGet(traAmt,amount,sizeof(amount));
    CHK;
    strcpy(buf,"Rp.");
    fmtAmt(buf+3,amount,0,",.");
    display_text(5, 0, buf, dsp_ALIGN_RIGHT);    
    
    display_text(7, 0, "BATAL      LANJUT", dsp_ALIGN_CENTER);
    kbdStart(1);
    while(1)
    {
    	key = kbdKey();
        switch(key)
        {
            case kbdF1:
            case kbdANN: 
                goto lblBatal;
            case kbdF4:
            case kbdVAL:
                ret = 1;
                goto lblEnd;   
        }
    } 
    
lblBatal:
    ret = 0;
    goto lblEnd; 
/*    
lblKO:
    ret = -1;
*/    
lblEnd:
    kbdStop();
    return ret;          
}

int getField48(tBuffer *req)
{
    int ret = 0;
    byte buf[1024];
    byte data[1024];
    byte *ptr;
    byte txnType,subType;
    card i48len; // @@OA
    word menuItm;
    
    ptr = buf;
    memset(buf,0,sizeof(buf));
    memset(data,0,sizeof(data));
    
    ret = mapGetWord(traMnuItm, menuItm);
	CHECK(ret >= 0, lblKO);
	
	if(menuItm == mnuReversal)
	{
    //++ @agmr - BRI - reversal field
        mapGetCard(revField48len,i48len);
        mapGet(revField48,buf,lenField48);
    //-- @agmr - BRI - reversal field    
        
        ret = bufApp(req, (byte *) buf,i48len);
        CHK;
        return bufLen(req);  	    
	}


    MAPGETBYTE(traTxnType,txnType,lblKO);
    MAPGETBYTE(traSubType,subType,lblKO);
    
     switch(txnType)
    {
        case trtInfoSaldo:
            break;
        case trtInfoSaldoBankLain:
            break;
        case trtTransferSesamaBRIInquiry:
            memcpy(ptr,"000",3);
            ptr+=3;
            ret = mapGet(traNomorRekeningTujuanBRI,data,lenNomorRekeningBRI);
            CHECK(ret > 0,lblKO);
            memcpy(ptr,data,ret);
            ptr+=ret;
            fmtPad(buf,23,' ');
            ptr = buf+23; // panjang total 23 ??
            break;
        case trtTransferSesamaBRI:
            memcpy(ptr,"000",3);
            ptr+=3;
            ret = mapGet(traNomorRekeningTujuanBRI,data,lenNomorRekeningBRI);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenNomorRekeningBRI,' '); //pad kanan
            memcpy(ptr,data,lenNomorRekeningBRI);
            ptr+=lenNomorRekeningBRI;
            fmtPad(buf,23,' ');    
            ptr = buf+23; // panjang total 23 ??
            break;
        case trtTransferAntarBankInquiry:
            ret = mapGet(traBankId,data,lenBankId);
            CHECK(ret > 0,lblKO);
            fmtPad(data,-3,'0'); //pad kiri dengan 0
            memcpy(ptr,data,lenBankId);
            ptr+=lenBankId;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traNomorRekeningTujuan,data,lenNomorRekening);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenNomorRekening,' ');
            memcpy(ptr,data,lenNomorRekening);
            ptr+=lenNomorRekening;
            
            memset(data,0,sizeof(data));       
            ret = mapGet(traCustomerRefNumber,data,lenCustomerRefNumber);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenCustomerRefNumber,' ');
            memcpy(ptr,data,lenCustomerRefNumber);
            ptr+=lenCustomerRefNumber;
            fmtPad(buf,60,' ');    
            ptr = buf+60; // panjang total 60 ??        
            
            break;
        case trtTransferAntarBank:
            ret = mapGet(traBankId,data,lenBankId);
            CHECK(ret > 0,lblKO);
            fmtPad(data,-3,'0');
            memcpy(ptr,data,lenBankId);
            ptr+=lenBankId;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traNomorRekeningTujuan,data,lenNomorRekening);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenNomorRekening,' ');
            memcpy(ptr,data,lenNomorRekening);
            ptr+=lenNomorRekening;
            
            memset(data,0,sizeof(data)); 
            ret = mapGet(traCustomerName,data,lenCustomerName);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenCustomerName,' ');
            memcpy(ptr,data,lenCustomerName);
            ptr+=lenCustomerName;    
            
            memset(ptr,' ',7);
            ptr+=7;        
            
            memset(data,0,sizeof(data));    
            ret = mapGet(traCustomerRefNumber,data,lenCustomerRefNumber);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenCustomerRefNumber,' ');
            memcpy(ptr,data,lenCustomerRefNumber);
            ptr+=lenCustomerRefNumber;  
            fmtPad(buf,120,' ');    
            ptr = buf+ 120; // panjang total 120 ??        
            break;
            
        case trtPembayaranPLNInquiry:
            ret = mapGet(traPelangganId,data,lenPelangganId);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenPelangganId,' ');
            memcpy(ptr,data,lenPelangganId);
            ptr+=lenPelangganId;
            break;
        case trtPembayaranPLN:
            mapGet(traField48,data,sizeof(data));
            mapGetCard(traField48Len,i48len);
            memcpy(ptr,data,lenTotalOutstanding);
            ptr+=lenTotalOutstanding;
            
            mapGet(traBillStatus,ptr,lenBillStatus);          
//            memcpy(ptr,"1",1);
            ptr++;
            
            memcpy(ptr,data+lenTotalOutstanding,i48len-lenTotalOutstanding);
            ptr+=(i48len-lenTotalOutstanding);
            
            break;
        case trtPembayaranCicilanInquiry:
            switch(subType)
            {
                case CICILAN_FIF:
                    memcpy(ptr,"00",2);
                    break;
                case CICILAN_BAF:
                    memcpy(ptr,"01",2);
                    break;
                case CICILAN_OTO:
                    memcpy(ptr,"02",2);            
                    break;
                case CICILAN_FNS:
                    memcpy(ptr,"03",2); 
                    break;
                case CICILAN_VER:
                    memcpy(ptr,"04",2); 
                    break;
                case CICILAN_WOM:
                    memcpy(ptr,"05",2);
                    break;
            }
            ptr+=2;
            ret = mapGet(traContractNumber,data,sizeof(data));
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenContractNumber,' ');
            memcpy(ptr,data,lenContractNumber);
            ptr+=lenContractNumber;       
            break;
        case trtPembayaranCicilan:
            ret = mapGet(traField48,data,sizeof(data));
            CHECK(ret > 0,lblKO);
            ret = mapGetCard(traField48Len,i48len); // @@OA
            CHECK(ret > 0,lblKO); // @@OA
            memcpy(ptr,data,i48len); // @@OA
            ptr+=i48len; // @@OA
            break;
        case trtPembayaranPulsa:
            switch(subType/10)
            {
                case 1: //simpati
                    ret = mapGet(traNoTelpon,data,sizeof(data));
                    CHECK(ret > 0, lblKO);
                    fmtPad(data,lenNoTelpon,' '); //pad kanan sepanjang lenNoTelpon
                    memcpy(ptr,data,lenNoTelpon);
                    ptr+=lenNoTelpon;    
                                    
                    memset(data,0,sizeof(data));
                    ret = mapGet(traAmt,data,sizeof(data));
                    CHECK(ret > 0,lblKO);
                    strcat(data,"00");          //x100
                    fmtPad(data,lenAmt,' ');    //pad kanan
                    memcpy(ptr,data,lenAmt);
                    ptr+=lenAmt;
                    break;
                case 2: //mentari
                case 3: //im3   
                    ret = mapGet(traNoTelpon,data,sizeof(data));
                    CHECK(ret > 0, lblKO);
                    fmtPad(data,lenNoTelpon,' ');
                    memcpy(ptr,data,lenNoTelpon);
                    ptr+=lenNoTelpon;
                                
                    memset(data,0,sizeof(data));
                    ret = mapGet(traAmt,data,sizeof(data));
                    CHECK(ret > 0,lblKO);
                    strcat(data,"00");
                    fmtPad(data,-lenAmt,'0');   //pad kiri dengan '0'
                    memcpy(ptr,data,lenAmt);
                    ptr+=lenAmt;
                    break;
                case 4:
					memset(data,0,sizeof(data));
					ret = mapGet(traNoTelpon,data,sizeof(data));
                    CHECK(ret > 0, lblKO);
                    fmtPad(data,13,' ');
                    memcpy(ptr,data,13);
                    ptr+=13;
                    
                    memset(data,0,sizeof(data));
                    ret = mapGet(traAmt,data,sizeof(data));
                    CHECK(ret > 0,lblKO);
                    fmtPad(data,-12,'0');   //pad kiri dengan '0' sepangjang 8
                    memcpy(ptr,data,12);
                    ptr+=12;
                    break;  
				/*Changed By Ali*/
				case 5://Esia
					memset(data,0,sizeof(data));
					ret = mapGet(traBillPeriod1, data, sizeof(data));
					CHECK(ret > 0, lblKO);
					if(strlen(data) < 4)
						fmtPad(data,4,' ');
					memcpy(ptr,data,4);
					ptr+=4;
					
					ret = mapGet(traNoTelpon,data,sizeof(data));
                    CHECK(ret > 0, lblKO);
                    fmtPad(data,9,' ');
                    memcpy(ptr,data,13);
                    ptr+=13;
                    
                    memset(data,0,sizeof(data));
                    ret = mapGet(traAmt,data,sizeof(data));
                    CHECK(ret > 0,lblKO);
                    fmtPad(data,-12,'0');   //pad kiri dengan '0' sepangjang 8
                    memcpy(ptr,data,12);
                    ptr+=12;
					break;
				case 6://smart
					ret = mapGet(traNoTelpon,data,sizeof(data));
                    CHECK(ret > 0, lblKO);
                    fmtPad(data,13,' ');
                    memcpy(ptr,data,13);
                    ptr+=13;

					memset(data,0,sizeof(data));
                    ret = mapGet(traAmt,data,sizeof(data));
                    CHECK(ret > 0,lblKO);
                    fmtPad(data,-12,'0');   //pad kiri dengan '0' sepangjang 8
                    memcpy(ptr,data,12);
                    ptr+=12;
					break;
				case 7://frean
					ret = mapGet(traNoTelpon,data,sizeof(data));
                    CHECK(ret > 0, lblKO);
                    fmtPad(data,13,' ');
                    memcpy(ptr,data,13);
                    ptr+=13;

					memset(data,0,sizeof(data));
                    ret = mapGet(traAmt,data,sizeof(data));
                    CHECK(ret > 0,lblKO);
                    fmtPad(data,-12,'0');   //pad kiri dengan '0' sepangjang 8
                    memcpy(ptr,data,12);
                    ptr+=12;
					break;
				case 8://Three
					ret = mapGet(traNoTelpon,data,sizeof(data));
                    CHECK(ret > 0, lblKO);
                    fmtPad(data,13,' ');
                    memcpy(ptr,data,13);
                    ptr+=13;

					memset(data,0,sizeof(data));
                    ret = mapGet(traAmt,data,sizeof(data));
                    CHECK(ret > 0,lblKO);
                    fmtPad(data,-12,'0');   //pad kiri dengan '0' sepangjang 8
                    memcpy(ptr,data,12);
                    ptr+=12;
					break;
				case 9://Three
					ret = mapGet(traNoTelpon,data,sizeof(data));
                    CHECK(ret > 0, lblKO);
                    fmtPad(data,13,' ');
                    memcpy(ptr,data,13);
                    ptr+=13;

					memset(data,0,sizeof(data));
                    ret = mapGet(traAmt,data,sizeof(data));
                    CHECK(ret > 0,lblKO);
                    fmtPad(data,-12,'0');   //pad kiri dengan '0' sepangjang 8
                    memcpy(ptr,data,12);
                    ptr+=12;
					break;
				/*End Of Changed By Ali*/                         
            }
            break;
		/*Changed By Ali*/
		case trtPembayaranTVBerlanggananInquiry:
            ret = mapGet(traNamaPenerima,data,sizeof(data));
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenNoTelpon,' ');
            memcpy(ptr,data,lenNoTelpon);
            ptr+=lenNoTelpon;       
            break;
			
		case trtPembayaranTVBerlangganan:
			memset(ptr, 0, sizeof(ptr));
			memset(data,0,sizeof(data));
			ret = mapGet(traTLEData,data,lenTLEData);
            CHECK(ret > 0,lblKO);
            memcpy(ptr,data,strlen(data));
            ptr+=strlen(data);
            break;

		case trtPembayaranTelkomInquiry:
            ret = mapGet(traNamaPenerima,data,sizeof(data));
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenNoTelpon,' ');
            memcpy(ptr,data,lenNoTelpon);
            ptr+=lenNoTelpon;       
            break;
			
		case trtPembayaranTelkom:
			memset(ptr, 0, sizeof(ptr));
			memset(data,0,sizeof(data));
			ret = mapGet(traTLEData,data,lenTLEData);
            CHECK(ret > 0,lblKO);
            memcpy(ptr,data,strlen(data));
            ptr+=strlen(data);
            break;

		case trtTrxPhoneBankingTransfer:
			memcpy(ptr, "1", 1);
			ptr+=1;
			ret = mapGet(traPelangganId, data, lenPelangganId + 1);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenPelangganId+1);
			fmtPad(data,35,' ');
			ptr = ptr + lenPelangganId + 1;
			break; 

		case trtTrxPhoneBankingTransferInquiry:
			
			memcpy(ptr,"000", 3); 
            ptr+=3;
			ret = mapGet(traPelangganId, data, lenPelangganId+1);
			CHECK(ret > 0,lblKO); 
			memcpy(ptr, data, lenPelangganId+1);
			fmtPad(data,23,' ');
			ptr = ptr + lenPelangganId + 1;
			break;

		case trtTrxPhoneBankingPulsa:
			memcpy(ptr, "2", 1);
			ptr+=1;
			ret = mapGet(traNoTelpon, data, lenNoTelpon);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenNoTelpon);
			fmtPad(data,35,' ');
			ptr += lenNoTelpon;
			break;

		case trtPembayaranKKBRIInquiry:
		case trtPembayaranKKBRI:
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
		case trtPembayaranKKANZ:
			memcpy(ptr, "3", 1);
			ptr += 1;
			
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
		case trtPembayaranKKCITIKTA:
		case trtPembayaranKKCITIKK:
			memcpy(ptr, "0000", 4);
			ptr += 4;
			
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
		case trtPembayaranKKHSBCKK:
			memcpy(ptr, "4", 1);
			ptr += 1;
			
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
		case trtPembayaranKKHSBCKTA:
			memcpy(ptr, "5", 1);
			ptr += 1;
			
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
			break;
		case trtPembayaranKKRBSKK:
			memcpy(ptr, "6", 1);
			ptr += 1;
			
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
		case trtPembayaranKKRBSKTA:
			memcpy(ptr, "4", 1);
			ptr += 1;
			
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
			break;
		case trtPembayaranKKStanCharKK:
			memcpy(ptr, "1", 1);
			ptr += 1;
			
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
		case trtPembayaranKKStanCharKTA:
			memcpy(ptr, "2", 1);
			ptr += 1;
			
			ret = mapGet(traMeter, data, lenMeter);
			CHECK(ret > 0, lblKO);
			memcpy(ptr, data, lenMeter);
			fmtPad(data,16,' ');
			ptr += lenMeter;
			break;
		/*End of Changed By Ali*/
#ifdef ABSENSI		
		/*Changed By Ali*/
		case trtAbsensi:
			switch(subType){
				case SHIFTIA:
					memcpy(ptr,"G", 1);
					break;
				case SHIFTIB:
					memcpy(ptr,"H", 1);
					break;
				case SHIFTIIA:
					memcpy(ptr,"I", 1);
					break;
				case SHIFTIIB:
					memcpy(ptr,"J", 1);
					break;
				case SHIFTIIIA:
					memcpy(ptr,"K", 1);
					break;
				case SHIFTIIIB:
					memcpy(ptr,"L", 1);
					break;
				case LEMLANG:
					memcpy(ptr,"F", 1);
					break;
				case LEMTANG:
					memcpy(ptr,"E", 1);
					break;
				case PULANG:
					memcpy(ptr,"B", 1);
					break;
				case DATANG:
					memcpy(ptr,"A", 1);
					break;
				case ISTIMUL:
					memcpy(ptr,"C", 1);
					break;
				case ISTIAKH:
					memcpy(ptr,"D", 1);
					break;
			}
			ptr += lenPPPPassword-2;
			break;
		/*End of Changed By Ali*/		
#endif		                         
        case trtPembayaranZakat:
            switch(subType%10)
            {
                case 1: // dhuafa
                    memcpy(ptr,"001",3);
                    break;
                case 2: // YBM
                    memcpy(ptr,"002",3);
                    break;
                                                    
            }
            fmtPad(ptr,23,' ');
            ptr+=23;
            break;
        case trtSetorSimpananInquiry:
        case trtSetorSimpanan:
        case trtSetorPinjamanInquiry:
        case trtSetorPinjaman:
            memcpy(ptr,"002",3);
            ptr+=3;
            ret = mapGet(traNomorRekeningAsalBRI,data,sizeof(data));
            CHECK(ret > 0, lblKO);
            fmtPad(data,lenNomorRekeningBRI,' ');
            memcpy(ptr,data,lenNomorRekeningBRI);
            ptr+=lenNomorRekeningBRI;
            fmtPad(buf,23,' ');
            ptr = buf+23;
            break;
        case trtTarikTunai:
        case trtVoidTarikTunai:    
            memset(ptr,' ',23);
            ptr+=23;
            break;
        case trtRegistrasiInternetBanking:
            ret = mapGet(traPan,data,sizeof(data));
            CHECK(ret > 0, lblKO);
            fmtPad(data,16,' ');
            memcpy(ptr,data,16);
            ptr+=16;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traPINInternetBanking,data,lenPINInternetBanking);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenPINInternetBanking,' ');
            memcpy(ptr,data,lenPINInternetBanking);
            ptr+=lenPINInternetBanking;
            memset(ptr,' ',13);
            ptr+=13;
            break;
        case trtRegistrasiPhoneBanking:
            memset(data,0,sizeof(data));
            mapGet(traJenisKartu,data,1);
            if(data[0] == 1)
                memcpy(ptr,"1109",4);
            else 
                memcpy(ptr,"1103",4);
            fmtPad(ptr,35,' ');
            ptr+=35;
            break;
		/*Changed By Ali*/
		case trtRegistrasiSmsBanking:
			ret = mapGet(traPan,data,sizeof(data));
            CHECK(ret > 0, lblKO);
            fmtPad(data,16,' ');
            memcpy(ptr,data,16);
            ptr+=16;

			memset(data,0,sizeof(data));
            ret = mapGet(traNoTelpon,data,lenNoTelpon);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenNoTelpon,' ');
            memcpy(ptr,data,lenNoTelpon);
            ptr+=lenNoTelpon;

			memset(data,0,sizeof(data));
            ret = mapGet(traPINInternetBanking,data,lenPINInternetBanking);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenPINInternetBanking,' ');
            memcpy(ptr,data,lenPINInternetBanking);
            ptr+=lenPINInternetBanking;			
			break;
		/*End Of Changed By Ali*/            
        case trtRenewalKartuOtorisasi:
        case trtReissuePINOtorisasi:    
        case trtAktivasiKartuOtorisasi:
            if(txnType == trtRenewalKartuOtorisasi)
                memcpy(ptr,"000",3);
            else
                memcpy(ptr,"001",3);
            ptr+=3;
            ret = mapGet(traPasswordPetugas,data,lenPasswordPetugas);
            CHECK(ret > 0, lblKO);
            fmtPad(data,lenPasswordPetugas,' ');
            memcpy(ptr,data,lenPasswordPetugas);
            ptr+=lenPasswordPetugas;
            fmtPad(buf,23,' ');
            ptr = buf+23;
            break;
        case trtAktivasiKartu:
            memset(ptr,0x20,60);
            ret = mapGet(traNomorKartuPetugas,data,lenNomorKartuPetugas);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenNomorKartuPetugas,' ');
            memcpy(ptr,data,lenNomorKartuPetugas);
            ptr+=lenNomorKartuPetugas;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traPasswordPetugas,data,lenPasswordPetugas);
            CHECK(ret>0,lblKO);
            fmtPad(data,lenPasswordPetugas,' ');
            memcpy(ptr,data,lenPasswordPetugas);
            ptr+=lenPasswordPetugas;

            memset(data,0,sizeof(data));
            ret = mapGet(traNewPinBlk,data,sizeof(data));
            CHECK(ret > 0,lblKO);
            sprintf(ptr,"%02X%02X%02X%02X%02X%02X%02X%02X",data[0],data[1],data[2],data[3],
                                                         data[4],data[5],data[6],data[7]);
            ptr+=16;                                                         
            memcpy(ptr,"  ",2);
            ptr+=2;
            memset(data,0,sizeof(data));
            ret = mapGet(traNomorRekeningAsalBRI,data,lenNomorRekeningBRI);
            CHECK(ret > 0, lblKO);
            fmtPad(data,15,' ');
            memcpy(ptr,data,lenNomorRekeningBRI);
            ptr+=lenNomorRekeningBRI;
            ptr = buf+60;
            break;
        case trtRenewalKartu:
            memset(ptr,0x20,60);
            ret = mapGet(traNomorKartuPetugas,data,lenNomorKartuPetugas);
            CHECK(ret > 0,lblKO);
            fmtPad(data,lenNomorKartuPetugas,' ');
            memcpy(ptr,data,lenNomorKartuPetugas);
            ptr+=lenNomorKartuPetugas;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traNomorKartuLama,data,lenNomorKartuLama);
            CHECK(ret>0,lblKO);
            memcpy(ptr,data,lenNomorKartuLama);
            ptr+=lenNomorKartuLama;
            
            memset(data,0x20,8);
            memcpy(ptr,data,8);
            ptr+=8;

            memset(data,0,sizeof(data));
            ret = mapGet(traNomorRekeningAsalBRI,data,lenNomorRekeningBRI);
            CHECK(ret > 0, lblKO);
            fmtPad(data,15,' ');
            memcpy(ptr,data,lenNomorRekeningBRI);
            ptr+=lenNomorRekeningBRI;
            ptr = buf+60;

        	break;        	
        case trtReissuePIN:
            memset(ptr,0x20,60);
            ret = mapGet(traNomorKartuPetugas,data,lenNomorKartuPetugas);
            CHECK(ret > 0, lblKO);
            fmtPad(data,lenNomorKartuPetugas,' ');
            memcpy(ptr,data,lenNomorKartuPetugas);
            ptr+=lenNomorKartuPetugas;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traNomorRekeningAsalBRI,data,lenNomorRekeningBRI);
            CHECK(ret > 0, lblKO);
            fmtPad(data,lenNomorRekeningBRI,' ');
            memcpy(ptr,data,lenNomorRekeningBRI);
            ptr+=lenNomorRekeningBRI;
            ptr = buf+60;
            
            break;
        case trtInstallment:
            break;
        case trtGantiPIN:     
            memset(data,0,sizeof(data));
            ret = mapGet(traNewPinBlk,data,sizeof(data));
            CHECK(ret > 0,lblKO);
            sprintf(ptr,"%02X%02X%02X%02X%02X%02X%02X%02X",data[0],data[1],data[2],data[3],
                                                         data[4],data[5],data[6],data[7]);
            ptr+=16;                                                         
            break;
            
        case trtGantiPasswordSPV:
            strcpy(data,"001");
            memcpy(ptr,data,3);
            ptr+=3;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traPasswordPetugas,data,lenPasswordPetugas);
            CHECK(ret > 0,lblKO);
            memcpy(ptr,data,6);
            ptr+=6;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traPINInternetBanking,data,lenPINInternetBanking);
            CHECK(ret > 0,lblKO);
            memcpy(ptr,data,6);
            ptr+=6;
            memset(ptr,' ',8);
            ptr+=8;             
            break;
            
        case trtPembayaranPascaBayarInquiry:
            ret = mapGet(traNoTelpon,data,lenNoTelpon);
            CHECK(ret > 0, lblKO);
            fmtPad(data,lenNoTelpon,' ');
            memcpy(ptr,data,lenNoTelpon);
            ptr+=lenNoTelpon;
            break;
        
        case trtPembayaranPascaBayar:
	        switch(subType)
	            {  
	            	case PASCA_BAYAR_HALO:
	            		ret = mapGet(traField48,data,sizeof(data));
            			CHECK(ret > 0,lblKO);
            			memmove(data+24,data+24+30,68-30-24);
            			memcpy(ptr,data,68-30);
            			ptr+=38;
	            		break;
	            	case PASCA_BAYAR_MATRIX:
	            		memset(ptr,0x20,59);
	            		ret = mapGet(traNoTelpon,data,sizeof(data));
	            		CHECK(ret > 0,lblKO);
	            		fmtPad(data,13,' ');
	            		memcpy(ptr,data,13);
	            		ptr+=13;
	            		
	            		ret = mapGet(traField48,data,sizeof(data));
	            		CHECK(ret > 0,lblKO);
	            		memcpy(ptr,data+1,46);
	            		ptr+=46;
	            		break;      
	            }	
	         break;
	         
#ifdef PREPAID
        case trtPrepaidInfoDeposit:
            memset(data,0,sizeof(data));
            ret = mapGet(traPan,data,lenPan);
            CHECK(ret > 0,lblKO);
            memcpy(ptr,data,16);
            ptr+=16;
            break;
            
       case trtPrepaidDeposit:
            memset(data,0,sizeof(data));
            ret = mapGet(TRA_NOMOR_KARTU_BRIZZI,data,LEN_TRA_NOMOR_KARTU_BRIZZI);
            CHECK(ret > 0,lblKO);
            memcpy(ptr,data,NOMOR_KARTU_BRIZZI_LEN);
            ptr+=NOMOR_KARTU_BRIZZI_LEN;
            break;
            
       case trtPrepaidTopUp:
            {
                byte buffer[50];
                
                //random dari SAM
                memset(data,0,sizeof(data));
                memset(buffer,0,sizeof(buffer));
                ret = mapGet(TRA_KEY_HOST,buffer,LEN_TRA_KEY_HOST);
                CHECK(ret > 0,lblKO);
                bin2hex(data,buffer,KEY_HOST_LEN*2);
                memcpy(ptr,data,KEY_HOST_LEN*2);
                ptr+=(KEY_HOST_LEN*2);
                
                //current balance
                memset(data,0,sizeof(data));
                memset(buffer,0,sizeof(buffer));
                ret = mapGet(TRA_SISA_SALDO,buffer,LEN_TRA_SISA_SALDO);
                memcpy(data,buffer,AMOUNT_LEN_L);
                trimLeft(data,'0');
                strcat(data,"00");
                fmtPad(data, -AMOUNT_LEN_L, '0');
                memcpy(ptr,data,AMOUNT_LEN_L);
                ptr+= AMOUNT_LEN_L;
                
                //2 byte spasi
                memset(ptr,' ',2);
                ptr+=2;
            }
            break;    
        case trtPrepaidAktivasi:
            {
            	 byte buffer[50];

                //random
                memset(data,0,sizeof(data));
                memset(buffer,0,sizeof(buffer));
                ret = mapGet(TRA_KEY_HOST,buffer,LEN_TRA_KEY_HOST);
                bin2hex(data,buffer,KEY_HOST_LEN);
                memcpy(ptr,data,2*KEY_HOST_LEN);
                ptr+= (2*KEY_HOST_LEN);             
                
                //saldo
                memset(data,0,sizeof(data));
                memset(buffer,0,sizeof(buffer));
                ret = mapGet(TRA_SALDO_AWAL,buffer,LEN_TRA_SALDO_AWAL);
                memcpy(data,buffer,AMOUNT_LEN_L);
                trimLeft(data,'0');
                strcat(data,"00");
                fmtPad(data, -AMOUNT_LEN_L, '0');
                memcpy(ptr,data,AMOUNT_LEN_L);
                ptr+= AMOUNT_LEN_L;
            }
            break;
          
        case trtPrepaidRedeemInquiry:
        case trtPrepaidRedeem:
            {
                byte buffer[50];
                
                //Nomor kartu Brizzi
                memset(data,0,sizeof(data));
                ret = mapGet(TRA_NOMOR_KARTU_BRIZZI,data,LEN_TRA_NOMOR_KARTU_BRIZZI);
                CHECK(ret > 0,lblKO);
                memcpy(ptr,data,NOMOR_KARTU_BRIZZI_LEN);
                ptr+=NOMOR_KARTU_BRIZZI_LEN;
                
                //current balance
                memset(data,0,sizeof(data));
                memset(buffer,0,sizeof(buffer));
                ret = mapGet(TRA_SISA_SALDO,buffer,LEN_TRA_SISA_SALDO);
                memcpy(data,buffer,AMOUNT_LEN_L);
                trimLeft(data,'0');
                strcat(data,"00");
                fmtPad(data, -AMOUNT_LEN_L, '0');
                memcpy(ptr,data,AMOUNT_LEN_L);
                ptr+= AMOUNT_LEN_L;
            }            
            break;    

        case trtPrepaidSettlement:
            {
                char buffer[50];
                int i;
//                word idxCnt;
                int adaTrx = 0;

                for(i=0;i<MAX_PREPAID_SETTLEMENT;i++)
                {
//                    MAPGETWORD(traIdx, idxCnt, lblKO);
                    ret = procPrepaidUpload();
                    if(ret < 0)
                        goto lblKO;
                    if(ret == 0)
                        break;
                    
                    adaTrx = 1;
                    uploadedPrepaidIdx[i+1] = ret-1;

                    memset(data,0,sizeof(data));               
                    memset(buffer,0,sizeof(buffer));
                    MAPGET(logDatTim,buffer,lblKO);
                    
                    memcpy(ptr,buffer+2,2);//year
                    ptr+=2;                
                   
                    memcpy(ptr,buffer+4,2);//month
                    ptr+=2;
                                       
                    memcpy(ptr,buffer+6,2); //day
                    ptr+=2;
                                                                                              
                    memcpy(ptr,buffer+8,6); //time
                    ptr+=6;
                    
                    //procode
                    memset(buffer,0,sizeof(buffer));
                    MAPGET(LOG_PROCODE, buffer, lblKO);
                    memcpy(ptr,buffer,PROC_LEN); 
                    ptr+=PROC_LEN;
                    
                    //amount
                    memset(buffer,0,sizeof(buffer));
                    MAPGET(logTraAmt, buffer, lblKO);
    	            strcat(buffer,"00");
    	            fmtPad(buffer, -AMOUNT_LEN_L, '0');
    	            memcpy(ptr,buffer,AMOUNT_LEN_L);
    	            ptr+=AMOUNT_LEN_L;
    	            
    	            //ref number
    	            memset(buffer,0,sizeof(buffer));
    	            MAPGET(LOG_REF_NUMBER,buffer,lblKO);	            
    	            memcpy(ptr,buffer,REF_NUMBER_LEN);
    	            ptr+=REF_NUMBER_LEN;
    	            
    	            //batch number
    	            memset(buffer,0,sizeof(buffer));
    	            MAPGET(LOG_PREPAID_BATCH_NUM,buffer,lblKO);
    	            memcpy(ptr,buffer,BATCH_NUMBER_LEN);
    	            ptr+=BATCH_NUMBER_LEN;
    	            
    	            //nomor kartu
    	            memset(buffer,0,sizeof(buffer));
    	            MAPGET(LOG_NOMOR_KARTU_BRIZZI,buffer,lblKO);
    	            memcpy(ptr,buffer,NOMOR_KARTU_BRIZZI_LEN);
    	            ptr+=NOMOR_KARTU_BRIZZI_LEN;
    	            
    	            //hash
    	            memset(buffer,0,sizeof(buffer));
    	            MAPGET(LOG_HASH,buffer,lblKO);
    	            bin2hex(ptr,buffer,HASH_LEN);
    	            ptr+= 2*HASH_LEN;
    	        }
    	        if(adaTrx == 0)
//    	        if(ptr == buf)
    	        {
//    	            usrInfo(infNoPrepaidPembayaran);
    	            mapPut(traRspCod, "00", 2);
    	            return -101;
    	        }
    	        uploadedPrepaidIdx[0] = i;
            }

            break;
#endif	         
	         
#ifdef LINE_ENCRYPTION            
        case trtTLEKeyDownload:
        {
            char serialNum[20 + 1];     // length of NO_SERIE
            char sap[16 + 1];
            char dvc;
                
            memset(data,0,sizeof(data));
            mapGet(traTLEUserId,data,lenTLEUserId);
            memcpy(ptr,data,lenTLEUserId);
            ptr+=lenTLEUserId;   
            
            *ptr++ = '|';
            
            memset(data,0,sizeof(data));
            shaData(data);            
            
            memcpy(ptr,data,40);
            ptr+=40;            

            *ptr++ = '|';
            
            memset(serialNum, 0, sizeof(serialNum));
//            memset(binSerialNum, 0, sizeof(binSerialNum));
            memset(sap, 0, sizeof(sap));
            memset(&dvc, 0, sizeof(dvc));
            getSapSer(sap, serialNum, dvc);
            
//            hex_dump("serialNum",serialNum,sizeof(serialNum));
//            hex_dump("sap",sap,sizeof(sap));
            
            memcpy(ptr,serialNum+2,8);
            ptr+=8;
        }
            break;
#endif            
    }
    
//++ @agmr - BRI - reversal field
    if(txnType != trtPrepaidSettlement)
    {
        mapPutCard(traField48Len,ptr-buf);
        mapPut(traField48,buf,ptr-buf);
    }
//-- @agmr - BRI - reversal field    
    
    ret = bufApp(req, (byte *) buf,ptr-buf);
    CHK;
    return bufLen(req);  
lblKO:
    return -1;
}

int getIso57(tBuffer * req)
{
    int ret = 0;
    char buf[20];
    word menuItm;
    card len;
    
    ret = mapGetWord(traMnuItm, menuItm);
	if(ret < 0)
		return ret;
	
	if(menuItm == mnuReversal)
	{
		memset(buf,0,sizeof(buf));
    //++ @agmr - BRI - reversal field
        mapGetCard(revField57len,len);
        mapGet(revField57,buf,lenField57);
    //-- @agmr - BRI - reversal field    
        
        ret = bufApp(req, (byte *) buf,len);
        return ret;  	    
	}    
    memset(buf,0,sizeof(buf));
    strcpy(buf,"@POSBRI#");
    
//++ @agmr - BRI - reversal field
    mapPutCard(traField57Len,8);
    mapPut(traField57,buf,8);
//-- @agmr - BRI - reversal field        
    
    ret = bufApp(req, (byte *) buf,strlen(buf));
    CHK;
    return ret;
    /*    
    lblKO:
        ret = -1;
    */      
}

int getField63(tBuffer *req)
{
    byte txnType,subType;
    char buf[20];
    int ret;
    word mnuItm;
    
    MAPGETWORD(traMnuItm, mnuItm, lblKO);
	if(mnuItm == mnuReversal)
	{
	    card i63len;
	    
    //++ @agmr - BRI - reversal field
        mapGetCard(revField63len,i63len);
        mapGet(revField63,buf,lenField63);
    //-- @agmr - BRI - reversal field    
        
        ret = bufApp(req, (byte *) buf,i63len);
        CHK;
        return bufLen(req);  	    
	}
	    
    MAPGETBYTE(traTxnType,txnType,lblKO);
    MAPGETBYTE(traSubType,subType,lblKO);
    memset(buf,0,sizeof(buf));

     switch(txnType)
    {
        case trtInfoSaldo:
            memcpy(buf,"000BRI",6);
            break;
        case trtInfoSaldoBankLain:
            memcpy(buf,"000INQBLAIN",11);
            break;
        case trtTransferSesamaBRIInquiry:
            memcpy(buf,"001BRI",6);
            break;
        case trtTransferSesamaBRI:
            memcpy(buf,"001BRI",6);
            break;
        case trtTransferAntarBankInquiry:
            memcpy(buf,"003ANTARBANK",12);
            break;
        case trtTransferAntarBank:
            memcpy(buf,"006ANTARBANK",12);
            break;
        case trtPembayaranPLNInquiry:
            memcpy(buf,"201PLNSYB",9);
            break;
        case trtPembayaranPLN:
            memcpy(buf,"201PLNSYB",9);
            break;
        case trtPembayaranCicilanInquiry:
            memcpy(buf,"205SYB",6);
            break;
        case trtPembayaranCicilan:
            switch(subType)
            {
                case CICILAN_FIF:
                    memcpy(buf,"206SYBFIF",9);
                    break;
                case CICILAN_BAF:
                    memcpy(buf,"206SYBBAF",9);
                    break;
                case CICILAN_OTO:
                    memcpy(buf,"206SYBOTO",9);
                    break;
                case CICILAN_FNS:
                    memcpy(buf,"206SYBFNS",9);
                    break;
                case CICILAN_VER:
                    memcpy(buf,"206SYBVER",9);
                    break;
                case CICILAN_WOM:
                    memcpy(buf,"206SYBWOM",9);
                    break;
            }
            break;
        case trtPembayaranPulsa:
            switch(subType/10)
            {
                case 1:
                    memcpy(buf,"300SIMPATI",10);
                    break;
                case 2:
                    memcpy(buf,"300MENTARI",10);
                    break;
                case 3:
                    memcpy(buf,"300IM3SMART",11);
                    break;
                case 4:
                    memcpy(buf,"300XL",5);
                    break;   
				/*Changed By Ali*/
				case 5:
					memcpy(buf, "300ESIA", 7);
					break;
				case 6:
					memcpy(buf, "300SMART", 8);
					break;
				case 7:
					memcpy(buf, "300FREN", 7);
					break;
				case 8:
					memcpy(buf, "300THREE", 8);
					break;
				case 9:
					memcpy(buf, "300AXIS", 8);
					break;
				/*End Of Changed By Ali*/                        
            }
            break;
        case trtPembayaranZakat:
            switch(subType/10)
            {
                case 5: 
                    memcpy(buf,"001ZAKAT",8);
                    break;
                case 6: 
                    memcpy(buf,"001INFAQ",8);
                    break;
                case 7: 
                    memcpy(buf,"001DPLK",7);
                    break;                                        
                    
            }
            break;      
		/*Changed By Ali*/
		case trtPembayaranTVBerlanggananInquiry:
		case trtPembayaranTVBerlangganan:
			switch(subType)
			{
				case TV_INDOVISION:
					memcpy(buf, "200TVID", 7);
					break;
				case TV_OKTV:
					memcpy(buf, "200TVOK", 7);
					break;
				case TV_TOPTV:
					memcpy(buf, "200TVTO", 7);
					break;
				default:
					break;
			}
			break;
		case trtPembayaranTelkomInquiry:
		case trtPembayaranTelkom:
				memcpy(buf, "200TELMD", 8);
			break;
		case trtTrxPhoneBankingTransfer:
			memcpy(buf, "012PBTRXREG", 11);
			break;
		case trtTrxPhoneBankingTransferInquiry:
			memcpy(buf, "001BRI", 6);
			break;
		case trtTrxPhoneBankingPulsa:
			memcpy(buf, "012PBTRXREG", 11);
			break;
		case trtRegistrasiSmsBanking:
			memcpy(buf,"012SMSREG", 9);
			break;
		case trtPembayaranKKBRIInquiry:
		case trtPembayaranKKBRI:
			memcpy(buf,"204BRICC", 8);
			break;
		case trtPembayaranKKANZ:
			memcpy(buf,"204ANZCC", 8);
			break;
		case trtPembayaranKKCITIKTA:
			memcpy(buf,"204CTPL", 7);
			break;
		case trtPembayaranKKCITIKK:
			memcpy(buf,"204CTCC", 7);
			break;
		case trtPembayaranKKHSBCKK:
		case trtPembayaranKKHSBCKTA:
			memcpy(buf,"204HSBCCC", 9);
			break;
		case trtPembayaranKKRBSKK:
		case trtPembayaranKKRBSKTA:
			memcpy(buf,"204RBSCC", 8);
			break;
		case trtPembayaranKKStanCharKK:
		case trtPembayaranKKStanCharKTA:
			memcpy(buf,"204SCBCC", 8);
			break;
		/*End of Changed By Ali*/                      
        case trtSetorSimpananInquiry:
            memcpy(buf,"001BRI",6);
            break;
        case trtSetorSimpanan:
            memcpy(buf,"001BRI",6);
            break;
        case trtSetorPinjamanInquiry:
            memcpy(buf,"001BRI",6);
            break;
        case trtSetorPinjaman:
            memcpy(buf,"001BRI",6);
            break;
        case trtTarikTunai:
            memcpy(buf,"000BRI",6);
            break;
        case trtVoidTarikTunai:
            memcpy(buf,"000BRI",6);
            break;
        case trtRegistrasiInternetBanking:
            memcpy(buf,"012IBANKREG",11);
            break;
        case trtRegistrasiPhoneBanking:
            memcpy(buf,"012PBREG",8);
            break;
        case trtRenewalKartuOtorisasi:
        case trtAktivasiKartuOtorisasi:
        case trtReissuePINOtorisasi:
//prtS("Otorisasi2");            
            memcpy(buf,"001OTO",6);
            break;
        case trtAktivasiKartuInquiry:
            memcpy(buf,"204AKTIVASI",11);
            break;
        case trtAktivasiKartu:
            memcpy(buf,"003AKTIVASI",11);
            break;
        case trtRenewalKartuInquiry:
//prtS("Inquiry2");                 
        	memcpy(buf,"204RENEWAL",10);
        	break;
        case trtRenewalKartu:
//prtS("Renewal2");                
        	memcpy(buf,"003RENEWAL",10);
        	break;
        case trtReissuePIN:
            memcpy(buf,"003REISSUE",10);
            break;
        case trtGantiPIN:
            memcpy(buf,"011PINCHG",9);
            break;
        case trtGantiPasswordSPV:
            memcpy(buf,"001OTO",6);
            break;
        case trtInstallment:
            memcpy(buf,"001BRI",6);
            break;
        case trtPembayaranPascaBayarInquiry:
       	case trtPembayaranPascaBayar:
        	switch(subType)
        	{
        		case PASCA_BAYAR_HALO:
        			memcpy(buf,"203TELKOMSEL",12);
        			break;
        		case PASCA_BAYAR_MATRIX:
        			memcpy(buf,"202INDOSAT",10);
        			break;
        	}
        	break;
#ifdef ABSENSI        	
		/*Changed By Ali*/	
		case trtAbsensi:
        	memcpy(buf,"002BRI",6);
			break;
		/*End of Changed By Ali*/        	
#endif	        	
#ifdef PREPAID
        case trtPrepaidAktivasi:
        case trtPrepaidTopUp:
			memcpy(buf,"003EMONEY",9);       
            break;
        case trtPrepaidRedeem: 
//            memcpy(buf,"300EMONEY",9);       
//            break;
        case trtPrepaidDeposit:   
        case trtPrepaidRedeemInquiry:     
        case trtPrepaidInfoDeposit:
			memcpy(buf,"204EMONEY",9);       
            break;
        case trtPrepaidSettlement:
            memcpy(buf,"500BRIZZI",9);
            break;

#endif        	
        default:
            return 0;    
    }
    fmtPad(buf,20,' ');
    
//++ @agmr - BRI - reversal field
    mapPutCard(traField63Len,20);
    mapPut(traField63,buf,20);
//-- @agmr - BRI - reversal field        
    
    ret = bufApp(req, (byte *) buf,20);
    CHK;
    return bufLen(req);    
    
lblKO:
    return -1;    
}

int getField61(tBuffer *req)
{
    byte txnType,subType;
    char buf[20], *ptr;
    char data[20]; 
    int ret;
    byte exp;
  
    MAPGETBYTE(traTxnType,txnType,lblKO);
    MAPGETBYTE(traSubType,subType,lblKO);
    memset(buf,0,sizeof(buf));
    ptr = buf;
    
     switch(txnType)
    {
        case trtInstallment:                
            memset(data,0,sizeof(data));
            ret = mapGet(traInstallmentPlan,data,lenInstallmentPlan);
            CHECK(ret > 0, lblKO);
            fmtPad(data,-3,'0');
            memcpy(ptr,data,3);
            ptr+=3;
                        
            memset(data,0,sizeof(data));
            ret = mapGet(traInstallmentTerm,data,lenInstallmentTerm);
            CHECK(ret > 0, lblKO);
            fmtPad(data,-2,'0');
            memcpy(ptr,data,2);
            ptr+=2;
            
            memset(data,0,sizeof(data));
            ret = mapGet(traAmt,data,lenAmt);
            CHECK(ret > 0, lblKO);
            MAPGETBYTE(appExp, exp, lblKO);
            if(exp == 0)
            {
                fmtPad(data,-7,'0');
                memcpy(data + 7, "00", 2);
            }
            else
                fmtPad(data,-9,'0');
            
            memcpy(ptr,data,9);
            ptr+=9;
            break;
        default:
            return 0;    
    }

    ret = bufApp(req, (byte *)buf,ptr-buf);
    CHK;
    return bufLen(req);    
    
lblKO:
    return -1;    
}

int parseField60(const byte* val, word len)
{
    int ret;
    byte txnType;
    const byte *ptr;

    ptr = val;
    MAPGETBYTE(traTxnType,txnType,lblKO);
    switch (txnType)
    {
#ifdef LINE_ENCRYPTION
        case trtTLEKeyDownload:
#ifdef _DEBUG_TLE
prtS("VAL:");          
ShowData(val,128,0,0,8);
#endif // _DEBUG_TLE
            if(len == 129 && *val == 0)
                mapPut(traEncryptedUMK,val+1,128);
            else 
                mapPut(traEncryptedUMK,val,128);
//            getUMK();
            
            break;
#endif
        default:
            break;
    }

    return 0;
lblKO:
    return -1;        
}

int parseField61(const byte* val, word len)
{
    int ret;
    byte txnType;
    const byte *ptr;

    ptr = val;
    MAPGETBYTE(traTxnType,txnType,lblKO);
    switch (txnType)
    {
        case trtInstallment:
/*            
            //compute methode - abaikan
            ptr++; 
            // interest Rate - abaikan
            ptr+=5; 
            // interest Free Amount - abaikan
            ptr+=2;
            // First Payment Amount
            ptr+=9;
            // Last Payment Amount
            ptr+=9;
*/
            ptr += 16;
        
            // Month Installment Amount
            ret = mapPut(traInstallmentCicilan,ptr,lenInstallmentCicilan);
            CHK;
/*                
            ptr+=9;
            
            // Total Installment Amount
            ptr+=9;
            
            // Outstanding interest
            ptr+=9;
            
            // Handling Fee 
            ptr+=9;
            
            // Waive From Months
            ptr+=9;
            
            // Waive To Months
            ptr+=9;
*/            
            break;

        default:
            break;
    }

    return 0;
lblKO:
    return -1;        
}

int parseField48(const byte* val, word len)
{
    int ret;
    byte txnType,subType;
    const byte *ptr;
    byte data[256];
//    card cTmp;
    char amount[20],amount2[20];
    char buf[128];
    char str[128];
    int i;

    ptr = val;
    MAPGETBYTE(traTxnType,txnType,lblKO);
    MAPGETBYTE(traSubType,subType,lblKO);
   
    switch (txnType)
    {
#ifdef LINE_ENCRYPTION    
        case trtTLEKeyDownload:
            mapPut(traTLEKCV,val+11,3);
            break;
#endif
        case trtInfoSaldo:
            mapPut(traSisaSaldo,ptr,lenSisaSaldo);
            ptr+=lenSisaSaldo;
            
            mapPut(traNamaPengirim,ptr,lenNamaPemilik);
            ptr+=lenNamaPemilik;
            break;
            
        case trtInfoSaldoBankLain:
            mapPut(traSisaSaldo,ptr,lenSisaSaldo);
            ptr+=lenSisaSaldo;    
            
            mapPut(traNamaBankAsal,ptr,lenNamaBank);
            ptr+=lenNamaBank;
            break;
            
        case trtTransferSesamaBRIInquiry:
            mapPut(traNamaPenerima,ptr,lenNamaPemilik);
            ptr+=lenNamaPemilik;
            break;   
              
        case trtTransferAntarBankInquiry:
            mapPut(traNamaPenerima,ptr,lenNamaPemilik);
            ptr+=lenNamaPemilik;
            
            mapPut(traNamaBankAsal,ptr,lenNamaBank);
            ptr+=lenNamaBank;
            
            mapPut(traNamaBankTujuan,ptr,lenNamaBank);
            ptr+=lenNamaBank;
            break;
            
        case trtTransferAntarBank:
            mapPut(traNamaPengirim,ptr,lenNamaPemilik);
            ptr+=(lenNamaPemilik+30);
            
            mapPut(traJenisTransfer,ptr,lenJenisTransfer);
            ptr+=lenJenisTransfer;
            
            mapPut(traNomorRekeningAsal,ptr,lenNomorRekening);
           	break;
		/*Changed By Ali*/
		case trtPembayaranTVBerlanggananInquiry:
			//reply
			mapPut(traTLEData, ptr, lenTLEData-12);
			
			//ID Pelanggan
			mapPut(traNamaPenerima,ptr,lenNoTelpon);
			ptr+=lenNoTelpon;

			//Nama Pelanggan
			mapPut(traNamaPengirim,ptr,lenNamaPemilik);
			ptr+=lenNamaPemilik;

			//Periode
			mapPut(traLWBP,ptr,lenLWBP);
			ptr+=lenLWBP;
			break;
		case trtPembayaranTVBerlangganan:
			//ID Pelanggan
			mapPut(traNamaPenerima,ptr,lenNoTelpon);
			ptr+=lenNoTelpon;

			//Nama Pelanggan
			mapPut(traNamaPengirim,ptr,lenNamaPemilik);
			ptr+=lenNamaPemilik;

			//Periode
			mapPut(traLWBP,ptr,lenLWBP);
			ptr+=lenLWBP;
			break;
		case trtPembayaranTelkomInquiry:
			
			//reply
			mapPut(traTLEData, ptr, lenTLEData-12);
			
			//No Telp
			mapPut(traNamaPenerima,ptr,lenNoTelpon);
			ptr = ptr + lenNoTelpon + 30;
			
			//Amount
			mapPut(traAmt, ptr, lenRid);
			mapPut(traTotalAmount, ptr, lenRid);
			ptr += lenRid; 
			memset(buf, 0, sizeof(buf));
			mapGet(traTotalAmount, buf, lenInquiryAmt);
			
			//Nama Pelanggan
			mapPut(traNamaPengirim,ptr,lenNamaPemilik);
			break;
		case trtPembayaranTelkom:
			//No Telp
			mapPut(traNamaPenerima,ptr,lenNoTelpon);
			ptr = ptr + lenNoTelpon + 30;
			
			//Amount
			mapPut(traAmt, ptr, lenRid);
			mapPut(traTotalAmount, ptr, lenRid);
			ptr += lenRid; 
			memset(buf, 0, sizeof(buf));
			mapGet(traTotalAmount, buf, lenInquiryAmt);
			
			//Nama Pelanggan
			mapPut(traNamaPengirim,ptr,lenNamaPemilik);
			break;
			
		case trtRegistrasiSmsBanking:
			//no telp
			mapPut(traNoTelpon, ptr, lenNoTelpon);
			ptr+=lenNoTelpon;
			break;
		
		case trtTrxPhoneBankingTransferInquiry:
			//Nama Rekening
			mapPut(traNamaPengirim,ptr,lenNamaPemilik);
			break;

		case trtTrxPhoneBankingPulsa:
			//status
			mapPut(traBillStatus, ptr, lenBillStatus);
			ptr+=lenBillStatus;

			//no telpon
			mapPut(traNoTelpon, ptr, lenNoTelpon);
			ptr+=lenNoTelpon;
			break;

		case trtPembayaranKKBRIInquiry:
			//Nama
			mapPut(traNamaPengirim, ptr, lenNamaPemilik);
			ptr+=lenNamaPemilik;

			//tagihan
			mapPut(traPelangganId, ptr, lenPelangganId);
			ptr+=lenPelangganId;

			//minimum payment
			mapPut(traTotalAmount, ptr, lenTotalAmount);
			ptr+=lenTotalAmount;

			//pay due date
			mapPut(traDueDate, ptr, lenDueDate);
			ptr+=lenDueDate;

			//available credit
			mapPut(traBunga, ptr, lenBunga);
			ptr+=lenBunga;

			//available cash
			mapPut(traNominalVoucher, ptr, lenNominalVoucher-1);
			ptr+=lenNominalVoucher;
			ptr-=1;
			break;
		case trtPembayaranKKBRI:
			break;
		case trtPembayaranKKANZ:
		case trtPembayaranKKCITIKK:
		case trtPembayaranKKCITIKTA:
			break;
		case trtPembayaranKKHSBCKK:
		case trtPembayaranKKHSBCKTA:
			break;
		case trtPembayaranKKRBSKK:
		case trtPembayaranKKRBSKTA:
			break;
		case trtPembayaranKKStanCharKTA:
		case trtPembayaranKKStanCharKK:
			break;
		/*End of Changed By Ali*/
#ifdef ABSENSI		
		/*Changed By Ali*/		
		case trtAbsensi:
			//fitur
			mapPut(traJenisRekening, ptr, 1);
			ptr+=1;

			//informasi
			mapPut(traStatusKartu, ptr, lenStatusKartu);
			ptr+=lenStatusKartu;

			//jam sekarang
			mapPut(traTanggalLahir, ptr, lenTanggalLahir);
			ptr+=lenTanggalLahir+1;

			//jam terlambat
			mapGet(traStatusKartu,buf,lenStatusKartu);
			sprintf(str,"%1s",buf);
			if(strcmp(str, "TL") == 0){
				mapPut(traFee, ptr, lenTanggalLahir);
			}
			
			break;
		/*End of Changed By Ali*/ 
#endif		                     	
        case trtPembayaranPLNInquiry:
            {
            /*
            untuk PLN sesudah payment:
            tagihan (traInquiryAmt) = field 4 110 
            total bayar (traTotalAmount) = field 4 210 
            admin bank (traAdminCharge) = field 4 210 - field 4 110 
            
            untuk PLN sampai inquiry:
            tagihan (traInquiryAmt) = field 4 110 
            admin bank (traAdminCharge) = field 48 110
            total bayar (traTotalAmount) = field 4 110 + field 48 110 
            */                 
                card jmlBlnTagihan;
                char standMeter[16];
                
                memset(standMeter,0,sizeof(standMeter));
                mapPut(traField48,ptr,len);
                mapPutCard(traField48Len,len);
                
                //no of outstanding bill = 2
                mapPut(traTotalOutstanding,ptr,lenTotalOutstanding);           
                ptr+=lenTotalOutstanding;
                
                //status = 1
                mapPut(traBillStatus,ptr,lenBillStatus);
                dec2num(&jmlBlnTagihan,ptr,1);
                if(jmlBlnTagihan<0 || jmlBlnTagihan>MAX_TAGIHAN_PLN)
                    goto lblDataError;
                ptr+=lenBillStatus;
    
                //custnumber = n12
                mapPut(traPelangganId,ptr,lenPelangganId);
                ptr+=lenPelangganId;            
                
                //cust name = an20
                mapPut(traNamaPelangganPLN,ptr,lenNamaPelangganPLN);
                ptr+=lenNamaPelangganPLN;    
                
                //cust segment n4  
                mapPut(traCustomerSegment,ptr,lenCustomerSegment);
                ptr+=lenCustomerSegment;
    //            ptr+=4;  
            
                //powerconsuming = an9
                mapPut(traPowerConsuming,ptr,lenPowerConsuming);
                ptr+=lenPowerConsuming;
    //            ptr+=9;
    
                //mlpo ref num an19
                mapPut(traMPLO,ptr,lenMPLO);
                ptr+=lenMPLO;
    
                //up an5
                ptr+=5;
                
                //bankadmcharge=n9
                memset(amount,0,sizeof(amount));
    		    memset(amount2,0,sizeof(amount2));
                mapPut(traAdminCharge,ptr,lenAdminCharge);
                
    		    mapGet(traInquiryAmt,amount,sizeof(amount));
    		    mapGet(traAdminCharge, amount2, sizeof(amount2));
    		    addStr(amount,amount,amount2);
    		    mapPut(traTotalAmount,amount,lenTotalAmount);    //tanpa 2 angka dibelakang koma

                ptr+=lenAdminCharge;
                
                for(i=0;i<jmlBlnTagihan;i++)
                {
                    //bill period mmyy
                    if(i==0)
                        mapPut(traBillPeriod1,ptr,lenBillPeriod);                    
                    if(i==1)
                        mapPut(traBillPeriod2,ptr,lenBillPeriod);
                    if(i==2)
                        mapPut(traBillPeriod3,ptr,lenBillPeriod);
                    if(i==3)
                        mapPut(traBillPeriod4,ptr,lenBillPeriod); 
                    ptr+=lenBillPeriod;
                    
                    //powerconsumption fee=n11
                    ptr+=11;
                    
                    //vat = n10
                    ptr+=10;
                    
                    //penalty fee = n9
                    ptr+=9;
                    
                    //traMeter =an16 - yang dicetak 8 byte meter awal dari record pertama 
                    //              + 8 byte meter akhir dari record terakhir pada bill yg pertama
                    if(i==0)
                        memcpy(standMeter,ptr,8);
                    if(i==jmlBlnTagihan-1)
                        memcpy(standMeter+8,ptr+8,8);
//                        mapPut(traMeter1,ptr,lenMeter);
                    ptr+=3*lenMeter; //ada 3 PLN meter        
                } 
                mapPut(traMeter,standMeter,lenMeter); 
            }
            break;
                       
        case trtPembayaranPLN:
            /*
            untuk PLN sesudah payment:
            tagihan (traInquiryAmt) = field 4 110 
            total bayar (traTotalAmount) = field 4 210 
            admin bank (traAdminCharge) = field 4 210 - field 4 110 
            
            untuk PLN sampai inquiry:
            tagihan (traInquiryAmt) = field 4 110 
            admin bank (traAdminCharge) = field 48 110
            total bayar (traTotalAmount) = field 4 110 + field 48 110 
            */ 
            //no of outstanding bill = 2
            ptr+=lenTotalOutstanding;
            
            //status = 1
            ptr+=lenBillStatus;
            
            //payment status = 1
            ptr+=lenPaymentStatus;
            
            //custnumber = n12
            ptr+=lenPelangganId;            
            
            //cust name = an20
            ptr+=lenNamaPelangganPLN;    
            
            //cust segment n4  
            ptr+=4;  
        
            //powerconsuming = an9
            ptr+=9;

            //mlpo ref num an19
            ptr+=lenMPLO;

            //up an5
            ptr+=5;
            
            //bankadmcharge=n9
//            mapPut(traAdminCharge,ptr,lenAdminCharge); //sudah di inquiry
            
//            memset(amount,0,sizeof(amount));
//		    memset(amount2,0,sizeof(amount2));
//		    mapGet(traInquiryAmt,amount,sizeof(amount)); // @@OA
//		    mapPut(traTotalAmount,amount,lenTotalAmount);    //tanpa 2 angka dibelakang koma
//		    mapGet(traAdminCharge, amount2, sizeof(amount2));
//		    subStr(amount, amount, amount2);
//		    mapPut(traInquiryAmt, amount,lenInquiryAmt);
        	break;
        case trtPembayaranCicilanInquiry:
            mapPut(traField48,ptr,len);
            mapPutCard(traField48Len, len); // @@OA
             
            mapPut(traTotalOutstanding,ptr,lenTotalOutstanding);
            ptr+=lenTotalOutstanding;

            mapPut(traBillStatus,ptr,lenBillStatus);
            ptr+=lenBillStatus;
            
            mapPut(traPaymentStatus,ptr,lenPaymentStatus);
            ptr+=lenPaymentStatus;            
                        
            mapPut(traCustomerName,ptr,lenCustomerName);
            ptr+=lenCustomerName;
            
            mapPut(traContractNumber,ptr,lenContractNumber);
            ptr+=lenContractNumber;
            
            mapPut(traCustomerType,ptr,lenCustomerType);
            ptr+=lenCustomerType;
            
            mapPut(traMPLO,ptr,lenMPLO);
            ptr+=lenMPLO;
            
            mapPut(traAdminCharge,ptr,lenAdminCharge);
            ptr+=lenAdminCharge;
            
            mapPut(traPaymentNumber,ptr,lenPaymentNumber);
            ptr+=lenPaymentNumber;
            
            mapPut(traDueDate,ptr,lenDueDate);
            ptr+=lenDueDate;
            
            mapPut(traTotalAmount,ptr,lenTotalAmount);
            ptr+=lenTotalAmount;
            
            mapPut(traPokokHutang,ptr,lenPokokHutang);
            ptr+=lenPokokHutang;
            
            mapPut(traBunga,ptr,lenBunga);
            ptr+=lenBunga;
            
            mapPut(traPenaltyFee,ptr,lenPenaltyFee);
            ptr+=lenPenaltyFee;
            break;
                    
        case trtPembayaranZakat:
            mapPut(traNomorRekeningTujuanBRI,ptr,lenNomorRekeningBRI);
            ptr+=(lenNomorRekeningBRI+1);
            
            mapPut(traNamaPenerima,ptr,lenNamaPemilik);
            ptr+=lenNamaPemilik;
            
            ptr = val+60;
            break;
            
        case trtSetorSimpananInquiry:
            mapPut(traNamaPenerima,ptr,lenNamaPemilik);
            ptr+=lenNamaPemilik;
            break;    
            
        case trtSetorPinjamanInquiry:
            mapPut(traNamaPenerima,ptr,lenNamaPemilik);
            ptr+=lenNamaPemilik;        
            break;
            
        case trtTarikTunai:
        case trtVoidTarikTunai:
            mapPut(traSisaSaldo,ptr,lenSisaSaldo);
            ptr+=lenSisaSaldo;
            
            mapPut(traFee,ptr,lenFee);
            ptr= val+46;
            break;
                
        case trtRegistrasiInternetBanking:
            mapPut(traNoKartuInternetBanking,ptr,lenNoKartuInternetBanking);
            ptr+=lenNoKartuInternetBanking;
            
            mapPut(traUserId,ptr,lenUserId);         
            ptr=val+35;
            break;
        case trtAktivasiKartuInquiry:
        case trtRenewalKartuInquiry:            
            mapPut(traNomorRekeningAsalBRI,ptr,lenNomorRekeningBRI);
            ptr+=lenNomorRekeningBRI;
            ptr++; //skip 1 byte
            
            mapPut(traTanggalLahir,ptr,lenTanggalLahir);
            ptr+=(lenTanggalLahir+36);

            mapPut(traNamaPenerima,ptr,lenNamaPemilik);
            ptr = val+120;
            break;
        case trtRenewalKartu:
            ptr+=3; //skip
            mapPut(traNomorKartuLama,ptr,lenNomorKartuLama);
            ptr+=lenNomorKartuLama;
            
            mapPut(traKodeUkerLama,ptr,lenKodeUker);
            ptr+=lenKodeUker;
            
            mapPut(traKodeUkerBaru,ptr,lenKodeUker);
            ptr+=lenKodeUker;
            
            mapPut(traNomorRekeningAsal,ptr,lenNomorRekening);
            ptr+=lenNomorRekeningBRI;
            
            mapPut(traStatusKartu,ptr,lenStatusKartu);
            ptr+=lenStatusKartu;
            
            mapPut(traNoTelpon,ptr,lenNoTelpon);
            ptr+=lenNoTelpon;
            break;  
// @@OA - mulai
		case trtPembayaranPulsa:
			memset(data,0,sizeof(data));
		    mapGet(traSubType,data,1);
			switch(data[0]/10)
			{
			case 1:
			case 2:
			case 3:
				ret = mapPut(traNoTelpon, ptr, lenNoTelpon);
				ptr+= lenNoTelpon;
			    mapPut(traNominalVoucher, ptr, lenNominalVoucher);
	            ptr+=lenNominalVoucher;
	            mapPut(traPeriode, ptr, lenPeriode);///<Periode
	            ptr+=lenPeriode;
	            mapPut(traNoVoucher, ptr, lenNoVoucher);///<Nomor voucher
	            ptr+=lenNoVoucher;
	            break;
            case 4:
            	ptr+=20;
            	memset(data,0,sizeof(data));
            	memcpy(data,ptr,16);
            	trimLeft(data,'0');
            	if(memcmp(data,"62",2)==0)
            	{
            		memmove(data,&data[1],14);
            		data[0] = '0';
            	}	
            	
				ret = mapPut(traNoTelpon, data, lenNoTelpon);
				ptr+= 16;
				mapPut(traNominalVoucher, ptr, 8);
	            ptr+=8;
	            mapPut(traNoVoucherMitra, ptr, lenNoVoucherMitra);///<Nomor voucher
	            ptr+=lenNoVoucherMitra;
            	break;
        	}
            break;
     	case trtPembayaranPascaBayarInquiry:    
     		mapPut(traField48,ptr,len);
	     
	     switch(subType)
	     {
	     		case PASCA_BAYAR_HALO:
	     		    mapPut(traNoTelpon,ptr,lenNoTelpon);  		    
	     			ptr+=13;
	     			ptr+=11; //diabaikan
     			
	     			mapPut(traNamaPenerima,ptr,lenNamaPemilik);
	     			ptr+=lenNamaPemilik;
	     			
	     			mapPut(traTotalAmount,ptr,lenTotalAmount);
	     			ptr+=lenTotalAmount;
	     			break;
	     			
	     		case PASCA_BAYAR_MATRIX:    		    
	     			ptr+=12; //diabaikan
	     			
	     			mapPut(traTotalAmount,ptr,lenTotalAmount);
	     			ptr+=lenTotalAmount;
	     			
	     			ptr+=11;//diabaikan
	     			ptr+=12;//diabaikan

	     			mapPut(traNamaPenerima,ptr,lenNamaPemilik);
	     			ptr+=lenNamaPemilik;	     			
	     			
	     			break;
	    }
	    break;
	    case trtReissuePIN:
	    	ptr+=16; // no kartu petugas
	    	mapPut(traNomorRekeningAsalBRI,ptr,lenNomorRekeningBRI);
	    	break;
#ifdef PREPAID	    	
        case trtPrepaidInfoDeposit:
            ptr+=6;
            mapPut(TRA_SALDO_DEPOSIT,ptr,AMOUNT_LEN_L);
            break;
            
        case trtPrepaidTopUp:
            //ambil key host
            memset(data,0,sizeof(data));
            hex2bin(data,ptr,KEY_HOST_LEN);
            mapPut(TRA_KEY_HOST,data,LEN_TRA_KEY_HOST);
            break;
            
        case trtPrepaidAktivasi:
            //ambil key host
            memset(data,0,sizeof(data));
            hex2bin(data,ptr,KEY_HOST_LEN);
            mapPut(TRA_KEY_HOST,data,LEN_TRA_KEY_HOST);
            ptr+=48;
            
            //ambil sisa saldo
            memset(data,0,sizeof(data));
            memcpy(data,ptr,SISA_SALDO_LEN);
            data[SISA_SALDO_LEN-2]=0;
            fmtPad(data,-SISA_SALDO_LEN,'0');
            mapPut(TRA_SISA_SALDO_DEPOSIT,data,LEN_TRA_SISA_SALDO_DEPOSIT);
            break;
            
        case trtPrepaidRedeemInquiry:
            //saldo kartu
            memset(buf,0,sizeof(buf));
            memcpy(buf,ptr,AMOUNT_LEN_L);
            buf[AMOUNT_LEN_L-2]=0;
            fmtPad(buf,-AMOUNT_LEN_L,'0');
            mapPut(TRA_SISA_SALDO,buf,AMOUNT_LEN_L);
            
            fmtPad(buf,-12,'0');
            MAPPUTSTR(traAmt,buf,lblKO);
            ptr+=AMOUNT_LEN_L;
                        
            //deposit balance
            mapPut(TRA_SALDO_DEPOSIT,ptr,AMOUNT_LEN_L);
            ptr+=AMOUNT_LEN_L;
               
            break ;               
            
        case trtPrepaidRedeem:
            //curr balance
            mapPut(TRA_SISA_SALDO,ptr,AMOUNT_LEN_L);
            ptr+=AMOUNT_LEN_L;
            
            //deposit balance
            mapPut(TRA_SALDO_DEPOSIT,ptr,AMOUNT_LEN_L);
            ptr+=AMOUNT_LEN_L;
            
            //fee
            mapPut(TRA_FEE,ptr,AMOUNT_LEN_L);
            ptr+=AMOUNT_LEN_L;  
            
            //total nominal redeem
            mapPut(TRA_TOTAL_REDEEM,ptr,AMOUNT_LEN_L);
            ptr+=AMOUNT_LEN_L;                        
            break ;   
#endif        
        default:
            break;
    }

    return 0;
lblDataError:
    usrInfo(infDataError);
    return -100;
lblKO:
    return -1;        
}

/*
int parseField13(const byte* val, word len)
{
    int ret;
    byte txnType,subType;
    const byte *ptr;

    ptr = val;
    MAPGETBYTE(traTxnType,txnType,lblKO);
    switch (txnType)
    {
        case trtPembayaranPLNInquiry:
        case trtPembayaranPLN:
            ptr++; //lewati
            ret = mapPut(traBulanTagihan,ptr,1);
            CHK;
            break;
    }    
    return 0;
    
lblDataError:
    usrInfo(infDataError);
    return -100;
lblKO:
    return -1;       
}
*/
char scrollDisplay8(char (*msg)[22],byte jumlahMsg, byte jumlahBaris,char* atas, char* bawah)
{
typedef struct t_hal
{
	char* brs1;
	char* brs2;
	char* brs3;
	char* brs4;
	char* brs5;
	char* brs6;
	char* brs7;
	char* brs8;	
	
}  t_hal;

	t_hal halaman[30];
	byte idxHal=0;
	byte nHalaman;
	char key;
	int baris=0;
	byte i;
	char ret;

	nHalaman = jumlahMsg/jumlahBaris;
	if(jumlahMsg%jumlahBaris)
		nHalaman++;

//{
//    char buff[30];
//    
//    sprintf(buff,"jmM %i jmB %i h %i",jumlahMsg,jumlahBaris,nHalaman);
//    prtS(buff);
//}	

	memset(halaman,0,sizeof(halaman));	
	
	for(i = 0; i < nHalaman; i++)
	{
		if(baris == jumlahMsg) break;
		if(atas)
			halaman[i].brs1 = NULL;
		else
			halaman[i].brs1 = msg[baris++];
			
		if(baris == jumlahMsg) 
		{
		    halaman[i].brs2 = "";
		    baris++;
		    halaman[i].brs3 = "";
		    baris++;	
		    halaman[i].brs4 = "";
		    baris++;
		    halaman[i].brs5 = "";
		    baris++;	
		    halaman[i].brs6 = "";
		    baris++;			    		    
		    halaman[i].brs7 = "";
		    baris++;			    		      
            if(!bawah)
            {                
		        halaman[i].brs8 = "";
		        baris++;	                		    	    
		    }
		    break;
		}
		else
		    halaman[i].brs2 = msg[baris++];
		
		if(baris == jumlahMsg) 
		{
		    halaman[i].brs3 = "";
		    baris++;	
		    halaman[i].brs4 = "";
		    baris++;		    
		    halaman[i].brs5 = "";
		    baris++;	
		    halaman[i].brs6 = "";
		    baris++;	
		    halaman[i].brs7 = "";
		    baris++;		    	    	    
            if(!bawah)
            {                
		        halaman[i].brs8 = "";
		        baris++;	                		    	    
		    }
		    break;
		}
		else    
		    halaman[i].brs3 = msg[baris++];
		
		if(baris == jumlahMsg) 
		{
		    halaman[i].brs4 = "";
		    baris++;		    
		    halaman[i].brs5 = "";
		    baris++;	
		    halaman[i].brs6 = "";
		    baris++;	
		    halaman[i].brs7 = "";
		    baris++;		    	    	    
            if(!bawah)
            {                
		        halaman[i].brs8 = "";
		        baris++;	                		    	    
		    }
		    break;
		}
		else    
		    halaman[i].brs4 = msg[baris++];	
		    
		if(baris == jumlahMsg) 
		{    
		    halaman[i].brs5 = "";
		    baris++;	
		    halaman[i].brs6 = "";
		    baris++;	
		    halaman[i].brs7 = "";
		    baris++;		    	    	    
            if(!bawah)
            {                
		        halaman[i].brs8 = "";
		        baris++;	                		    	    
		    }
		    break;
		}
		else    
		    halaman[i].brs5 = msg[baris++];		

		if(baris == jumlahMsg) 
		{    
		    halaman[i].brs6 = "";
		    baris++;	
		    halaman[i].brs7 = "";
		    baris++;		    	    	    
            if(!bawah)
            {                
		        halaman[i].brs8 = "";
		        baris++;	                		    	    
		    }
		    break;
		}
		else    
		    halaman[i].brs6 = msg[baris++];		
		    
		if(baris == jumlahMsg) 
		{    
		    halaman[i].brs7 = "";
		    baris++;		    	    	    
            if(!bawah)
            {                
		        halaman[i].brs8 = "";
		        baris++;	                		    	    
		    }
		    break;
		}
		else    
		    halaman[i].brs7 = msg[baris++];				    	    	
				    	    			
	    if(bawah)		
			halaman[i].brs8 = NULL;
		else
		{    	
		    if(baris == jumlahMsg) 
		    {        
		        halaman[i].brs8 = "";
		        baris++;
		        break;
		    }
		    else
			    halaman[i].brs8 = msg[baris++];
		}
	}
   dspClear();
   
	if(atas)
//		dspLS(0,atas);
        display_text(0,0,atas,dsp_ALIGN_CENTER);
	if(bawah)
//		dspLS(3,bawah);
        display_text(7,0,bawah,dsp_ALIGN_CENTER);

	idxHal = 0;
	if(halaman[idxHal].brs1 != NULL)
        display_text(0,0,halaman[idxHal].brs1,dsp_ALIGN_LEFT);
	if(halaman[idxHal].brs2 != NULL)
		display_text(1,0,halaman[idxHal].brs2,dsp_ALIGN_LEFT);
	if(halaman[idxHal].brs3 != NULL)
		display_text(2,0,halaman[idxHal].brs3,dsp_ALIGN_LEFT);
	if(halaman[idxHal].brs4 != NULL)
		display_text(3,0,halaman[idxHal].brs4,dsp_ALIGN_LEFT);		
	if(halaman[idxHal].brs5 != NULL)
        display_text(4,0,halaman[idxHal].brs5,dsp_ALIGN_LEFT);	
	if(halaman[idxHal].brs6 != NULL)
        display_text(5,0,halaman[idxHal].brs6,dsp_ALIGN_LEFT);		
	if(halaman[idxHal].brs7 != NULL)
        display_text(6,0,halaman[idxHal].brs7,dsp_ALIGN_LEFT);	
	if(halaman[idxHal].brs8 != NULL)
        display_text(7,0,halaman[idxHal].brs8,dsp_ALIGN_LEFT);																					

    kbdStart(1);
    key = 0;

    while(1)
	{
		key = kbdKey();
		switch(key)
		{
			case kbdUP:
				if(idxHal == 0)
					continue;
				idxHal--;
				break;
				
			case kbdDN:
				if(idxHal == nHalaman-1)
					continue;
				idxHal++;
				break;
			case kbdF4:	
			case kbdVAL:
				ret = kbdVAL;
				goto lblEnd;
				break;
				
			case kbdF1:	
			case kbdANN:
				ret = kbdANN;
				goto lblEnd;
				break;				
					
		}
		dspClear();
    	if(atas)
            display_text(0,0,atas,dsp_ALIGN_CENTER);
    	if(bawah)
            display_text(7,0,bawah,dsp_ALIGN_CENTER);
    	if(halaman[idxHal].brs1 != NULL)
            display_text(0,0,halaman[idxHal].brs1,dsp_ALIGN_LEFT);
    	if(halaman[idxHal].brs2 != NULL)
    		display_text(1,0,halaman[idxHal].brs2,dsp_ALIGN_LEFT);
    	if(halaman[idxHal].brs3 != NULL)
    		display_text(2,0,halaman[idxHal].brs3,dsp_ALIGN_LEFT);
    	if(halaman[idxHal].brs4 != NULL)
    		display_text(3,0,halaman[idxHal].brs4,dsp_ALIGN_LEFT);		
    	if(halaman[idxHal].brs5 != NULL)
            display_text(4,0,halaman[idxHal].brs5,dsp_ALIGN_LEFT);	
    	if(halaman[idxHal].brs6 != NULL)
            display_text(5,0,halaman[idxHal].brs6,dsp_ALIGN_LEFT);		
    	if(halaman[idxHal].brs7 != NULL)
            display_text(6,0,halaman[idxHal].brs7,dsp_ALIGN_LEFT);	
    	if(halaman[idxHal].brs8 != NULL)
            display_text(7,0,halaman[idxHal].brs8,dsp_ALIGN_LEFT);			
	}
    return 0;
    
lblEnd:
    kbdStop();
    return ret;
}



char scrollDisplay(char (*msg)[21],byte jumlahMsg, byte jumlahBaris,char* atas, char* bawah)
{
typedef struct t_hal
{
	char* brs1;
	char* brs2;
	char* brs3;
	char* brs4;
}  t_hal;

	t_hal halaman[10];
	byte idxHal=0;
	byte nHalaman;
	char key;
	int baris=0;
	byte a,b,i/*,idx*/;
	char ret;
	
	nHalaman = jumlahMsg/jumlahBaris;
	if(jumlahMsg%jumlahBaris)
		nHalaman++;
	
	if(atas) a = 2;
	else a = 1;
   
   if(bawah) b = 3;
   else b = 4;

	memset(halaman,0,sizeof(halaman));	
	
	for(i = 0; i < nHalaman; i++)
	{
		if(baris == jumlahMsg) break;
		if(atas)
			halaman[i].brs1 = NULL;
		else
			halaman[i].brs1 = msg[baris++];
			
		if(baris == jumlahMsg) 
		{
		    halaman[i].brs2 = "";
		    baris++;
		    halaman[i].brs3 = "";
		    baris++;	
            if(!bawah)
            {                
		        halaman[i].brs4 = "";
		        baris++;	                		    	    
		    }
		    break;
		}
		else
		    halaman[i].brs2 = msg[baris++];
		
		if(baris == jumlahMsg) 
		{
		    halaman[i].brs3 = "";
		    baris++;	
            if(!bawah)
            {                
		        halaman[i].brs4 = "";
		        baris++;	                		    	    
		    }
		    break;
		}
		else    
		    halaman[i].brs3 = msg[baris++];
		
	    if(bawah)		
			halaman[i].brs4 = NULL;
		else
		{    	
		    if(baris == jumlahMsg) 
		    {        
		        halaman[i].brs4 = "";
		        baris++;
		        break;
		    }
		    else
			    halaman[i].brs4 = msg[baris++];
		}
	}
   dspClear();
   
	if(atas)
		dspLS(0|0x40,atas);
	if(bawah)
		dspLS(3,bawah);

	idxHal = 0;
//	for(i = a; i <= b; i++)
//	{
		if(halaman[idxHal].brs1 != NULL)
			dspLS(0,halaman[idxHal].brs1);
		if(halaman[idxHal].brs2 != NULL)
			dspLS(1,halaman[idxHal].brs2);
		if(halaman[idxHal].brs3 != NULL)
			dspLS(2,halaman[idxHal].brs3);
		if(halaman[idxHal].brs4 != NULL)
			dspLS(3,halaman[idxHal].brs4);									
//	}

//    tmrStart(0, 3 * 100);
    kbdStart(1);
    key = 0;
//    while(tmrGet(0)) {          //3 seconds to cancel
//        key = kbdKey();
//        if(key != 0)
//            break;
//    }
//    kbdStop();
//    tmrStop(0);

    while(1)
	{
		key = kbdKey();
		switch(key)
		{
			case kbdUP:
				if(idxHal == 0)
					continue;
				idxHal--;
//				for(i = a; i <= b; i++)
//				{
					if(halaman[idxHal].brs1 != NULL)
						dspLS(0,halaman[idxHal].brs1);
					if(halaman[idxHal].brs2 != NULL)
						dspLS(1,halaman[idxHal].brs2);
					if(halaman[idxHal].brs3 != NULL)
						dspLS(2,halaman[idxHal].brs3);
					if(halaman[idxHal].brs4 != NULL)
						dspLS(3,halaman[idxHal].brs4);
//				}
				break;
				
			case kbdDN:
				if(idxHal == nHalaman-1)
					continue;
				idxHal++;
//				for(i = a; i <= b; i++)
//				{
					if(halaman[idxHal].brs1 != NULL)
						dspLS(0,halaman[idxHal].brs1);
					if(halaman[idxHal].brs2 != NULL)
						dspLS(1,halaman[idxHal].brs2);
					if(halaman[idxHal].brs3 != NULL)
						dspLS(2,halaman[idxHal].brs3);
					if(halaman[idxHal].brs4 != NULL)
						dspLS(3,halaman[idxHal].brs4);
//				}				
				break;
			case kbdF4:	
			case kbdVAL:
				ret = kbdVAL;
				goto lblEnd;
				break;
				
			case kbdF1:	
			case kbdANN:
				ret = kbdANN;
				goto lblEnd;
				break;				
					
		}
	}
    return 0;
    
lblEnd:
    kbdStop();
    return ret;
}

int downloadKey(byte* msg, int msgLen)
{

   int ret;

   if(openCom()==-1)
   	return -1;

   ret = LL_Receive(prepaidCom.prm.hdl, msgLen, msg, 5*100);
	ttestall(0, 100);

   if(ret <=0)

   {
	  closeCom();      
      return -1;
   }
   closeCom();
   return ret;

}

int displayLongText(char *txtInput, int txtLen, char* baris1, char* baris2, int maxKolom)
/*
	max 2 baris;
	baris 1, dan baris 2 HARUS LEBIH BESAR ATAU SAMA dengan maxKolom + 1
	return: 1 - bila 1 baris
	         : 2 - bila 2 baris
*/
{
	memset(baris1,0,maxKolom+1);
	memset(baris2,0,maxKolom+1);
	if(txtLen > maxKolom)
	{
		memcpy(baris1,txtInput,maxKolom);
		if(txtLen > 2*maxKolom)
			memcpy(baris2,txtInput+maxKolom,maxKolom);
		else
			memcpy(baris2,txtInput+maxKolom,txtLen-maxKolom);
		return 2;
	}
	else
	{
		memcpy(baris1,txtInput,maxKolom);
		return 1;
	}
}

int briLogSave(byte jenisLog)
{
	word key;
	word idx;
	byte buf[256];
	int ret;
	word regBriLogIdx,regBriLogSize,briLogBeg, briLogEnd;
	word dimBriLog;

	// Save transaction from tra record into reversal buffer
	trcS("briLogSave Beg\n");

	switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        regBriLogIdx  = regCLogIdx;
	        regBriLogSize = regCLogSize;
	        briLogBeg = cLogBeg;
	        briLogEnd = cLogEnd;
	        dimBriLog = dimCLog;
	        break;
	    case MINI_ATM_LOG:
	        regBriLogIdx  = regMLogIdx;
	        regBriLogSize = regMLogSize;
	        briLogBeg = mLogBeg;
	        briLogEnd = mLogEnd;	
	        dimBriLog = dimMLog;       
	        break;
	    case TUNAI_LOG:
	        regBriLogIdx  = regTLogIdx;
	        regBriLogSize = regTLogSize;
	        briLogBeg = tLogBeg;
	        briLogEnd = tLogEnd;	
	        dimBriLog = dimTLog;             
	        break;
	    default:
	        return -1;
	        break;
	        
	}
	
    MAPGETWORD(regBriLogIdx,idx,lblDBA);
    mapMove(briLogBeg, idx);

	for (key = briLogBeg + 1; key < briLogEnd; key++)
	{ // Loop around each field from the record of the "log" table
		idx = (byte) (key - briLogBeg - 1);    //index within logKey array
		
		if(jenisLog == CARD_SERVICE_LOG) 
		{	
		    MAPGET(cLogKey[idx], buf, lblDBA);
		}
		else if(jenisLog == MINI_ATM_LOG)
		{    
		    MAPGET(mLogKey[idx], buf, lblDBA);
		}
		else
		{	
		    MAPGET(tLogKey[idx], buf, lblDBA);
		}
		
		ret = mapPut(key, buf, mapDatLen(key));
		CHECK(ret >= 0, lblDBA);
	}

	ret = incCard(regBriLogIdx);
	CHK;	
	
    MAPGETWORD(regBriLogIdx,idx,lblDBA);
    if(idx >= dimBriLog-1) //bila regBriLogIdx >= ukuran file maka direset ke 0
    {
        idx = 0;
        MAPPUTBYTE(regBriLogIdx,idx,lblDBA);
    }	

	MAPGETWORD(regBriLogSize,idx,lblDBA);
	if(idx <= dimBriLog-1)//bila regBriLogSize < ukuran file maka ditambah.
	{
	    ret = incCard(regBriLogSize);
	    CHK;
	}

	ret = 1;
	goto lblEnd;

lblDBA:                      // Data base access error encountered
	ret = -1;
	goto lblEnd;
lblEnd:
	trcFN("revSave: ret=%d \n", ret);
	return ret;
}


int briLogUpdate(byte jenisLog)
{
	word key, trxNo;
	byte idx;
	byte logIdx;
	byte buf[256];
	char rocRef[lenInvNum + 1];
	card rocNum, logRoc;
	int ret;
	word /*regBriLogIdx,*/regBriLogSize,briLogBeg, briLogEnd, brilogROC;
//	word dimBriLog;

	switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        regBriLogSize = regCLogSize;
	        briLogBeg = cLogBeg;
	        briLogEnd = cLogEnd;
	        brilogROC = cLogROC;
	        break;
	    case MINI_ATM_LOG:
	        regBriLogSize = regMLogSize;
	        briLogBeg = mLogBeg;
	        briLogEnd = mLogEnd;	
	        brilogROC = mLogROC;            
	        break;
	    case TUNAI_LOG:
	        regBriLogSize = regTLogSize;
	        briLogBeg = tLogBeg;
	        briLogEnd = tLogEnd;	
	        brilogROC = tLogROC;      
	        break;
	    default:
	        return -1;
	        break;
	        
	}

    MAPGETWORD(regBriLogSize, trxNo, lblDBA); //index terakhir
	MAPGET(traFindRoc, rocRef, lblDBA);
	dec2num(&rocNum, rocRef, sizeof(rocRef));

	//Search the record with ROC from traFindRoc
	for (logIdx = 0; logIdx < trxNo; logIdx++)
	{
		mapMove(briLogBeg, logIdx);
		switch(jenisLog)
		{
		    case CARD_SERVICE_LOG:
		        MAPGETCARD(cLogROC, logRoc, lblDBA);
		        break;
		    case MINI_ATM_LOG:
		        MAPGETCARD(mLogROC, logRoc, lblDBA);
		        break;
		    case TUNAI_LOG:
		        MAPGETCARD(tLogROC, logRoc, lblDBA);
		        break;
		}
		
//		MAPGETCARD(logROC, logRoc, lblDBA);
		if(logRoc == rocNum)
			break;
	}
	CHECK(logIdx <= trxNo, lblDBA);

	//mapCache(logBeg);       //AB: performance issue(later)  Enable cache on log
	for (key = briLogBeg + 1; key < briLogEnd; key++)
	{   // Loop around each field from the record of the "log" table
		idx = (byte) (key - briLogBeg - 1);    //index within logKey array
		switch(jenisLog)
		{
		    case CARD_SERVICE_LOG:
		        MAPGET(cLogKey[idx], buf, lblDBA);
		        break;
		    case MINI_ATM_LOG:
		        MAPGET(mLogKey[idx], buf, lblDBA);
		        break;
		    case TUNAI_LOG:
		        MAPGET(tLogKey[idx], buf, lblDBA);
		        break;
		}		
//		MAPGET(logKey[idx], buf, lblDBA);
		ret = mapPut(key, buf, mapDatLen(key));
		CHECK(ret >= 0, lblDBA);
	}
	//ret = mapSave(logBeg); //AB: performance issue(later)  // Log copy from RAM to DFS
	//CHECK(ret >= 0, lblDBA);

//	MAPPUTWORD(regCurrIdxPtr, logIdx, lblDBA);

	ret = 1;
	goto lblEnd;

lblDBA:                      // Data base access error encountered
	ret = -1;
	goto lblEnd;
lblEnd:
	//mapCache(-logBeg);      ////AB: performance issue(later) Disable cache on log
	trcFN("logUpdate: ret=%d #\n", ret);
	return ret;    
}

int briLogLoadByRoc(byte jenisLog)
{
	word key, trxNo;
	word idx;
	word logIdx;
	byte buf[256];
	char rocRef[lenInvNum + 1];
	card rocNum, logRoc;
	int ret;
	word briLogBeg, briLogEnd;
	card brilogROC;
	word regBriLogSize;
	card dupStan, dupROC;
	
	trcS("briLogLoad Beg\n");

	switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        regBriLogSize = regCLogSize;
	        briLogBeg = cLogBeg;
	        briLogEnd = cLogEnd;
	        brilogROC = cLogROC;
	        break;
	    case MINI_ATM_LOG:
	        regBriLogSize = regMLogSize;
	        briLogBeg = mLogBeg;
	        briLogEnd = mLogEnd;	
	        brilogROC = mLogROC;            
	        break;
	    case TUNAI_LOG:
	        regBriLogSize = regTLogSize;
	        briLogBeg = tLogBeg;
	        briLogEnd = tLogEnd;	
	        brilogROC = tLogROC;      
	        break;
	    default:
	        return -1;
	        break;
	        
	}

    MAPGETWORD(regBriLogSize, trxNo, lblDBA); //index terakhir
	MAPGET(traFindRoc, rocRef, lblDBA);
	dec2num(&rocNum, rocRef, sizeof(rocRef));

	///Search the record with ROC from traFindRoc
	for (logIdx = 0; logIdx < trxNo; logIdx++)
	{
		mapMove(briLogBeg, logIdx);
		MAPGETCARD(brilogROC, logRoc, lblDBA);
		if(logRoc == rocNum)
			break;
	}
	CHECK(logIdx < trxNo, lblTraceNotFound);
	
	//-Create Copy-
	MAPGETCARD(regSTAN, dupStan, lblDBA);
	MAPPUTCARD(regDupSTAN, dupStan, lblDBA);
//    MAPPUTCARD(regDupSTAN, dupStan+1000000, lblDBA); //@agmr - untuk perbandingan nanti
	MAPGETCARD(regInvNum, dupROC, lblDBA);
//	MAPPUTCARD(regDupInvNum, dupROC, lblDBA);
	MAPPUTCARD(regDupInvNum, dupROC+1000000, lblDBA);//@agmr - untuk perbandingan nanti

	// Save current data from tra/reg
	ret = briLogSaveCurContext(jenisLog);
	CHECK(ret >= 0, lblDBA);	
//	MAPGETCARD(regInvNum, dupROC, lblDBA); //hapus
	for (key = briLogBeg + 1; key < briLogEnd; key++) // Loop around each field from the record of the "log" table
	{
		idx = (byte) (key - briLogBeg - 1);    // Index key field
		ret = mapGet(key, buf, sizeof(buf));
		CHECK(ret >= 0, lblDBA);    // Retrieve the field transaction from "log" record
		
		if(jenisLog == CARD_SERVICE_LOG)	
		    ret = mapPut(cLogKey[idx], buf, sizeof(buf));
		else if(jenisLog == MINI_ATM_LOG)
		    ret = mapPut(mLogKey[idx], buf, sizeof(buf));
		else
		    ret = mapPut(tLogKey[idx], buf, sizeof(buf));		
		
		CHECK(ret >= 0, lblDBA);    // Copy this field inside "tra" record
	}

////++ @agmr - trx void, stan yang dikirim = stan trx terakhir +1
////           bukan stan trx yang divoid + 1
//	MAPGETCARD(regDupSTAN, dupStan, lblDBA);
//	MAPPUTCARD(regSTAN, dupStan, lblDBA);
////-- @agmr - trx void,

	ret = 1;
	goto lblEnd;

lblTraceNotFound:
	ret = 0;
	usrInfo(infTraceNotFound);
	goto lblEnd;
lblDBA:                      // Data base access error encountered
	trcErr(ret);                // Error tracing
	ret = -1;
	goto lblEnd;
lblEnd:
	//mapCache(-logBeg);      // Disable cache on log
	trcFN("logLoad: ret=%d \n", ret);
	return ret;
}

int briLogLoadByIndex(byte jenisLog,card index)
{
	word key;
	word idx;
	byte buf[256];
	int ret;
    word briLogBeg, briLogEnd, briLogDatTim;
    word regBriLogSize;

	// Retrieve transaction from a record of the log table into respective tra/reg record
	trcS("briLogLoad Beg\n");

	switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        regBriLogSize = regCLogSize;
	        briLogBeg = cLogBeg;
	        briLogEnd = cLogEnd;
	        briLogDatTim = cLogDatTim;
	        break;
	    case MINI_ATM_LOG:
	        regBriLogSize = regMLogSize;
	        briLogBeg = mLogBeg;
	        briLogEnd = mLogEnd;	
	        briLogDatTim = mLogDatTim;        
	        break;
	    case TUNAI_LOG:
	        regBriLogSize = regTLogSize;
	        briLogBeg = tLogBeg;
	        briLogEnd = tLogEnd;	
	        briLogDatTim = tLogDatTim;        
	        break;
	    default:
	        return -1;
	        break;
	}
	
//	MAPGETWORD(regBriLogIdx, trxNo, lblDBA); //index terakhir
//	if(idx
	
	
	ret = mapMove(briLogBeg, index);
	if(ret < 0)
	    goto lblTraceNotFound;

	CHECK(ret >= 0, lblDBA);    // Log copy from DFS to RAM
	for (key = briLogBeg + 1; key < briLogEnd; key++) // Loop around each field from the record of the "log" table
	{
		idx = (byte) (key - briLogBeg - 1);    // Index key field
		ret = mapGet(key, buf, sizeof(buf));
		CHECK(ret >= 0, lblDBA);    // Retrieve the field transaction from "log" record
		
		if(jenisLog == CARD_SERVICE_LOG)    		    
		    ret = mapPut(cLogKey[idx], buf, sizeof(buf));
		else if(jenisLog == MINI_ATM_LOG)
		    ret = mapPut(mLogKey[idx], buf, sizeof(buf));
		else
		    ret = mapPut(tLogKey[idx], buf, sizeof(buf));
		    		
		CHECK(ret >= 0, lblDBA);    // Copy this field inside "tra" record
	}

{
    word tmp,tmp1;
    //char tmp[20];
    
    memset(buf,0,sizeof(buf));
    mapGet(traMnuItm,&tmp,sizeof(word));
    mapGet(regInvNum,&tmp1,sizeof(word));
    sprintf(buf,"mnu=%i %i",tmp,tmp1);
    prtS(buf);
    
}
	ret = 1;
	goto lblEnd;

lblTraceNotFound:
	ret = 0;
	usrInfo(infTraceNotFound);
	goto lblEnd;
lblDBA:                      // Data base access error encountered
	trcErr(ret);                // Error tracing
	ret = -1;
	goto lblEnd;
lblEnd:
	//mapCache(-logBeg);      // Disable cache on log
	trcFN("logLoad: ret=%d \n", ret);
	return ret;
}

int briLogLoadByDate(byte jenisLog, char *dateTime)
{
	word key, trxNo;
	word idx;
	word logIdx;
	byte buf[256];
	int ret;
	word briLogBeg, briLogEnd, briLogDatTim;
	

	// Retrieve transaction from a record of the log table into respective tra/reg record
	trcS("briLogLoad Beg\n");
	
	switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        MAPGETWORD(regCLogSize, trxNo, lblDBA); //index terakhir
	        briLogBeg = cLogBeg;
	        briLogEnd = cLogEnd;
	        briLogDatTim = cLogDatTim;
	        break;
	    case MINI_ATM_LOG:
	        MAPGETWORD(regMLogSize, trxNo, lblDBA); //index terakhir
	        briLogBeg = mLogBeg;
	        briLogEnd = mLogEnd;	
	        briLogDatTim = mLogDatTim;        
	        break;
	    case TUNAI_LOG:
	        MAPGETWORD(regTLogSize, trxNo, lblDBA); //index terakhir
	        briLogBeg = tLogBeg;
	        briLogEnd = tLogEnd;	
	        briLogDatTim = tLogDatTim;        
	        break;
	    default:
	        return -1;
	        break;
	        
	}

	///Search the record with ROC from traFindRoc
	for (logIdx = 0; logIdx < trxNo; logIdx++)
	{
		mapMove(briLogBeg, logIdx);
		mapGet(briLogDatTim, buf, sizeof(buf));
        if(memcmp(buf,dateTime,8) == 0)
            break;
	}
	CHECK(logIdx < trxNo, lblTraceNotFound);

	for (key = briLogBeg + 1; key < briLogEnd; key++) // Loop around each field from the record of the "log" table
	{
		idx = (byte) (key - briLogBeg - 1);    // Index key field
		ret = mapGet(key, buf, sizeof(buf));
		CHECK(ret >= 0, lblDBA);    // Retrieve the field transaction from "log" record
		
		if(jenisLog == CARD_SERVICE_LOG)    		    
		    ret = mapPut(cLogKey[idx], buf, sizeof(buf));
		else if(jenisLog == MINI_ATM_LOG)
		    ret = mapPut(mLogKey[idx], buf, sizeof(buf));
		else
		    ret = mapPut(tLogKey[idx], buf, sizeof(buf));
		        
		CHECK(ret >= 0, lblDBA);    // Copy this field inside "tra" record
	}

	ret = 1;
	goto lblEnd;

lblTraceNotFound:
	ret = 0;
	usrInfo(infTraceNotFound);
	goto lblEnd;
lblDBA:                      // Data base access error encountered
	trcErr(ret);                // Error tracing
	ret = -1;
	goto lblEnd;
lblEnd:
	//mapCache(-logBeg);      // Disable cache on log
	trcFN("logLoad: ret=%d \n", ret);
	return ret;
}


void briViewBat(byte jenisLog, byte posisiLog)
{
/*
	posisiLog = 0 - dari awal log
			 = 1 - akhir log / last trans
			 = 2 - input/pilih ROC/invoice number	
*/
	int ret, logCount,  key = 1, mnu = 0;
	char txnTypeName[20 + 1];
	word txnType = 0, trxNum, ifVoid,mnuItm;
	byte Exp, voidTxn = 0;
//	word idx = 0;
    	word briLogBeg, briLogEnd;
    	word regBriLogSize, brilogMnuItm, brilogVoidFlag,regBriLogIdx;
    	word ptrTrx;
    	card idxCnt = 0;
    	card logRoc;
    	char rocRef[lenInvNum + 1];
    	word logIdx, idx;
    	card brilogROC,rocNum;

	trcS("briViewBat Beg\n");
	memset(rocRef, 0x00, sizeof(rocRef));
	switch(jenisLog)
	{
		case CARD_SERVICE_LOG:
			regBriLogSize = regCLogSize;
			regBriLogIdx    = regCLogIdx;
			brilogMnuItm = cLogMnuItm;
			brilogVoidFlag = cLogVoidFlag;
			brilogROC = cLogROC;
			briLogBeg = cLogBeg;
			briLogEnd = cLogEnd;
			break;
		case MINI_ATM_LOG:
			regBriLogSize = regMLogSize;
			regBriLogIdx    = regMLogIdx;
			brilogMnuItm = mLogMnuItm;
			brilogVoidFlag = mLogVoidFlag;
			brilogROC = mLogROC;
			briLogBeg = mLogBeg;
			briLogEnd = mLogEnd;
			break;
		case TUNAI_LOG:
			regBriLogSize = regTLogSize;
			regBriLogIdx    = regTLogIdx;
			brilogMnuItm = tLogMnuItm;
			brilogVoidFlag = tLogVoidFlag;
			brilogROC = tLogROC;
			briLogBeg = tLogBeg;
			briLogEnd = tLogEnd;			
			break;
		default:
			return;
	}	
//	memset(logFmtAmt, 0x00, sizeof(logFmtAmt));
	MAPGETWORD(regBriLogSize, trxNum, lblKO);
	logCount = trxNum;
	CHECK(logCount > 0, lblNoTran);

	MAPGETBYTE(appExp, Exp, lblKO);
	Exp %= 10;
	CHECK(Exp == 0 || Exp == 2 || Exp == 3, lblKO);
	
	switch(posisiLog)
	{
		case 0:
			idxCnt = 0;
			break;
		case 1:
			MAPGETWORD(regBriLogIdx, ptrTrx, lblKO);
		
			if(ptrTrx > 0)
				trxNum = ptrTrx;

			idxCnt = trxNum -1;
			break;
		case 2:
			ret = scrDlg(infEnterTrace, traFindRoc);
			CHECK(ret >= 0, lblKO);
			MAPGET(traFindRoc, rocRef, lblKO);
			dec2num(&rocNum, rocRef, sizeof(rocRef));
		
			///Search the record with ROC from traFindRoc
			for (logIdx = 0; logIdx < logCount; logIdx++)
			{
				mapMove(briLogBeg, logIdx);
				MAPGETCARD(brilogROC, logRoc, lblKO);
				if(logRoc == rocNum)
					break;
			}
			CHECK(logIdx < trxNum, lblTraceNotFound);
			idxCnt = logIdx;			
			break;
			
		default:
			goto lblKO;
	}		
	
	while(key)
	{
		mapMove(briLogBeg,  idxCnt);

		MAPGETCARD(brilogMnuItm, mnuItm, lblKO);
		getBriTransTypeName(&txnType,NULL,mnuItm);
		MAPGETBYTE(brilogVoidFlag, voidTxn, lblKO);

		trcFN("idx: %d\n", idx);
		VERIFY(rqtBeg < idx);
		VERIFY(idx < rqtEnd);
		mapMove(rqsBeg, (word) (idx - 1));

		if(voidTxn)
			ifVoid = rqsVDisp;
		else
			ifVoid = rqsDisp;

		MAPGET(ifVoid, txnTypeName, lblKO);

//        MAPPUTSTR(traTypeName1, txnTypeName, lblKO);

		switch (mnu)
		{
			case 0:
				//inf = infViewBatch;
				viewBatch1(jenisLog,1);
				break;
			case 1:
				//inf = infViewBatch2;
				viewBatch2(jenisLog,1);
				break;
//			case 2:
//				inf = infViewBatch3;
//				break;
		}
//		ret = usrInfo(inf);
//
//		trcFN("ret %d\n", ret);
        	
        ret = tmrStart(0, 30 * 100);
        CHECK(ret >= 0, lblKO);                   //one minute timeout
        ret = kbdStart(1);
        CHECK(ret >= 0, lblKO);
        key = 0;
        while(tmrGet(0)) {
            key = kbdKey();     //capture a key
            if(key)
                break;
        }
        ret = kbdStop();		
		
		switch (key)
		{
#ifdef __TELIUM__
			case kbdF1:
				idxCnt--;
				break;
			case kbdF4:
				idxCnt++;
				break;
			case kbdUP:
				mnu--;
				break;
			case kbdDN:
				mnu++;
				break;
#else

			case kbdDN:          //PREV
				idxCnt--;
				break;
			case kbdUP:          //MORE
				mnu++;
				break;
			case kbdF3:          //NEXT
				idxCnt++;
				break;
#endif

			case kbdANN:         //STOP
			case 0:              //TIMEOUT
				goto lblEnd;

		}
		CHECK(key >= 0, lblKO);

//		if((mnu > 2))
//			mnu = 0;
//		else if(mnu < 0)
//			mnu = 2;
		if((mnu > 1))
			mnu = 0;
		else if(mnu < 0)
			mnu = 1;

		if(idxCnt < 0)
			idxCnt = logCount - 1;
		else if(idxCnt >= logCount)
			idxCnt = 0;
	}

	CHECK(ret >= 0, lblKO);
	goto lblEnd;

lblNoTran:
	usrInfo(infNoTran);
	goto lblEnd;
lblTraceNotFound:
	usrInfo(infTraceNotFound);
	goto lblEnd;	
lblKO:
	usrInfo(infProcessingError);
	goto lblEnd;
lblEnd:
	trcS("admViewBat End\n");
}
 
int viewBatch1(byte jenisLog,byte flag)
{
	char buf[50], buf1[50];
	card invNum, briLogROC, briLogAmt;
	int ret;
	word mnuItem;
	
	switch(jenisLog)
	{
		case CARD_SERVICE_LOG:
			strcpy(buf,"CARD SERVICE");
			briLogROC = cLogROC;
			briLogAmt = cLogTraAmt;
			MAPGETCARD(cLogMnuItm, mnuItem, lblDBA);
			break;
		case MINI_ATM_LOG:
			strcpy(buf,"MINI ATM");
			briLogROC = mLogROC;
			briLogAmt = mLogTraAmt;
			MAPGETCARD(mLogMnuItm, mnuItem, lblDBA);
			break;
		case TUNAI_LOG:
			strcpy(buf,"TUNAI");
			briLogROC = tLogROC;
			briLogAmt = tLogTraAmt;
			MAPGETCARD(tLogMnuItm, mnuItem, lblDBA);
			break;
	    case NORMAL_LOG:
	        if(flag == 0)
	            strcpy(buf,"VIEW TXN");
	        else
	            strcpy(buf,"VIEW BATCH");
	        briLogROC = logROC;
	        briLogAmt = logTraAmt;
	        MAPGETCARD(logMnuItm, mnuItem, lblDBA);
	        break;
	    
	}
	dspClear();
	//judul
	display_text(0,0,buf,dsp_ALIGN_CENTER);
	
	//invoice number / ROC
	MAPGETCARD(briLogROC,invNum,lblDBA);
	memset(buf,0,sizeof(buf));
	sprintf(buf,"LOG:       REF %06lu",invNum);
	display_text(3,0,buf,dsp_ALIGN_LEFT);
	
	//Jenis transaksi
	memset(buf,0,sizeof(buf));
	getBriTransTypeName(NULL, buf, mnuItem); //@agmr BRI2
//	getBriTransName(buf, mnuItem);
	display_text(4,0,buf,dsp_ALIGN_LEFT);
		
	//Amount
	memset(buf,0,sizeof(buf));
	memset(buf1,0,sizeof(buf1));
	ret = mapGet(briLogAmt,buf1,sizeof(buf1));
//	if(strlen(buf1)>=2)
//	    buf1[strlen(buf1)-2] = 0;
	if(ret <0)
		goto lblDBA;
    strcpy(buf,"Rp. ");
    fmtAmt(buf+4,buf1,0,",.");
    display_text(5,0,buf,dsp_ALIGN_RIGHT);
      
    //PREV NEXT
    if(flag == 0)
        display_text(7,0,"MORE",dsp_ALIGN_CENTER);    
    else
        display_text(7,0,"PREV     MORE    NEXT",dsp_ALIGN_CENTER);
    goto lblEnd;
	
lblDBA:
	return -1;
lblEnd:
	return 1;	
	
}

int viewBatch2(byte jenisLog, byte flag)
{
	char buf[50], buf1[50];
	word briLogAutCode, briLogPan, briLogDatTim,briLogExpDat;
	int ret;
	
	switch(jenisLog)
	{
		case CARD_SERVICE_LOG:
			strcpy(buf,"CARD SERVICE");
			briLogAutCode = cLogAutCod;
			briLogPan = cLogPan;
			briLogDatTim = cLogDatTim;
			briLogExpDat = cLogExpDat;
			break;
		case MINI_ATM_LOG:
			strcpy(buf,"MINI ATM");
			briLogAutCode = mLogAutCod;
			briLogPan = mLogPan;
			briLogDatTim = mLogDatTim;
			briLogExpDat = mLogExpDat;
			break;
		case TUNAI_LOG:
			strcpy(buf,"TUNAI");
			briLogAutCode = tLogAutCod;
			briLogPan = tLogPan;
			briLogDatTim = tLogDatTim;
			briLogExpDat = tLogExpDat;
			break;
	    case NORMAL_LOG:
	    	if(flag == 0)
	            strcpy(buf,"VIEW TXN");
	        else
	            strcpy(buf,"VIEW BATCH");
			briLogAutCode = logAutCod;
			briLogPan = logPan;
			briLogDatTim = logDatTim;
			briLogExpDat = logExpDat;
			break;	        
	        
	}
	dspClear();
	//judul
	display_text(0,0,buf,dsp_ALIGN_CENTER);
	
	//APPROVAL CODE
	memset(buf,0,sizeof(buf));
	memset(buf1,0,sizeof(buf1));
	ret = mapGet(briLogAutCode,buf1,sizeof(buf1));
	if(ret < 0)
	    goto lblDBA;
		    
	sprintf(buf,"APPROVAL CODE: %s",buf1);
	display_text(2,0,buf,dsp_ALIGN_LEFT);
	
	//PAN
	memset(buf,0,sizeof(buf));
	ret = mapGet(briLogPan,buf,sizeof(buf));
	if(ret < 0) 
		goto lblDBA;
	display_text(3,0,buf,dsp_ALIGN_LEFT);
		
	//EXP DATE
	memset(buf,0,sizeof(buf));
	memset(buf1,0,sizeof(buf1));	
	ret = mapGet(briLogExpDat,buf1,sizeof(buf1));
	if(ret < 0) 		
		goto lblDBA;
       sprintf(buf,"EXP. DATE:      %c%c/%c%c",buf1[2],buf1[3],buf1[0],buf1[1]);
       display_text(4,0,buf,dsp_ALIGN_LEFT);
       
	//DATE TIME	
	memset(buf,0,sizeof(buf));
	memset(buf1,0,sizeof(buf1));
	ret = mapGet(briLogDatTim,buf1,sizeof(buf1));
	if(ret <0)
		goto lblDBA;
 
	sprintf(buf,"%c%c/%c%c/%c%c%c%c   %c%c:%c%c:%c%c",buf1[6],buf1[7],buf1[4],buf1[5],buf1[0],buf1[1],
														buf1[2],buf1[3],buf1[8],buf1[9],buf1[10],buf1[11],
														buf1[12],buf1[13]);
      display_text(5,0,buf,dsp_ALIGN_LEFT);
      
      //PREV NEXT
    if(flag == 0)
        display_text(7,0,"MORE",dsp_ALIGN_CENTER);    
    else
        display_text(7,0,"PREV     MORE    NEXT",dsp_ALIGN_CENTER);
    goto lblEnd;

lblDBA:
	return -1;
lblEnd:
	return 1;		
}

int briLogCalcTotal(byte jenisLog, TOTAL_T *total, char* dateTime)
{
	// Operation variables
	char txnAmt[lenAmt + 1];
	word curMnuItem, trxNum;
	int ret = 0, ctr = 0;
	
	word regBriLogSize;
	word briLogBeg, briLogMnuItm, briLogTraAmt, briLogDatTim;
	byte tIndex, tanda=0;
//	char buf[lenAmt+1];
	char txnDateTime[lenDatTim+1];

	trcS("briLogCalcTot: Beg\n");
    
    switch(jenisLog)
    {
        case CARD_SERVICE_LOG:
            regBriLogSize = regCLogSize;
            briLogBeg = cLogBeg;
            briLogMnuItm = cLogMnuItm;
            briLogTraAmt = cLogTraAmt;
            briLogDatTim = cLogDatTim;
            break;
        case MINI_ATM_LOG:
            regBriLogSize = regMLogSize;
            briLogBeg = mLogBeg;
            briLogMnuItm = mLogMnuItm;   
            briLogTraAmt = mLogTraAmt;  
            briLogDatTim = mLogDatTim;       
            break;
        case TUNAI_LOG:
            regBriLogSize = regTLogSize;
            briLogBeg = tLogBeg;
            briLogMnuItm = tLogMnuItm;    
            briLogTraAmt = tLogTraAmt; 
            briLogDatTim = tLogDatTim;       
            break;
        case BRIZZI_LOG:
            regBriLogSize = regTrxNo;
            briLogBeg = logBeg;
            briLogMnuItm = logMnuItm;    
            briLogTraAmt = logTraAmt; 
            briLogDatTim = logDatTim;       
            break;            
    }
    
	//Get current transaction number
	MAPGETWORD(regBriLogSize, trxNum, lblKO);

	//Computation loop
	for (ctr = 0; ctr < trxNum; ctr++)
	{
		/// Get amount and transaction type from LOG
		mapMove(briLogBeg, ctr);
		MAPGETWORD(briLogMnuItm, curMnuItem, lblKO);
		MAPGET(briLogTraAmt, txnAmt, lblKO);
		MAPGET(briLogDatTim, txnDateTime,lblKO);
	    if(dateTime != NULL)
	    {
	        if(memcmp(dateTime,txnDateTime,8) != 0)
	            continue;
	    }
        tanda=1;
		//Determine index of equivalent menu item transaction
		switch (curMnuItem)
		{
		    //card service
			case mnuGantiPIN:
			    tIndex = GANTI_PIN;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"UBAH PIN");
				break;
			case mnuAktivasiKartu:
			    tIndex = AKTIVASI_KARTU;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"AKTIVASI KARTU");
				break;
			case mnuRenewalKartu:
			    tIndex = RENEWAL_KARTU;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"RENEWAL KARTU");
				break;
			case mnuGantiPasswordSPV:
			    tIndex = GANTI_PASSWORD_SPV;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"UBAH PASSWORD SPV");
				break;
			case mnuReissuePIN:
			    tIndex = REISSUE_PIN;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"REISSUE PIN");
				break;
		    
		    //mini atm
			case mnuInfoSaldo:
			    tIndex = INFO_SALDO;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"INFO SALDO");
				break;
			case mnuInfoSaldoBankLain:
			    tIndex = INFO_SALDO_BANK_LAIN;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"INFO SALDO BANK LAIN");
				break;
			case mnuTransferSesamaBRI:
			    tIndex = TRANSFER_SESAMA_BRI;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"TRANSFER SESAMA BRI");
				break;
			case mnuTransferAntarBank:
			    tIndex = TRANSFER_ANTAR_BANK;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"TRANSFER ANTAR BANK");
				break;
			case mnuPembayaranPLN:
			    tIndex = PEMBAYARAN_PLN;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"PEMBAYARAN PLN");
				break;
            case mnuPembayaranCicilanFIF: 
            case mnuPembayaranCicilanBAF: 
            case mnuPembayaranCicilanOTO: 
            case mnuPembayaranCicilanFinansia: 
            case mnuPembayaranCicilanVerena: 
            case mnuPembayaranCicilanWOM: 
			    tIndex = PEMBAYARAN_CICILAN;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"CICILAN");
				break;
            case mnuPembayaranSimpati50:
            case mnuPembayaranSimpati100: 
            case mnuPembayaranSimpati150: 
            case mnuPembayaranSimpati200: 
            case mnuPembayaranSimpati300: 
            case mnuPembayaranSimpati500: 
            case mnuPembayaranSimpati1000: 
			    tIndex = PEMBAYARAN_SIMPATI;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"ISI ULANG SIMPATI/AS");
				break;
            case mnuPembayaranMentari50:
            case mnuPembayaranMentari100: 
            case mnuPembayaranMentari250: 
            case mnuPembayaranMentari500: 
            case mnuPembayaranMentari1000: 
			    tIndex = PEMBAYARAN_MENTARI;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"ISI ULANG MENTARI");
				break;
            case mnuPembayaranIm325:
            case mnuPembayaranIm350: 
            case mnuPembayaranIm375: 
            case mnuPembayaranIm3100: 
            case mnuPembayaranIm3150: 
            case mnuPembayaranIm3200: 
            case mnuPembayaranIm3500: 
            case mnuPembayaranIm31000: 
			    tIndex = PEMBAYARAN_IM3;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"ISI ULANG IM3");
				break;

            case mnuPembayaranXl25:
            case mnuPembayaranXl50:
            case mnuPembayaranXl75:
            case mnuPembayaranXl100:
            case mnuPembayaranXl150:
            case mnuPembayaranXl200:
            case mnuPembayaranXl300:
            case mnuPembayaranXl500:
			    tIndex = PEMBAYARAN_XL;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"ISI ULANG PULSA XL");
				break;
		    case mnuPembayaranHalo:
		        tIndex = PEMBAYARAN_HALO;
		        if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"BAYAR KARTU HALO");
		        break;
		    case mnuPembayaranMatrix:
		        tIndex = PEMBAYARAN_MATRIX;
		        if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"MATRIX");
		        break;																																																																															
            case mnuPembayaranZakatYBM:
            case mnuPembayaranZakatDhuafa:
		        tIndex = PEMBAYARAN_ZAKAT;
		        if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"PEMBAYARAN ZAKAT");                
                break;
                
            case mnuPembayaranInfaqYBM:
            case mnuPembayaranInfaqDhuafa:
		        tIndex = PEMBAYARAN_INFAQ;
		        if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"PEMBAYARAN INFAQ");                 
                break;   
			/*Changed By Ali*/
			case mnuPembayaranTvInd:
			case mnuPembayaranTvOkTv:
			case mnuPembayaranTvTopTv:
				tIndex = PEMBAYARAN_TV;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"PEMBAYARAN TV BERLANGGANAN");
				break;
			case mnuPembayaranTelkom:
				tIndex = PEMBAYARAN_TELKOM;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"PEMBAYARAN TELKOM");
				break;
			case mnuRegistrasiTrxPulsa:
				tIndex = TRX_PULSA;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"TRX PHONE TRANSFER");
				break;
			case mnuRegistrasiTrxTransfer:
				tIndex = TRX_TRANSFER;
			    if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"TRX PHONE PULSA");
				break;
			/*End of Changed By Ali*/                
                           
            //tunai
            case mnuTarikTunai:
                tIndex = TARIK_TUNAI;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"TARIK TUNAI");
                break;
            case mnuVoidTarikTunai:
                tIndex = VOID_TARIK_TUNAI;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"VOID TARIK TUNAI");
                break;                
            case mnuSetorPinjaman:
                tIndex = SETOR_PINJAMAN;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"SETORAN PINJAMAN");
                break;
            case mnuSetorSimpanan:
                tIndex = SETOR_SIMPANAN;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"SETORAN SIMAPANAN");
                break;

#ifdef PREPAID
            case mnuPrepaidPayment:
            	tIndex = PREPAID_PAYMENT;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"PEMBAYARAN");
                break;
                
            case mnuAktivasiDeposit:
            	tIndex = AKTIVASI_DEPOSIT;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"AKTIVASI DEPOSIT");
                break;
                
            case mnuPrepaidRedeem:
            	tIndex = PREPAID_REDEEM;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"REDEEM");
                break;
                               
            case mnuTopUpDeposit:
            	tIndex = TOPUP_DEPOSIT;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"TOP UP DEPOSIT");
                break;

            case mnuTopUpOnline:
            	tIndex = TOPUP_ONLINE;
                if(total[tIndex].transName[0] == 0)
			        strcpy(total[tIndex].transName,"TOP UP ONLINE");
                break;
#endif

			default:
				goto lblKO;
				break;
		}
        addStr(total[tIndex].totAmt,total[tIndex].totAmt,txnAmt);
        total[tIndex].count++;
	}
    
    if(tanda == 0)
        goto lblNoTransaction;
    
	ret = 1;
	goto lblEnd;

lblNoTransaction:
    ret = 0;
    usrInfo(infNoTran);
    goto lblEnd;
lblKO:
    ret = -1;
	usrInfo(infProcessingError);
	goto lblEnd;

lblEnd:
	trcFN("logCalcTot: ret=%d \n", ret);
	return ret;
}

// @@OA - mulai
int strFormatDatTimBRI(char* datTim, char* fmtDatTim) {
    int ret;
    card month;
    char datetime[lenDatTim + 1];
    char newdatetime[lenDatTim + 1];
    char fmtdatetime[lenDatTim + 1];
    const char *bgd = " ";
    const char *ctl = "ghabcdijkl";

	memcpy(datetime, datTim, lenDatTim);
    memset(newdatetime, 0, sizeof(newdatetime));
    memset(fmtdatetime, 0, sizeof(fmtdatetime));
    trcFS("datetime: %s\n", datetime);

    dec2num(&month, &datetime[4], 2);
    ret = fmtMut(newdatetime, (const char *) datetime, bgd, ctl);

    CHECK(month <= 12, lblKO);
    CHECK(month > 0, lblKO);

    MAPGET(monSpr + month, fmtdatetime, lblKO);
    memcpy(&fmtdatetime[3], newdatetime, strlen(newdatetime));
    trcFS("fmtdatetime: %s\n", fmtdatetime);
    //MAPPUTSTR(traFmtDate, fmtdatetime, lblKO);
    memcpy(fmtDatTim, fmtdatetime, strlen(fmtdatetime));
    CHECK(ret > 0, lblKO);
    goto lblEnd;
  lblKO:
    ret = -1;
  lblEnd:
    return ret;
}
// @@OA - selesai

int strFormatDatTimBRI2(char* datTim, char* fmtDatTim) {
    int ret;
    card month;
//    char datetime[lenDatTim + 1];
//    char newdatetime[lenDatTim + 1];
//    char fmtdatetime[lenDatTim + 1];
//    const char *bgd = " ";
//    const char *ctl = "ghabcdijkl";
//    char buf[50];
    char *ptr;

//	memcpy(datetime, datTim, lenDatTim);
//    memset(newdatetime, 0, sizeof(newdatetime));
//    memset(fmtdatetime, 0, sizeof(fmtdatetime));
//    memset(buf,0,sizeof(buf));
    
    trcFS("datetime: %s\n", datetime);

    ptr = fmtDatTim;
    memcpy(ptr,datTim+6,2);
    ptr+=2;
    *ptr++ = 0x20;
    
    dec2num(&month, datTim+4, 2);
//    ret = fmtMut(newdatetime, (const char *) datTim, bgd, ctl);

    CHECK(month <= 12, lblKO);
    CHECK(month > 0, lblKO);

    MAPGET(monSpr + month, ptr, lblKO);
    ptr+=3;
    
    *ptr++ = 0x20;
    memcpy(ptr,datTim,4);
    ptr+=4;
    
    *ptr++ = 0x20;
    
    memcpy(ptr,datTim+8,2);
    ptr+=2;
    *ptr++ = ':';
    
    memcpy(ptr,datTim+10,2);
    ptr+=2;
    *ptr++ = ':';    
    
    memcpy(ptr,datTim+12,2);
    ptr+=2;
    
    
//    memcpy(&fmtdatetime[3], newdatetime, strlen(newdatetime));
//    trcFS("fmtdatetime: %s\n", fmtdatetime);
//    //MAPPUTSTR(traFmtDate, fmtdatetime, lblKO);
//    memcpy(fmtDatTim, fmtdatetime, strlen(fmtdatetime));
//    CHECK(ret > 0, lblKO);
    goto lblEnd;
  lblKO:
    ret = -1;
  lblEnd:
    return ret;
}

int briLogPrintTotal(byte jenisLog, char* dateTime)
{
//    TOTAL_T total[30];
    TOTAL_T total[tTotalEnd];
    int ret;
    int i;
    char buf[50], buf2[30], buf3[30], buf4[30];
    char dt[20]; //current date time
    card tmp;
    char waktu[20];

	memset(waktu,0,sizeof(waktu));
    memset(total,0,sizeof(total));
	memset(dt,0,sizeof(dt));
	//getDateTime(char *YYMMDDhhmmss)
	getDateTime(dt+2); 
	dec2num(&tmp,dt+2,2);
	if(tmp < 70)
	    memcpy(dt,"20",2);
	else
	    memcpy(dt,"19",2);	
    	
    for(i=0;i<tTotalEnd;i++)
    {
        memset((total[i]).totAmt,'0',lenTotAmt);
    }
    
    if(*dateTime == 0) //dateTime yang di kirim = "" -> maka diartikan tanggal sekarang
    {
       memcpy(waktu,dt,14);
    }
    else if(dateTime != NULL)
    {
    	memcpy(waktu,dateTime,14);
    }

    ret = briLogCalcTotal(jenisLog, total, waktu);
    if(ret == -1)
        goto lblKO;
	
    if(ret == 0)
    {
        ret = 0;
        goto lblEnd;
    }
           
	memset(buf,0,sizeof(buf));
	sprintf(buf,"REPORT DATE: %c%c/%c%c/%c%c%c%c     %c%c:%c%c:%c%c",
	            dt[6],dt[7],dt[4],dt[5],dt[0],dt[1],dt[2],dt[3],dt[8],dt[9],dt[10],dt[11],dt[12],dt[13]);
	MAPPUTSTR(rptBuf1,buf,lblKO);
	
	strcpy(buf,"SUMMARY REPORT");
	MAPPUTSTR(rptJudul,buf,lblKO);
	ret = rptReceipt(rloTotalSummaryReport);
	CHECK(ret >= 0, lblKO);
	
//	if(memcmp(dateTime,dt,8) != 0)
	{
	    memset(buf,0,sizeof(buf));
	    sprintf(buf,"TRANSACTION DATE: %c%c/%c%c/%c%c%c%c",
	            dt[6],dt[7],dt[4],dt[5],dt[0],dt[1],dt[2],dt[3]); 
	    prtES("\x1B\x20",buf);
	}   
	prtES("\x1B\x20","------------------------------------------------");
	prtES("\x1B\x20","                     COUNT                 TOTAL");
	prtES("\x1B\x20","------------------------------------------------");
	for(i=0;i<tTotalEnd;i++)
	{
	    if(total[i].count <= 0)
	        continue;
	    memset(buf3,0, sizeof(buf3));
	    memset(buf3,' ', 20);
	    memcpy(buf3,total[i].transName, strlen(total[i].transName));
	    memset(buf2,0,sizeof(buf2));
		fmtAmt(buf2, total[i].totAmt, 0, ",.");
	    memset(buf4,0, sizeof(buf4));
	    memset(buf4,' ', 17);
	    memcpy(buf4+17-strlen(buf2),buf2, strlen(buf2));
	    memset(buf,0,sizeof(buf));
	    sprintf(buf,"%s %04i  Rp. %s",buf3, total[i].count, buf4);
	    prtES("\x1B\x20",buf);
	}
	prtES("\x1B\x20","------------------------------------------------");
	ret = rptReceipt(rloReceiptFeed);
	CHECK(ret >= 0, lblKO);
	
	ret = 1;
	goto lblEnd;
	
lblKO:
    ret = -1;
lblEnd:        
    return ret;
}


void printDetail(byte jenisLog,byte tanda,DETAIL_TRANS_T *detail)
{
/*
    tanda = 0 -> print header + detail
    tanda = 1 -> print detail saja
typedef struct
{
    char amt[lenAmt+1];
    char pan[lenPan+1];
    char txnDateTime[lenDatTim+1];
    char refNum[lenRrn+1];
    char expDat[lenExpDat+1];
    char appCode[lenAutCod+1];
    char transName[21];
    card stan;
    card roc; // invoice num = TRACE
    
    //card service log
    char nomorKartuPetugas[lenNomorKartuPetugas+1];
    char nomorKartuLama[lenNomorKartuLama+1];        
}DETAIL_TRANS_T;
    
*/    
	char buf[48+1];
	char buf2[48+1];
	int ret;
	
	if(tanda == 0)
	{
		char datTim [lenDatTim+1];
		char fmtDatTim [lenDatTim+1];
		
		getDateTime(datTim+2);
		memcpy(datTim, "20", 2);
		strFormatDatTimBRI(datTim, fmtDatTim);
		MAPPUTSTR(rptBuf1,fmtDatTim,lblKO);
		memset(fmtDatTim,0, sizeof(fmtDatTim));
		strFormatDatTimBRI(detail->txnDateTime, fmtDatTim);
		MAPPUTSTR(rptBuf2,fmtDatTim,lblKO);
		
		MAPPUTSTR(rptJudul,"DETAIL REPORT",lblKO);
		ret = rptReceipt(rloDetailReportHeader);
		CHECK(ret >= 0, lblKO);
	}
	MAPPUTSTR(rptBuf1,detail->txnDateTime,lblKO);
	MAPPUTSTR(rptBuf2,detail->appCode,lblKO);
	MAPPUTSTR(rptBuf3,detail->refNum,lblKO);
	memset(buf,0,sizeof(buf));
	sprintf(buf,"%06i", (int)detail->roc);
	MAPPUTSTR(rptBuf4,buf,lblKO);
	memset(buf,0,sizeof(buf));
	sprintf(buf,"%06i", (int)detail->stan);
	MAPPUTSTR(rptBuf5,buf,lblKO);
	MAPPUTSTR(rptBuf8,detail->transName,lblKO);
	if(jenisLog == CARD_SERVICE_LOG)
	{
		MAPPUTSTR(rptBuf9," ",lblKO);
		memset(buf, 0, sizeof(buf));
		MAPPUTSTR(rptBuf6,buf,lblKO);
		MAPPUTSTR(rptBuf7,buf,lblKO);
		memset(buf, ' ', 19);
		memcpy(buf+ 19-strlen(detail->nomorKartuPetugas) ,detail->nomorKartuPetugas, strlen(detail->nomorKartuPetugas));
		memset(buf2, 0, sizeof(buf2));
		memcpy(buf2,"KARTU CS                     ", 29);
		memcpy(buf2+29,buf,19);
		MAPPUTSTR(rptBuf10,buf2,lblKO);
		memset(buf, 0, sizeof(buf));
		memset(buf, ' ', 19);
		memcpy(buf+ 19-strlen(detail->pan) ,detail->pan, strlen(detail->pan));
		memset(buf2, 0, sizeof(buf2));
		memcpy(buf2,"KARTU NASABAH                ", 29);
		memcpy(buf2+29,buf,19);
		MAPPUTSTR(rptBuf11,buf2,lblKO);
	}else
	{
		memset(buf, 0, sizeof(buf));
		MAPPUTSTR(rptBuf10,buf,lblKO);
		MAPPUTSTR(rptBuf11,buf,lblKO);
		MAPPUTSTR(rptBuf6,detail->pan,lblKO);
		memset(buf,0, sizeof(buf));
		sprintf(buf,"EXP   :            %c%c/%c%c", detail->expDat[0], detail->expDat[1],detail->expDat[2],detail->expDat[3]);
		MAPPUTSTR(rptBuf7,buf,lblKO);
		memset(buf,0,sizeof(buf));
		strcpy(buf,"Rp. ");
		fmtAmt(buf+4, detail->amt, 0, ",.");
		MAPPUTSTR(rptBuf9,buf,lblKO);
	}
	rptReceipt(rloDetailData);

lblKO:
	return;
}

int briLogPrintDetail(byte jenisLog, char* dateTime)
{
	// Operation variables
	word curMnuItem, trxNum;
	int ret = 0, ctr = 0;
	word regBriLogSize, briLogBeg, briLogMnuItm, briLogTraAmt, briLogDatTim;
	word briLogPan,briLogROC,briLogExpDat,briLogAppCode,briLogSTAN;
	word briLogRrn;
	DETAIL_TRANS_T detail;
	byte tanda = 0;
	char dt[20]; //current date time
	card tmp;
	char waktu[20];
		
	trcS("briLogPrintDetail: Beg\n");
	
	memset(waktu,0,sizeof(waktu));
	memset(dt,0,sizeof(dt));
	//getDateTime(char *YYMMDDhhmmss)
	getDateTime(dt+2); 
	dec2num(&tmp,dt+2,2);
	if(tmp < 70)
	    memcpy(dt,"20",2);
	else
	    memcpy(dt,"19",2);	
    	

    if(dateTime[0] == 0) //dateTime yang di kirim = "" -> maka diartikan tanggal sekarang
    {
       memcpy(waktu,dt,14);
    }
    else
    {
    	memcpy(waktu,dateTime,14);
    }
    
    switch(jenisLog)
    {
        case CARD_SERVICE_LOG:
            regBriLogSize   = regCLogSize;
            briLogBeg       = cLogBeg;
            briLogMnuItm    = cLogMnuItm;    
            briLogDatTim    = cLogDatTim;
            briLogPan       = cLogPan;
            briLogTraAmt    = cLogTraAmt;
            briLogRrn       = cLogRrn;
            briLogSTAN      = cLogSTAN;
            briLogROC       = cLogROC;
            briLogAppCode   = cLogAutCod;
            briLogExpDat    = cLogExpDat;
            break;
        case MINI_ATM_LOG:
            regBriLogSize   = regMLogSize;
            briLogBeg       = mLogBeg; 
            briLogMnuItm    = mLogMnuItm;    
            briLogDatTim    = mLogDatTim;   
            briLogPan       = mLogPan;
            briLogTraAmt    = mLogTraAmt;
            briLogRrn       = mLogRrn;
            briLogSTAN      = mLogSTAN;
            briLogROC       = mLogROC;
            briLogAppCode   = mLogAutCod;
            briLogExpDat    = mLogExpDat;                
            break;
        case TUNAI_LOG:
            regBriLogSize   = regTLogSize;
            briLogBeg       = tLogBeg;
            briLogMnuItm    = tLogMnuItm;    
            briLogDatTim    = tLogDatTim; 
            briLogPan       = tLogPan;
            briLogTraAmt    = tLogTraAmt;
            briLogRrn       = tLogRrn;
            briLogSTAN      = tLogSTAN;
            briLogROC       = tLogROC;
            briLogAppCode   = tLogAutCod;
            briLogExpDat    = tLogExpDat;
            break;
       default:
            goto lblKO;
    }
    
	//Get current transaction number
	MAPGETWORD(regBriLogSize, trxNum, lblKO);

	//Computation loop
	for (ctr = 0; ctr < trxNum; ctr++)
	{
	    memset(&detail,0,sizeof(detail));
		mapMove(briLogBeg, ctr);
		MAPGETWORD(briLogMnuItm, curMnuItem, lblKO);
		MAPGET(briLogDatTim, detail.txnDateTime,lblKO);
		MAPGET(briLogPan,detail.pan,lblKO);
		MAPGET(briLogTraAmt,detail.amt,lblKO);
		MAPGET(briLogRrn,detail.refNum,lblKO);
		MAPGETCARD(briLogSTAN,detail.stan,lblKO);
		MAPGETCARD(briLogROC,detail.roc,lblKO);
		MAPGET(briLogAppCode,detail.appCode,lblKO);
		MAPGET(briLogExpDat,detail.expDat,lblKO);
       
        switch(jenisLog)
        {
            case CARD_SERVICE_LOG:
                MAPGET(cLogNomorKartuPetugas, detail.nomorKartuPetugas, lblKO);
                break;
        }	    

	if(dateTime != NULL)
	{
	    if(memcmp(waktu,detail.txnDateTime,8) != 0)
	        continue;
	}
        getBriTransTypeName(NULL, detail.transName, curMnuItem); //@agmr BRI2
//		getBriTransName(detail.transName,curMnuItem);
		printDetail(jenisLog,tanda,&detail);		
        
        tanda=1;
	}

    if(tanda == 0)
        goto lblNoTransaction;
    
	prtES("\x1B\x20","------------------------------------------------");
	ret = rptReceipt(rloReceiptFeed);
	CHECK(ret >= 0, lblKO);

	ret = 1;
	goto lblEnd;

lblNoTransaction:
    ret = 0;
    usrInfo(infNoTran);
    goto lblEnd;
lblKO:
    ret = -1;
	usrInfo(infProcessingError);
	goto lblEnd;

lblEnd:
	trcFN("logCalcTot: ret=%d \n", ret);
	return ret;    
}

void getBriTransTypeName(word *txnType, char *transName, word key)
{
/*
    transName harus lebih besar dari 21 byte
    jenis : 1 - berdasarkan menu
    jenis : 2 - berdasarkan tipe transaksi
*/  
    word type;
    char name[30];
    byte voidTxn;
    
    memset(name,0,sizeof(name));
	switch (key)
	{
		case mnuInfoSaldo:
			strcpy(name,"INFO SALDO");
			type = trtInfoSaldo;
			break;
		case mnuInfoSaldoBankLain:
			strcpy(name,"INFO SALDO BANK LAIN");
			type = trtInfoSaldoBankLain;
			break;
		case mnuTransferSesamaBRI:
			strcpy(name,"TRANSFER SESAMA BRI");
			type = trtTransferSesamaBRI;
			break;
		case mnuTransferAntarBank:
			strcpy(name,"TRANSFER ANTAR BANK");
			type = trtTransferAntarBank;
			break;
		case mnuPembayaranPLN:
			strcpy(name,"PEMBAYARAN PLN");
			type = trtPembayaranPLN;
			break;
		case mnuPembayaranCicilanFIF:
			strcpy(name,"PEMBAYARAN FIF");
			type = trtPembayaranCicilan;
			break;
		case mnuPembayaranCicilanBAF:
			strcpy(name,"PEMBAYARAN BAF");
			type = trtPembayaranCicilan;
			break;
		case mnuPembayaranCicilanOTO:
			strcpy(name,"PEMBAYARAN OTO");
			type = trtPembayaranCicilan;
			break;
		case mnuPembayaranCicilanFinansia:
			strcpy(name,"PEMBAYARAN FINANSIA");
			type = trtPembayaranCicilan;
			break;
		case mnuPembayaranCicilanVerena:
			strcpy(name,"PEMBAYARAN VERENA");
			type = trtPembayaranCicilan;
			break;
		case mnuPembayaranCicilanWOM:
			strcpy(name,"PEMBAYARAN WOM");
			type = trtPembayaranCicilan;
			break;
		case mnuPembayaranSimpati50:
		case mnuPembayaranSimpati100:
		case mnuPembayaranSimpati150:
		case mnuPembayaranSimpati200:
		case mnuPembayaranSimpati300:
		case mnuPembayaranSimpati500:
		case mnuPembayaranSimpati1000:
			strcpy(name,"ISI ULANG SIMPATI/AS");
			type = trtPembayaranPulsa;
			break;
		case mnuPembayaranMentari50:
		case mnuPembayaranMentari100:
		case mnuPembayaranMentari250:
		case mnuPembayaranMentari500:
		case mnuPembayaranMentari1000:
			strcpy(name,"ISI ULANG MENTARI");
			type = trtPembayaranPulsa;
			break;
		case mnuPembayaranIm325:
		case mnuPembayaranIm350:
		case mnuPembayaranIm375:
		case mnuPembayaranIm3100:
		case mnuPembayaranIm3150:
		case mnuPembayaranIm3200:
		case mnuPembayaranIm3500:
		case mnuPembayaranIm31000:
			strcpy(name,"ISI ULANG IM3");
			type = trtPembayaranPulsa;
			break;
		case mnuPembayaranXl25:
		case mnuPembayaranXl50:
		case mnuPembayaranXl75:
		case mnuPembayaranXl100:
		case mnuPembayaranXl150:
		case mnuPembayaranXl200:
		case mnuPembayaranXl300:
		case mnuPembayaranXl500:
			strcpy(name,"ISI ULANG XL");
			type = trtPembayaranPulsa;
			break;
		/*Changed By Ali*/
		case mnuPembayaranEsia25:
		case mnuPembayaranEsia50:
		case mnuPembayaranEsia75:
		case mnuPembayaranEsia100:
		case mnuPembayaranEsia150:
		case mnuPembayaranEsia200:
			strcpy(name,"ISI ULANG ESIA");
			type = trtPembayaranPulsa;
			break;
			
		case mnuPembayaranSmart20:
		case mnuPembayaranSmart50:
		case mnuPembayaranSmart100:
		case mnuPembayaranSmart200:
			strcpy(name,"ISI ULANG SMART");
			type = trtPembayaranPulsa;
			break;
			
		case mnuPembayaranFren20:
		case mnuPembayaranFren25:
		case mnuPembayaranFren50:
		case mnuPembayaranFren100:
		case mnuPembayaranFren150:
        case mnuPembayaranFren200:
        case mnuPembayaranFren300:
        case mnuPembayaranFren500: 
			strcpy(name,"ISI ULANG FREN");
			type = trtPembayaranPulsa;
			break;
			
		case mnuPembayaranThree20:
		case mnuPembayaranThree50:
		case mnuPembayaranThree75:
		case mnuPembayaranThree100:
		case mnuPembayaranThree150:
        case mnuPembayaranThree300:
        case mnuPembayaranThree500: 
			strcpy(name,"ISI ULANG THREE");
			type = trtPembayaranPulsa;
			break;

		case mnuPembayaranAxis25:
		case mnuPembayaranAxis50:
		case mnuPembayaranAxis75:
		case mnuPembayaranAxis100:
		case mnuPembayaranAxis150:
		case mnuPembayaranAxis200:
		case mnuPembayaranAxis300:
			strcpy(name,"ISI ULANG AXIS");
			type = trtPembayaranPulsa;
			break;
			
		case mnuPembayaranKKBRI:
			strcpy(name,"PEMB. KK BRI");
			type = trtPembayaranKKBRI;
			break;
		case mnuPembayaranKKANZ:
			strcpy(name,"PEMB. KK ANZ");
			type = trtPembayaranKKANZ;
			break;
		case mnuPembayaranKKCITIKK:
			strcpy(name,"PEMB. KK CITI");
			type = trtPembayaranKKCITIKK;
			break;
		case mnuPembayaranKKCITIKTA:
			strcpy(name,"PEMB. KTA CITI");
			type = trtPembayaranKKCITIKTA;
			break;
		case mnuPembayaranKKHSBCKK:
			strcpy(name,"PEMB. KK HSBC");
			type = trtPembayaranKKHSBCKK;
			break;
		case mnuPembayaranKKHSBCKTA:
			strcpy(name,"PEMB. KTA HSBC");
			type = trtPembayaranKKHSBCKTA;
			break;
		case mnuPembayaranKKRBSKK:
			strcpy(name,"PEMB. KK RBS");
			type = trtPembayaranKKRBSKK;
			break;
		case mnuPembayaranKKRBSKTA:
			strcpy(name,"PEMB. KTA RBS");
			type = trtPembayaranKKRBSKTA;
			break;
		case mnuPembayaranKKStanCharKK:
			strcpy(name,"PEMB. KK SCB");
			type = trtPembayaranKKStanCharKK;
			break;
		case mnuPembayaranKKStanCharKTA:
			strcpy(name,"PEMB. KTA SCB");
			type = trtPembayaranKKStanCharKTA;
			break;
		/*End Of Changed By Ali*/			
		case mnuPembayaranZakat:
		case mnuPembayaranZakatDhuafa:
		case mnuPembayaranZakatYBM:
			strcpy(name,"PEMBAYARAN ZAKAT");
			type = trtPembayaranZakat;
			break;
		case mnuPembayaranInfaqDhuafa:
		case mnuPembayaranInfaqYBM:
			strcpy(name,"PEMBAYARAN INFAQ");
			type = trtPembayaranZakat;
			break;
		case mnuPembayaranDPLKDhuafa:
			strcpy(name,"PEMBAYARAN DPLK");
			type = trtPembayaranZakat;
			break;
		case mnuSetorSimpanan:
			strcpy(name,"SETOR SIMPANAN");
			type = trtSetorSimpanan;
			break;
		case mnuSetorPinjaman:
			strcpy(name,"SETOR PINJAMAN");
			type = trtSetorPinjaman;
			break;
		case mnuTarikTunai:
			strcpy(name,"TARIK TUNAI");
			type = trtTarikTunai;
			break;
		case mnuVoidTarikTunai:
			strcpy(name,"VOID TARIK TUNAI");
			type = trtVoidTarikTunai;
			break;

		case mnuInstallment:
	        mapGetByte(logVoidFlag, voidTxn);	    
		    if(voidTxn == 1)
		        strcpy(name,"V/CICILAN BRING");
		    else    
			    strcpy(name,"CICILAN BRING");
			type = trtInstallment;
		   
			break;	
		/*Changed By Ali*/
		case mnuPembayaranTvBerlangganan:
			strcpy(name,"TV BERLANGGANAN");
			type = trtPembayaranTVBerlangganan;
			break;
		case mnuPembayaranTvInd:
			strcpy(name,"TV INDOVISION");
			type = trtPembayaranTVBerlangganan;
			break;
		case mnuPembayaranTvOkTv:
			strcpy(name,"TV OKTV");
			type = trtPembayaranTVBerlangganan;
			break;
		case mnuPembayaranTvTopTv:
			strcpy(name,"TV TOPTV");
			type = trtPembayaranTVBerlangganan;
			break;
		case mnuPembayaranTelkom:
			strcpy(name,"PEMB. TELKOM");
			type = trtPembayaranTelkom;
			break;
		case mnuRegistrasiTrxTransfer:
			strcpy(name,"TRX. PHONE TRANSFER");
			type = trtTrxPhoneBankingTransfer;
			break;
		case mnuRegistrasiTrxPulsa:
			strcpy(name,"TRX. PHONE PULSA");
			type = trtTrxPhoneBankingPulsa;
			break;
		/*End of Changed By Ali*/						
		case mnuPembayaranHalo:
			strcpy(name,"HALO");
			type = trtPembayaranPascaBayar;
			break;
		case mnuPembayaranMatrix:
			strcpy(name,"MATRIX");
			type = trtPembayaranPascaBayar;
			break;

		case mnuGantiPIN:
			strcpy(name,"UBAH PIN");
			type = trtGantiPIN;
			break;
		case mnuAktivasiKartu:
			strcpy(name,"AKTIVASI KARTU");
			type = trtAktivasiKartu;
			break;
		case mnuRenewalKartu:
			strcpy(name,"RENEWAL KARTU");
			type = trtRenewalKartu;
			break;
		case mnuGantiPasswordSPV:
			strcpy(name,"GANTI PASSWORD SPV");
			type = trtGantiPasswordSPV;
			break;
		case mnuReissuePIN:
			strcpy(name,"REISSUE PIN");
			type = trtReissuePIN;
			break;
        case mnuSale:
            mapGet(traTypeName,name,sizeof(name));
            //strcpy(name,"SALE");
            type = trtSale;
            break;	
        case mnuRefund:
            mapGet(traTypeName,name,sizeof(name));
            //strcpy(name,"REFUND");
            type = trtRefund;
            break;	 
        case mnuAut:
            mapGet(traTypeName,name,sizeof(name));
            //strcpy(name,"AUTH");
            type = trtAut;
            break;	
#ifdef ABSENSI                                   		
		/*Changed By Ali*/
		case mnuDatang:
            strcpy(name,"ABSEN DATANG");
			type = trtAbsensi;
			break;
		case mnuPulangs:
			strcpy(name,"ABSEN PULANG");
			type = trtAbsensi;
			break;
		case mnuIstirahatA:
			strcpy(name,"ISTIRAHAT MULAI");
			type = trtAbsensi;
			break;
		case mnuIstirahatB:
			strcpy(name,"ISTIRAHAT SELESAI");
			type = trtAbsensi;
			break;
		case mnuLemburA:
			strcpy(name,"LEMBUR MULAI");
			type = trtAbsensi;
			break;
		case mnuLemburB:
			strcpy(name,"LEMBUR SELESAI");
			type = trtAbsensi;
			break;
		case mnuShifts:
			strcpy(name,"SHIFT");   
			type = trtAbsensi;
			break;
		case mnuShiftsI:
			strcpy(name,"SHIFT 1");   
			type = trtAbsensi;
			break;
		case mnuShiftsIA:
			strcpy(name,"DATANG");   
			type = trtAbsensi;
			break;
		case mnuShiftsIB:
			strcpy(name,"PULANG");   
			type = trtAbsensi;
			break;
		case mnuShiftsII:
			strcpy(name,"SHIFT 2");   
			type = trtAbsensi;
			break;
		case mnuShiftsIIA:
			strcpy(name,"DATANG");   
			type = trtAbsensi;
			break;
		case mnuShiftsIIB:
			strcpy(name,"PULANG");   
			type = trtAbsensi;
			break;
		case mnuShiftsIII:
			strcpy(name,"SHIFT 3");   
			type = trtAbsensi;
			break;
		case mnuShiftsIIIA:
			strcpy(name,"DATANG");   
			type = trtAbsensi;
			break;
		case mnuShiftsIIIB:
			strcpy(name,"PULANG");   
			type = trtAbsensi;
			break;
		/*End of Changed By Ali*/			
#endif            		
#ifdef PREPAID
        case mnuInfoDeposit:
            strcpy(name,"INFO DEPOSIT");
            type = trtPrepaidInfoDeposit;
            break;
        case mnuPrepaidPayment:
            strcpy(name,"PEMBAYARAN");
            type = trtPrepaidPayment;
            break;
        case mnuTopUpOnline:
            strcpy(name,"TOP UP");
            type = trtPrepaidTopUp;
            break;
        case mnuTopUpDeposit:
            strcpy(name,"DEPOSIT");
            type = trtPrepaidDeposit;
            break;
        case mnuAktivasiDeposit:
            strcpy(name,"AKTIVASI DEPOSIT");
            type = trtPrepaidAktivasi;
            break; 
        case mnuPrepaidRedeem:
            strcpy(name,"REDEEM");
            type = trtPrepaidRedeem;
            break;
#endif            
		default:
		    mapGet(traTypeName,name,sizeof(name));
			break;
	}
	if(txnType != NULL)
	    *txnType = type;
	if(transName != NULL)
	    strcpy(transName,name);
}

//++ @agmr - BRI2

int briPrintData(word txnType, word *rlo, byte *isOneReceipt,byte isDuplicate)
{
	int ret;
	byte idx;
	char amtS[lenAmt + 1];
	char curr_sign[lenCurrSign + 1], fmtCurr[5+1];
	char buffExpDat[lenExpDat + 1], ExpDat[lenExpDat + 2];
	char Pan[lenPan + 1];  
    card Amt;
    byte singleReceipt=0;
	char str[128];
    char buf[128],buf1[128],buf2[128];
    char amount[20];  
    char RspCod[lenRspCod + 1];
    byte subType;
    int temp;
    word key;
    char name[30];
    char strExpDate[30];
	char BlockedPan[lenPan+1];
	char EntMod;
	char traName[dspW + 1];
    byte isChip = 0;
//    byte isTap = 0;
    byte isVoid = 0;
    byte isEMV = 0;
    byte isNegative = 0;
    byte voidTxn;
    byte fullEmv;

	MAPGETBYTE(traEntMod, EntMod, lblKO);
	switch (EntMod)
	{
		case 'c':
		case 'C':
			ret = 1;
			break;     	        
		default:
			ret = valIsPrintRequired();
			CHECK(ret >= 0, lblEnd);
			break;
	}
	if(ret == 0)
	{
		goto lblEnd;
	}	

//++ @agmr
	switch (EntMod)
	{
		case 'c':
		case 'C':
			isChip = 1; 
			MAPPUTSTR(traChipSwipe, " (Chip)", lblKO);
			break;
#ifdef PREPAID
	    case 't':
//	        isTap = 1;
	        MAPPUTSTR(traChipSwipe, " (Fly)", lblKO);
            break;
#endif      
        case 'm':
        case 'M':
            MAPPUTSTR(traChipSwipe, " (Swipe)", lblKO);
            break;        	        
		default:
			MAPPUTSTR(traChipSwipe, " (Manual)", lblKO);
			break;
	}
//-- @agmr	
    if(isBRITransaction() == 1 && key != trtInstallment) //@agmr - BRI
        ret = usrInfo(infPrinting);
    else
	    ret = usrInfo(infMerCopyPrinting);
	CHECK(ret >= 0, lblKO);
	
    if(isBRISaveToBatch() == 0)   
        ret = strFormatDatTim(traDatTim);
    else        
	    ret = strFormatTraDatTim();
	CHECK(ret >= 0, lblKO);
	
	if(txnType == trtVoid)
	{
	    MAPGETBYTE(traOriginalTxnType, idx, lblKO);
	    isVoid = 1;
	    txnType = idx;
	}
	if(isDuplicate)
	{
	    MAPGETBYTE(logVoidFlag, voidTxn, lblKO);
	    if(voidTxn == 1)
	        isVoid = 1;
	}
    if(emvFullProcessCheck() != 0)
    {    
        isEMV = 1;
    }
    else 
        isEMV = 0;
    
//    MAPGETBYTE(traEmvFullFlag, fullEmv, lblKO);
//    if(fullEmv)
//        isEMV = 1;
    
    if(isEMV == 1)// && (isDuplicate == 1 || isVoid == 1))
	{
        memset(buf,0,sizeof(buf));
	    ret = mapGet(traEmvTVR, buf, lenTVR+1);
	    CHECK(ret > 0, lblKO);
//	    buf[0] = 0x05;
//	    memset(buf+1,0x1a,sizeof(buf));
	    ret = mapPut(emvTVR,buf,lenTVR+1);
	    
	    memset(buf,0,sizeof(buf));
	    ret = mapGet(traEmvIssTrnCrt,buf,lenIssTrnCrt+1);
	    CHECK(ret > 0, lblKO);
//	    buf[0] = 0x08;
//	    memset(buf+1,0x3f,sizeof(buf));
	    ret = mapPut(emvIssTrnCrt,buf,lenIssTrnCrt+1);
	    CHECK(ret > 0, lblKO);
	} 
    

    mapMove(rqsBeg, txnType - 1);
	MAPGET(rqsDisp, traName, lblKO);
	MAPPUTSTR(traTransType, traName, lblKO);
		
	MAPGET(traAmt, buf, lblKO);
	ret = fmtAmtReceipt2(traFmtAmt, buf);
	CHECK(ret > 0, lblKO);
	MAPGET(traTipAmt, buf1, lblKO);
	ret = fmtAmtReceipt2(traFmtTip, buf1);
	CHECK(ret > 0, lblKO);
	addStr(amtS, buf, buf1);
	
	ret = fmtAmtReceipt2(traTotAmt, amtS);
	CHECK(ret > 0, lblKO);
    MAPGET(appCurrSign, curr_sign, lblKO);
    MEM_0x20(fmtCurr);
    memcpy(fmtCurr, curr_sign, 3);
    MAPPUTSTR(appCurrSignSpaces, fmtCurr, lblKO);

	MAPGET(traExpDat, buffExpDat, lblKO);
	FmtExpDat(ExpDat, buffExpDat);
	MAPPUTSTR(traExpDatFmt, ExpDat, lblKO);
	
	mapGet(traPan,Pan,sizeof(Pan));
	memset(BlockedPan, '*', sizeof BlockedPan);
    memcpy(BlockedPan + 12, Pan + 12, lenPan-12); //@agmr
    BlockedPan[sizeof(BlockedPan)-1]=0;	                      //@agmr
    MAPPUTSTR(traBlockPan, BlockedPan,lblKO);
	
	MAPPUTSTR(rptBuf1,"",lblKO);
	MAPPUTSTR(rptBuf2,"",lblKO);
	MAPPUTSTR(rptBuf3,"",lblKO);
	MAPPUTSTR(rptBuf4,"",lblKO);
	MAPPUTSTR(rptBuf5,"",lblKO);
	MAPPUTSTR(rptBuf6,"",lblKO);
	MAPPUTSTR(rptBuf7,"",lblKO);
	MAPPUTSTR(rptBuf8,"",lblKO);
	MAPPUTSTR(rptBuf9,"",lblKO);
	MAPPUTSTR(rptBuf10,"",lblKO);
	MAPPUTSTR(rptBuf11,"",lblKO);
	MAPPUTSTR(rptBuf12,"",lblKO);
	MAPPUTSTR(rptBuf13,"",lblKO);
	MAPPUTSTR(rptBuf14,"",lblKO);
	MAPPUTSTR(rptBuf15,"",lblKO);
    MAPPUTSTR(rptBuf16,"",lblKO);
	MAPPUTSTR(rptBuf17,"",lblKO);	

    if(txnType == trtSale || txnType == trtAut || txnType == trtRefund ||
       txnType == trtInstallment)
    {
        memset(name,0,sizeof(name));
        if(isVoid)
        {
            strcpy(name, "VOID ");
            if(txnType != trtRefund)
                isNegative = 1;
        }
        else
        {
            if(txnType == trtRefund)
                isNegative = 1;
        }
        memset(strExpDate,0,sizeof(strExpDate));
        sprintf(strExpDate,"EXPY DATE :  %s",ExpDat);        
                
        memset(buf,0,sizeof(buf));
        memset(buf1,0,sizeof(buf1));
        if(isNegative ==1)
            strcpy(buf1,"-Rp. ");
        else
            strcpy(buf1,"Rp. ");
        mapGet(traAmt,buf,sizeof(buf));
        fmtAmt(buf1+strlen(buf1),buf,0,",.");
        memset(buf,0,sizeof(buf));
        sprintf(buf,"AMOUNT %40s",buf1);
        MAPPUTSTR(rptBuf2,buf,lblKO);
        
        memset(buf,0,sizeof(buf));
        memset(buf1,0,sizeof(buf1));
        if(isNegative ==1)
            strcpy(buf1,"-Rp. ");
        else
            strcpy(buf1,"Rp. ");
        mapGet(traTotAmt,buf,sizeof(buf));
		strcat(buf1,buf);
        memset(buf,0,sizeof(buf));
        sprintf(buf,"TOTAL %18s",buf1);
        MAPPUTSTR(rptBuf3,buf,lblKO); 
        
        if(txnType == trtInstallment && isVoid == 0)
            MAPPUTSTR(rptBuf3,"",lblKO);          
    }
	switch (txnType)
	{
		case trtSale:
		    strcat(name,"SALE");
            memset(buf,0,sizeof(buf));
            sprintf(buf,"%48s",strExpDate);
            memcpy(buf,name,strlen(name));
            
            MAPPUTSTR(rptBuf1,buf,lblKO);     		    
		    if(isEMV)
		    {
		        key = rloTrxEMV;
		    }
		    else
		    {
			    key = rloTrx;
			}
			break;
		case trtPreAut:
			key = rloPreAuth;
			break;
//++ @agmr - BRI5    			
		case trtAut:
		    strcat(name,"AUTH");
            memset(buf,0,sizeof(buf));
            sprintf(buf,"%48s",strExpDate);
            memcpy(buf,name,strlen(name));
            
            MAPPUTSTR(rptBuf1,buf,lblKO);     		    
		    if(isEMV)
		    {
		        key = rloTrxEMV;
		    }
		    else
		    {
			    key = rloTrx;
			}
			break;
//-- @agmr - BRI5      			  			
		case trtRefund:
		    strcat(name,"REFUND");
            memset(buf,0,sizeof(buf));
            sprintf(buf,"%48s",strExpDate);
            memcpy(buf,name,strlen(name));
            
            MAPPUTSTR(rptBuf1,buf,lblKO);     		    
		    if(isEMV)
		    {
		        key = rloTrxEMV;
		    }
		    else
		    {
			    key = rloTrx;
			}
			break;
			
		case trtInstallment:
		    strcat(name,"CCL BRING");
            memset(buf,0,sizeof(buf));
            sprintf(buf,"%48s",strExpDate);
            memcpy(buf,name,strlen(name));
            MAPPUTSTR(rptBuf1,buf,lblKO);    

			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			memset(buf,0,sizeof(buf));
			fmtAmt(buf, amount, 0, ",.");
			if(isNegative == 1)
			    sprintf(str,"AMOUNT           -Rp. %26s",buf);
			else
			    sprintf(str,"AMOUNT            Rp. %26s",buf);
//            strcpy(str,"12345678901234567890123456789012345678901234567890");
			MAPPUTSTR(rptBuf4,str,lblKO);  
			
			if(isNegative == 1)
			    sprintf(str,"  POKOK          -Rp. %26s",buf);
			else
			    sprintf(str,"  POKOK           Rp. %26s",buf);
			MAPPUTSTR(rptBuf6,str,lblKO);
			         
            memset(buf,0,sizeof(buf));
            mapGet(traInstallmentPlan,buf,lenInstallmentPlan);
            strcpy(str,"INFORMASI CICILAN BRING");
            MAPPUTSTR(rptBuf5,str,lblKO);			         
			  
            memset(buf,0,sizeof(buf));
            mapGet(traInstallmentTerm,buf,lenInstallmentTerm);
            strcat(buf," BULAN");
            sprintf(str,"  JANGKA WAKTU %33s",buf);
            MAPPUTSTR(rptBuf7,str,lblKO); 		    

			memset(amount,0,sizeof(amount));
			mapGet(traInstallmentCicilan,amount,lenInstallmentCicilan);
			amount[strlen(amount)-2] = 0;
			memset(buf,0,sizeof(buf));
			fmtAmt(buf, amount, 0, ",.");
			sprintf(str,"  CICILAN BULANAN Rp. %26s",buf);			
            MAPPUTSTR(rptBuf8,str,lblKO); 
//            if(isEMV)				    
//            if(!isEMV)
//            {
//                char isi[20];
//                
//                memset(isi,0,sizeof(isi));
//                mapPut(emvTVR,isi,lenTVR);
//                mapPut(emvIssTrnCrt,isi,lenIssTrnCrt);   
//            }
			key = rloInstallmentEMV;
//			else
//			    key = rloInstallment;
			break;	                

		case trtCash:
			key = rloTrx;
			break;
		case trtVerify:
			key = rloCrdVrfy;
			break;
		case trtOffline:
			MAPPUTSTR(traTransType, "OFFLSALE", lblKO);  
			key = rloOfflineSale;
			break;
    				      
// ++ @agmr - BRI - receipt  
		case trtInfoSaldo:
		    singleReceipt=1;
		    
		    memset(buf,0,sizeof(buf));
		    strcpy(buf,"INFO SALDO");
		    MAPPUTSTR(rptJudul,buf,lblKO);   
		    
		    memset(buf,0,sizeof(buf));
            mapGet(traNamaPengirim,buf,lenNamaPemilik);
            sprintf(str,"Nama           : %30s",buf); //@@OA 
            MAPPUTSTR(rptNamaNasabah,str,lblKO);
            
			memset(amount,0,sizeof(amount));
			mapGet(traSisaSaldo,amount,sizeof(amount));
			amount[strlen(amount) -2] = 0;
/* @@OA			dec2num(&Amt, amount, 0);
			memset(amount,0,sizeof(amount));
			Amt = Amt/100;
			num2dec(amount,Amt,0);
*/			memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Saldo          : %s",buf);//@@OA 
			MAPPUTSTR(rptBuf1,str,lblKO);	            
            
		    key = rloInfoSaldo;
		    break;
		case trtInfoSaldoBankLain:		
		    singleReceipt=1;    
		    
		    memset(buf,0,sizeof(buf));
		    strcpy(buf,"INFO SALDO BANK LAIN");
		    MAPPUTSTR(rptJudul,buf,lblKO);  		    
		    
		    memset(buf,0,sizeof(buf));
			mapGet(traNamaBankAsal,buf,lenNamaBank);
			sprintf(str,"Nasabah/Bank   : %s",buf);//@@OA 
			MAPPUTSTR(rptNamaNasabahBank,str,lblKO);
			
			memset(buf,0,sizeof(buf));
			mapGet(traJenisRekening,buf,1);
			if(buf[0] == 1)
			{
				MAPPUTSTR(rptJenisRekening,"Jenis Rekening : Tabungan",lblKO);
			}
			else
			{
				MAPPUTSTR(rptJenisRekening,"Jenis Rekening : Giro",lblKO);
			}
			
			memset(amount,0,sizeof(amount));
			mapGet(traSisaSaldo,amount,sizeof(amount));
			amount[strlen(amount)-2] = 0;
/* @@OA			dec2num(&Amt, amount, strlen(amount));
			memset(amount,0,sizeof(amount));
			Amt = Amt/100;
			num2dec(amount,Amt,0);
*/			memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Saldo          : %s",buf);//@@OA 
			MAPPUTSTR(rptBuf1,str,lblKO);				
			
			key = rloInfoSaldoBankLain;
			break;
		case trtTransferSesamaBRI:
			singleReceipt=1; //@@OA
		    memset(buf,0,sizeof(buf));
		    strcpy(buf,"TRANSFER SESAMA BRI");
		    MAPPUTSTR(rptJudul,buf,lblKO);  		    
		  
		    memset(buf,0,sizeof(buf));
		    mapGet(traNomorRekeningTujuanBRI,buf,lenNomorRekeningBRI);
		    sprintf(str,"No. Rek        : %s",buf);//@@OA 
		    MAPPUTSTR(rptNomorRekeningPenerima,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNamaPenerima,buf,lenNamaPemilik);
		    sprintf(str,"Nama           : %s",buf);//@@OA 
		    MAPPUTSTR(rptNamaPenerima,str,lblKO);
		    
		    //amount		    
		    memset(buf,0,sizeof(buf));
		    memset(amount,0,sizeof(amount));
		    mapGet(traAmt,amount,sizeof(amount));
            strcpy(buf,"Rp. ");
            fmtAmt(buf+4, amount, 0, ",.");
            sprintf(str,"TOTAL         : %30s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);		    
		    
			key = rloTransferSesamaBRI;
			break;
		case trtTransferAntarBank:
		    singleReceipt=1; //@@OA
		    memset(buf,0,sizeof(buf));
		    strcpy(buf,"TRANSFER ANTAR BANK");
		    MAPPUTSTR(rptJudul,buf,lblKO);  		    
		    		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traJenisRekening,buf,1);
		    if(buf[0] == 1)
		        mapPut(rptJenisRekening,"Dari Tabungan",13);
		    else 
		        mapPut(rptJenisRekening,"Dari Giro",9);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traJenisTransfer,buf,lenJenisTransfer);
		    if(memcmp(buf,"00",2) == 0)
		        mapPut(rptJenisTransfer,"melalui BRI",11);
		    else if(memcmp(buf,"01",2) == 0)
		        mapPut(rptJenisTransfer,"melalui LINK",12); 
		    else if(memcmp(buf,"02",2) == 0)
		        mapPut(rptJenisTransfer,"melalui PRIMA",13); 
		    else if(memcmp(buf,"03",2) == 0)
		        mapPut(rptJenisTransfer,"melalui BERSAMA",15);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNamaBankAsal,buf,lenNamaBank);
		    sprintf(str,"Bank           : %s",buf);//@@OA 
		    MAPPUTSTR(rptBankAsal,str,lblKO);  

		    memset(buf,0,sizeof(buf));
		    mapGet(traNamaPengirim,buf,lenNamaPemilik);
		    sprintf(str,"Nama           : %s",buf);//@@OA 
		    MAPPUTSTR(rptNamaPengirim,str,lblKO);	
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNomorRekeningAsal,buf,lenNomorRekening);
		    sprintf(str,"No Rek         : %s",buf);//@@OA 
		    MAPPUTSTR(rptNomorRekeningPengirim,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNamaBankTujuan,buf,lenNamaBank);
		    sprintf(str,"Bank           : %s",buf);//@@OA 
		    MAPPUTSTR(rptBankTujuan,str,lblKO);  
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNamaPenerima,buf,lenNamaPemilik);
		    sprintf(str,"Nama           : %s",buf);//@@OA 
		    MAPPUTSTR(rptNamaPenerima,str,lblKO);	
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNomorRekeningTujuan,buf,lenNomorRekening);
		    sprintf(str,"No Rek         : %s",buf);//@@OA 
		    MAPPUTSTR(rptNomorRekeningPenerima,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traCustomerRefNumber,buf,lenCustomerRefNumber);
		    sprintf(str,"Cust Ref No    : %s",buf);//@@OA 
		    MAPPUTSTR(rptCustomerRef,str,lblKO);		    		    			    	      

		    //amount		    
		    memset(buf,0,sizeof(buf));
		    memset(amount,0,sizeof(amount));
		    mapGet(traAmt,amount,sizeof(amount));
            strcpy(buf,"Rp. ");
            fmtAmt(buf+4, amount, 0, ",.");
            sprintf(str,"Jumlah         : %30s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);
            
            
//            MAPPUTSTR(rptJumlah,"Jumlah         :",lblKO);	
            
			key = rloTransferAntarBank;
			break;		
		/*Changed By Ali*/	
		case trtPembayaranTVBerlangganan:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    switch(buf[0])
		    {
				case TV_INDOVISION:
		    		strcpy(str,"PEMBAYARAN INDOVISION");
		    		strcpy(buf1,"   INDOVISION MENYATAKAN TANDA TERIMA INI");		    			
		    		break;
		    	case TV_OKTV:
		    		strcpy(str,"PEMBAYARAN OK TV");
		    		strcpy(buf1,"      OK TV MENYATAKAN TANDA TERIMA INI");	
		    		break;	
		    	case TV_TOPTV:
		    		strcpy(str,"PEMBAYARAN TOP TV");
		    		strcpy(buf1,"      TOP TV MENYATAKAN TANDA TERIMA INI");		
		    		break;
			}

			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
		    strcpy(buf1,"      SEBAGAI BUKTI PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    MAPPUTSTR(rptJudul,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNamaPenerima,buf,sizeof(buf));
		    sprintf(str,"No ID Pelanggan  : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
		    mapGet(traNamaPengirim,buf,sizeof(buf));
		    sprintf(str,"Nama Pelanggan   : %s",buf);
		    MAPPUTSTR(rptBuf2,str,lblKO);

			memset(buf,0,sizeof(buf));
		    mapGet(traLWBP,buf,sizeof(buf));
		    sprintf(str,"Periode          : %s",buf);
		    MAPPUTSTR(rptBuf3,str,lblKO);

			//amount		    
		    memset(buf,0,sizeof(buf));
		    memset(amount,0,sizeof(amount));
		    mapGet(traTotalAmount,amount,sizeof(amount));
            strcpy(buf,"Rp. ");
            fmtAmt(buf+4, amount, 0, ",.");
            sprintf(str,"Jumlah           : %28s",buf);
		    MAPPUTSTR(rptBuf4,str,lblKO);

			key = rloPembayaranCicilan;
			
			break;


		case trtPembayaranTelkom:

			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMBAYARAN TELKOM");
		    strcpy(buf1,"      TELKOM MENYATAKAN TANDA TERIMA INI");		

			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
		    strcpy(buf1,"      SEBAGAI BUKTI PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    MAPPUTSTR(rptJudul,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNamaPenerima,buf,sizeof(buf));
		    sprintf(str,"No Telepon       : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
		    mapGet(traNamaPengirim,buf,sizeof(buf));
		    sprintf(str,"Nama Pelanggan   : %s",buf);
		    MAPPUTSTR(rptBuf2,str,lblKO);

			//amount		    
		    memset(buf,0,sizeof(buf));
		    memset(amount,0,sizeof(amount));
		    mapGet(traTotalAmount,amount,sizeof(amount));
            strcpy(buf,"Rp. ");
            fmtAmt(buf+4, amount, 0, ",.");
            sprintf(str,"Jumlah           : %28s",buf);
		    MAPPUTSTR(rptBuf4,str,lblKO);

			key = rloPembayaranCicilan;
			
			break;
			
		case trtTrxPhoneBankingTransfer:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);

			strcpy(str," ");
			MAPPUTSTR(rptJudul,str,lblKO);

			strcpy(str,"REG TRX TRANSFER MELALUI");	
		    MAPPUTSTR(rptBuf1,str,lblKO);

			strcpy(str,"PHONE BANKING");	
		    MAPPUTSTR(rptBuf2,str,lblKO);

			strcpy(str," BERHASIL");	
		    MAPPUTSTR(rptBuf3,str,lblKO);

			memset(buf,0,sizeof(buf));
		    mapGet(traPelangganId, buf, sizeof(buf));
			sprintf(str,"No Rek yang didaftarkan : %s",buf);
			MAPPUTSTR(rptBuf4,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traNamaPengirim, buf, sizeof(buf));
			sprintf(str,"Nama Pelanggan          : %s",buf);
			MAPPUTSTR(rptBuf5,str,lblKO);

			strcpy(str," ");	
		    MAPPUTSTR(rptBuf6,str,lblKO);
			
		    strcpy(str,"Sekarang Anda Dapat melakukan transfer ke");	
		    MAPPUTSTR(rptBuf7,str,lblKO);

			
		    strcpy(str,"No Rekening tersebut melalui Phone Banking");	
		    MAPPUTSTR(rptBuf8,str,lblKO);

			
		    strcpy(str,"BRI.");	
		    MAPPUTSTR(rptBuf9,str,lblKO);

			strcpy(str," ");	
		    MAPPUTSTR(rptBuf10,str,lblKO);

		    strcpy(str,"Untuk Keamanan transaksi, jaga kerahasiaan");	
		    MAPPUTSTR(rptBuf11,str,lblKO);

		    strcpy(str,"PIN ATM anda.");	
		    MAPPUTSTR(rptBuf12,str,lblKO);
			
			key = rloTrxPhoneBanking;
			break;		

		case trtTrxPhoneBankingPulsa:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str," ");
			MAPPUTSTR(rptJudul,str,lblKO);

			strcpy(str,"REG TRX PULSA MELALUI");	
		    MAPPUTSTR(rptBuf1,str,lblKO);

			strcpy(str,"PHONE BANKING");	
		    MAPPUTSTR(rptBuf2,str,lblKO);

			strcpy(str," BERHASIL");	
		    MAPPUTSTR(rptBuf3,str,lblKO);

			memset(buf,0,sizeof(buf));
		    mapGet(traNoTelpon, buf, sizeof(buf));
			sprintf(str,"No HP yang didaftarkan : %s",buf);
			MAPPUTSTR(rptBuf4,str,lblKO);
		    
			strcpy(str," ");
			MAPPUTSTR(rptBuf5,str,lblKO);

			strcpy(str," ");	
		    MAPPUTSTR(rptBuf6,str,lblKO);
			
		    strcpy(str,"Sekarang Anda Dapat melakukan pembelian");	
		    MAPPUTSTR(rptBuf7,str,lblKO);

			
		    strcpy(str,"pulsa untuk no HP tersebut melalui Phone");	
		    MAPPUTSTR(rptBuf8,str,lblKO);

			
		    strcpy(str,"Banking BRI.");	
		    MAPPUTSTR(rptBuf9,str,lblKO);

			strcpy(str," ");	
		    MAPPUTSTR(rptBuf10,str,lblKO);

		    strcpy(str,"Untuk Keamanan transaksi, jaga kerahasiaan");	
		    MAPPUTSTR(rptBuf11,str,lblKO);

		    strcpy(str,"PIN ATM anda.");	
		    MAPPUTSTR(rptBuf12,str,lblKO);
			
			
			key = rloTrxPhoneBanking;
			break;
		/*End Of Changed By Ali*/					
		case trtPembayaranPLN:
    		{
            /*
            untuk PLN sesudah payment:
            tagihan (traInquiryAmt) = field 4 110 
            total bayar (traTotalAmount) = field 4 210 
            admin bank (traAdminCharge) = field 4 210 - field 4 110 
            
            untuk PLN sampai inquiry:
            tagihan (traInquiryAmt) = field 4 110 
            admin bank (traAdminCharge) = field 48 110
            total bayar (traTotalAmount) = field 4 110 + field 48 110 
            */        		    
    		    card blnSemuaTagihan, blnTagihan, blnTunggakan;
    		    char *ptr;//,*ptr1;
    		    //byte blnTunggakan;
    		    
    		    memset(buf,0,sizeof(buf));
    		    mapGet(traTotalOutstanding,buf,lenTotalOutstanding);
    		    dec2num(&blnSemuaTagihan,buf,2);
    		    
    		    memset(buf,0,sizeof(buf));
    		    mapGet(traBillStatus,buf,lenBillStatus);
    		    dec2num(&blnTagihan,buf,1);
   		            
    		    blnTunggakan = blnSemuaTagihan - blnTagihan;	    
    		    
    		    singleReceipt=1; //@@OA
    		    memset(buf,0,sizeof(buf));
    		    strcpy(buf,"PEMBAYARAN PLN");
    		    MAPPUTSTR(rptJudul,buf,lblKO);
    		    
    		    //id pelanggan
    		    memset(buf,0,sizeof(buf));
    		    mapGet(traPelangganId,buf,lenPelangganId);
    		    sprintf(str,"IDPEL          : %s",buf);//@@OA 
    		    MAPPUTSTR(rptBuf1,str,lblKO);
    		    
    		    //Nama
    		    memset(buf,0,sizeof(buf));
    		    mapGet(traNamaPelangganPLN,buf,lenNamaPelangganPLN);
    		    sprintf(str,"Nama           : %s",buf);//@@OA 
    		    MAPPUTSTR(rptBuf2,str,lblKO);
    		    
    		    //Tarif/daya
    		    memset(str,0,sizeof(str));
    		    memset(buf,0,sizeof(buf));
    		    memset(buf1,0,sizeof(buf1));
    		    memset(buf2,0,sizeof(buf2));
    		    mapGet(traCustomerSegment,buf,lenCustomerSegment);
    		    trimRight(buf,0x20);
    		    trimLeft(buf,0x20);
    		    mapGet(traPowerConsuming,buf1,lenPowerConsuming);
    		    trimRight(buf1,0x20);
    		    trimLeft(buf1,0x20);	
    		    sprintf(str,"Tarif/Daya     : %s/%s VA",buf,buf1);	    
    		    MAPPUTSTR(rptBuf3,str,lblKO);		    
    		    
    		    //Bulan Tahun
    		    if(blnTagihan > MAX_TAGIHAN_PLN)
    		        blnTagihan = MAX_TAGIHAN_PLN;
     		    
    		    ptr = buf;
//    		    ptr1 = buf2;

    		    for(idx=0;idx<blnTagihan;idx++)
    		    {
    		        if(idx!=0)
    		        {
    		            *ptr=',';
    		            ptr++;
    		        }
    		            
    		        memset(buf1,0,sizeof(buf1));
    		        if(idx==0)
    		            mapGet(traBillPeriod1,buf1,lenBillPeriod);
    		        if(idx==1)
    		            mapGet(traBillPeriod2,buf1,lenBillPeriod);
    		        if(idx==2)
    		            mapGet(traBillPeriod3,buf1,lenBillPeriod);
    		        if(idx==3)
    		            mapGet(traBillPeriod4,buf1,lenBillPeriod);		            		            
                    memset(str,0,sizeof(str));
                    temp = (buf1[0]-0x30)*10 + (buf1[1]-0x30);
                    sprintf(ptr,"%s%c%c",convertBulan(0,str,temp),buf1[2],buf1[3]);
		            ptr+=5;
    		        
    		    }
    		    
    		    //memset(buf,0,sizeof(buf));
    		    sprintf(str,"BLTH           : %s",buf);//@@OA 
    		    MAPPUTSTR(rptBuf4,str,lblKO);
    		    
    		    //LWBP
    		    memset(str,0,sizeof(str));
    		    memset(buf,0,sizeof(buf));
    		    mapGet(traMeter,str,lenMeter); //@@OA
    		    fmtIns(buf, str, "-", 8, sizeof(buf));  
    		    sprintf(str,"STAND METER    : %s",buf);//@@OA 
    		    MAPPUTSTR(rptBuf5,str,lblKO);
    		     
    		    //TAGIHAN
    		    memset(buf,0,sizeof(buf));
    		    memset(amount,0,sizeof(amount));
    		    mapGet(traInquiryAmt,amount,sizeof(amount)); // @@OA
    		    strcpy(buf,"Rp. ");
                fmtAmt(buf+4, amount, 0, ",.");
                sprintf(str,"JUMLAH TAGIHAN : %s",buf);//@@OA 
    		    MAPPUTSTR(rptBuf6,str,lblKO);
    		    
    		    //MPLO
    		    memset(buf,0,sizeof(buf));
    		    mapGet(traMPLO,buf,lenMPLO);
    		    sprintf(str,"MLPO REF.      : %s",buf);//@@OA 
    		    MAPPUTSTR(rptBuf7,str,lblKO);
    		    
    		    memset(buf,0,sizeof(buf));
    		    strcpy(str,"     PLN MENYATAKAN STRUK INI SEBAGAI BUKTI      ");
    		    MAPPUTSTR(rptPLNMsg1,str,lblKO);    		    
    		    MAPPUTSTR(rptBuf8,"MOHON DISIMPAN",lblKO);
    		    
    		    //Admin
    		    memset(buf,0,sizeof(buf));
    		    memset(amount,0,sizeof(amount));
    		    mapGet(traAdminCharge,amount,sizeof(amount));
                strcpy(buf,"Rp. ");
                fmtAmt(buf+4, amount, 0, ",.");
                sprintf(str,"ADMIN BANK : %s",buf);
    		    MAPPUTSTR(rptBuf9,str,lblKO);

    		    //amount		    
    		    memset(buf,0,sizeof(buf));
    		    memset(amount,0,sizeof(amount));
    		    mapGet(traAmt,amount,sizeof(amount));
                strcpy(buf,"Rp. ");
                fmtAmt(buf+4, amount, 0, ",.");
                sprintf(str,"TOTAL      : %s",buf);
    		    MAPPUTSTR(rptBuf10,str,lblKO);
    		    
    		    //info bila ada tunggakan
    		    if(blnTunggakan > 0)
    		    {
    		        MAPPUTSTR(rptBuf11," ",lblKO);
    		        
    		        sprintf(str,"Anda masih memiliki tunggakan %i bulan.",(int)blnTunggakan);
    		        MAPPUTSTR(rptBuf12,str,lblKO);
    		        
    		        MAPPUTSTR(rptBuf13,"Rincian Tagihan Dapat Diakses di",lblKO);
    		        MAPPUTSTR(rptBuf14,"www.pln.co.id atau PLN Terdekat",lblKO);
    		    }
    		    else
    		    {
    		        MAPPUTSTR(rptBuf11," ",lblKO);
    		        strcpy(str,"              *** Terima Kasih ***");
    		        MAPPUTSTR(rptBuf12,str,lblKO);
    		        MAPPUTSTR(rptBuf13," ",lblKO);
    		        MAPPUTSTR(rptBuf14,"Rincian Tagihan Dapat Diakses di",lblKO);
    		        MAPPUTSTR(rptBuf15,"www.pln.co.id atau PLN Terdekat",lblKO);
    		    }
    		    
    			key = rloPembayaranPLN;
    		}
			break;
			
		case trtPembayaranCicilan:
		    singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    switch(buf[0])
		    {
		    	case CICILAN_FIF:
		    		strcpy(str,"PEMBAYARAN CICILAN FIF");
		    		strcpy(buf1,"       FIF MENYATAKAN TANDA TERIMA INI");		    			
		    		break;
		    	case CICILAN_BAF:
		    		strcpy(str,"PEMBAYARAN CICILAN BAF");
		    		strcpy(buf1,"       BAF MENYATAKAN TANDA TERIMA INI");	
		    		break;	
		    	case CICILAN_OTO:
		    		strcpy(str,"PEMBAYARAN CICILAN OTO");
		    		strcpy(buf1,"       OTO MENYATAKAN TANDA TERIMA INI");		
		    		break;
		    	case CICILAN_FNS:
		    		strcpy(str,"PEMB CICILAN FINANSIA");
		    		strcpy(buf1,"      FINANSIA MENYATAKAN TANDA TERIMA INI");
		    		break;	
		    	case CICILAN_VER:
		    		strcpy(str,"PEMB CICILAN VERENA");
		    		strcpy(buf1,"      VERENA MENYATAKAN TANDA TERIMA INI");			
		    		break;
		    	case CICILAN_WOM:
		    		strcpy(str,"PEMBAYARAN CICILAN WOM");
		    		strcpy(buf1,"       WOM MENYATAKAN TANDA TERIMA INI");		
		    		break;		    				    			    				    			    			
		   }
		    MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
		    strcpy(buf1,"      SEBAGAI BUKTI PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    MAPPUTSTR(rptJudul,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traContractNumber,buf,sizeof(buf));
		    sprintf(str,"No Kontrak  : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traCustomerName,buf,sizeof(buf));
		    sprintf(str,"Nama        : %s",buf);
		    MAPPUTSTR(rptBuf2,str,lblKO);		
		    
		    memset(buf,0,sizeof(buf));
		    memset(buf1,0,sizeof(buf));
		    mapGet(traDueDate,buf,sizeof(buf));
		    fmtIns(buf1,buf,"-",2,sizeof(buf1));
		    memset(buf,0,sizeof(buf));
		    fmtIns(buf,buf1,"-",5,sizeof(buf));
		    sprintf(str,"Jatuh tempo : %s",buf);
		    MAPPUTSTR(rptBuf3,str,lblKO);				        
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traPaymentNumber,buf,sizeof(buf));
		    sprintf(str,"Angsuran Ke : %s",buf);
		    MAPPUTSTR(rptBuf4,str,lblKO);	
		    
		    memset(amount,0,sizeof(amount));
		    mapGet(traTotalAmount,amount,sizeof(amount));
		    dec2num(&Amt, amount, strlen(amount));
		    memset(amount,0,sizeof(amount));
		    Amt = Amt/100;
		    num2dec(amount,Amt,0);
		    memset(buf,0,sizeof(buf));
		    strcpy(buf,"Rp. ");
		    fmtAmt(buf+4, amount, 0, ",.");
		    sprintf(str,"Tagihan     : %s",buf);
		    MAPPUTSTR(rptBuf5,str,lblKO);	
		    
		    sprintf(str,"Pembayaran  : %s",buf);
		    MAPPUTSTR(rptBuf6,str,lblKO);	
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMPLO,buf,sizeof(buf));
		    sprintf(str,"MPLO Ref    : %s",buf);
		    MAPPUTSTR(rptBuf7,str,lblKO);		    		    

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranPulsa:
		    singleReceipt=1; //@@OA
		    memset(buf,0,sizeof(buf));
		    mapGet(traNoTelpon,buf,sizeof(buf));
		    sprintf(str,"No HP         : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);
		    
		    memset(amount,0,sizeof(amount));
		    mapGet(traInquiryAmt,amount,sizeof(amount));
		    amount[strlen(amount) - 2] = 0; // @@OA
	/* @@OA	dec2num(&Amt, amount, strlen(amount));
		    memset(amount,0,sizeof(amount));
		    Amt = Amt/100;
		    num2dec(amount,Amt,0);
	*/	    memset(buf,0,sizeof(buf));
		    strcpy(buf,"Rp. ");
		    fmtAmt(buf+4, amount, 0, ",.");
		    sprintf(str,"Amount        : %s",buf);
		    MAPPUTSTR(rptBuf2,str,lblKO);		    	
			
		    memset(buf,0,sizeof(buf));
		    strcpy(str,"Pulsa Otomatis Bertambah");
		    MAPPUTSTR(rptPLNMsg1,str,lblKO);
		    				    			
			mapGet(traSubType,buf,1);
			MAPPUTSTR(rptBuf3,"",lblKO);
			MAPPUTSTR(rptBuf4,"",lblKO);
			switch(buf[0]/10)
			{
				case 1: //SIMPATI
				    memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG SIMPATI/AS");
				    MAPPUTSTR(rptJudul,str,lblKO);

				    memset(buf,0,sizeof(buf));
				    mapGet(traPeriode,buf,sizeof(buf));
				    sprintf(str,"Periode       : %s",buf);
				    MAPPUTSTR(rptBuf3,str,lblKO);
				    
				    memset(buf,0,sizeof(buf));
				    mapGet(traNoVoucher,buf,sizeof(buf));
				    sprintf(str,"Voucher NO.   : %s",buf);
				    MAPPUTSTR(rptBuf4,str,lblKO);	

					key = rloPembayaranPulsaSimpati;
					break;
				case 2: //Mentari
				    memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG MENTARI");	
				    MAPPUTSTR(rptJudul,str,lblKO);				    				
					key = rloPembayaranPulsaMentari;
					break;
				case 3: //IM3
				    memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG IM3");	
				    MAPPUTSTR(rptJudul,str,lblKO);				    
				    memset(buf,0,sizeof(buf));
				    mapGet(traPeriode,buf,sizeof(buf));
				    sprintf(str,"Periode       : %s",buf);
				    MAPPUTSTR(rptBuf3,str,lblKO);
				    				    				
					key = rloPembayaranPulsaIM3;
					break;
				case 4: //XL
				    memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG XL");
				    MAPPUTSTR(rptJudul,str,lblKO);	
				    memset(buf,0,sizeof(buf));
				    mapGet(traNoVoucherMitra,buf,sizeof(buf));
				    sprintf(str,"Kode Vouchers : %s",buf);
				    MAPPUTSTR(rptBuf3,str,lblKO);					    	
					key = rloPembayaranPulsaXL;
					break;	
				/*Changed By Ali*/
				case 5: //Esia
					memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG ESIA");
				    MAPPUTSTR(rptJudul,str,lblKO);	
				    memset(buf,0,sizeof(buf));			    	
					key = rloPembayaranPulsaXL;
					break;
				case 6: //Smart
					memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG SMART");
				    MAPPUTSTR(rptJudul,str,lblKO);	
				    memset(buf,0,sizeof(buf));			    	
					key = rloPembayaranPulsaXL;
					break;
				case 7: //Fren
					memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG FREN");
				    MAPPUTSTR(rptJudul,str,lblKO);	
				    memset(buf,0,sizeof(buf));			    	
					key = rloPembayaranPulsaXL;
					break;
				case 8: //Three
					memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG THREE");
				    MAPPUTSTR(rptJudul,str,lblKO);	
				    memset(buf,0,sizeof(buf));			    	
					key = rloPembayaranPulsaXL;
					break;
				case 9: //Axis
					memset(str,0,sizeof(str));
				    strcpy(str,"ISI ULANG AXIS");
				    MAPPUTSTR(rptJudul,str,lblKO);	
				    memset(buf,0,sizeof(buf));			    	
					key = rloPembayaranPulsaXL;
					break;
				/*End Of Changed By Ali*/																			
			}		
			break;
		case trtPembayaranZakat:
		    singleReceipt=1; //@@OA
		    memset(buf,0,sizeof(buf));
		    mapGet(traSubType,buf,1);
		    if( (buf[0]/10) == 5)
		        mapPut(rptJudul,"SETORAN ZAKAT",13);
            else
                mapPut(rptJudul,"SETORAN INFAQ",13);
                
            if((buf[0]%10) == 1) 
                mapPut(rptNamaPenerima,"Nama Pengelola     : Dompet Dhuafa",34);
            else 
                mapPut(rptNamaPenerima,"Nama Pengelola     : YBM",24);

            memset(buf,0,sizeof(buf));
            mapGet(traNomorRekeningTujuanBRI,buf,lenNomorRekeningBRI);
            sprintf(str,"Rekening Pengelola : %s",buf);
            MAPPUTSTR(rptNomorRekeningPenerima,str,lblKO);  
            MAPPUTSTR(rptJumlah,"Jumlah             : ",lblKO); 		    
			key = rloPembayaranZakat;
			break;
		case trtSetorSimpanan:
		case trtSetorPinjaman:
			singleReceipt=1; //@@OA
			if(txnType == trtSetorSimpanan)
		        strcpy(str,"SETORAN SIMPANAN");
		    else
		        strcpy(str,"SETORAN PINJAMAN");
			MAPPUTSTR(rptJudul,str,lblKO);
			
			memset(buf,0,sizeof(buf));
			mapGet(traNomorRekeningAsalBRI,buf,lenNomorRekeningBRI);
			sprintf(str,"No Rekening : %s",buf);
			MAPPUTSTR(rptBuf1,str,lblKO);  	
			
			memset(buf,0,sizeof(buf));
			mapGet(traNamaPenerima,buf,lenNamaPemilik);
			sprintf(str,"Nama        : %s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);  
			
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
/* @@OA			dec2num(&Amt, amount, strlen(amount));
			memset(amount,0,sizeof(amount));
			Amt = Amt/100;
			num2dec(amount,Amt,0);
*/			memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Total       : %s",buf);
			MAPPUTSTR(rptBuf3,str,lblKO);	 
			     	            			
			key = rloSetorSimpanan;
			break;
		case trtTarikTunai:
		case trtVoidTarikTunai:
		    singleReceipt=0; //@@OA
		    if(txnType == trtTarikTunai)    
			    strcpy(str,"TARIK TUNAI");
			else 
			    strcpy(str,"VOID TARIK TUNAI");    
			MAPPUTSTR(rptJudul,str,lblKO);		    

			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
	/* @@OA		dec2num(&Amt, amount, strlen(amount));
			memset(amount,0,sizeof(amount));
			Amt = Amt/100;
			num2dec(amount,Amt,0);
	*/		memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Jml Penarikan : %s",buf);
			MAPPUTSTR(rptBuf1,str,lblKO);			    
		    
			memset(amount,0,sizeof(amount));
			mapGet(traFee,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Fee           : %s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);	  
					    
			memset(amount,0,sizeof(amount));
			mapGet(traSisaSaldo,amount,sizeof(amount));
			amount[strlen(amount) - 2] = 0;
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Saldo         : %s",buf);
			MAPPUTSTR(rptBuf3,str,lblKO);				    
			
			key = rloTarikTunai;
			break;		
			
		case trtRegistrasiInternetBanking:
		    singleReceipt = 1;
			strcpy(str,"REG INTERNET BANKING");
			MAPPUTSTR(rptJudul,str,lblKO);
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"       BERHASIL");
            MAPPUTSTR(rptBuf1,buf,lblKO);	
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"Internet Banking BRI dapat diakses");
            MAPPUTSTR(rptBuf2,buf,lblKO);
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"melalui Internet dengan alamat");
            MAPPUTSTR(rptBuf3,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"https://ib.bri.co.id");
            MAPPUTSTR(rptBuf4,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            mapGet(traUserId,buf,lenUserId);
            sprintf(str,"User ID : %s",buf);
            MAPPUTSTR(rptBuf5,str,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"Gunakan User ID dan PIN Internet");
            MAPPUTSTR(rptBuf6,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"Banking Anda untuk login. Selanjutnya");
            MAPPUTSTR(rptBuf7,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"ikuti petunjuk yang ada di Internet");
            MAPPUTSTR(rptBuf8,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"Banking BRI.");
            MAPPUTSTR(rptBuf9,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"Untuk transaksi Finansial melalui");
            MAPPUTSTR(rptBuf10,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"Internet Banking, daftarkan nomor HP");
            MAPPUTSTR(rptBuf11,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"Anda sebagai Token di kantor BRI");
            MAPPUTSTR(rptBuf12,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"terdekat.");
            MAPPUTSTR(rptBuf13,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"Untuk keamanan transaksi, jaga");
            MAPPUTSTR(rptBuf14,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"kerahasiaan User ID dan Password");
            MAPPUTSTR(rptBuf15,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"Internet Banking Anda.");
            MAPPUTSTR(rptBuf16,buf,lblKO);                                                                                                                                               	            
		    
			key = rloRegistrasiInternetBanking;
			break;		
			
		case trtRegistrasiPhoneBanking:
		    singleReceipt = 1;
			strcpy(str,"REGISTRASI PHONE BANKING");
			MAPPUTSTR(rptJudul,str,lblKO);
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"   REGISTRASI BERHASIL");
            MAPPUTSTR(rptBuf1,buf,lblKO);	
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"Mulai saat ini anda dapat");
            MAPPUTSTR(rptBuf2,buf,lblKO);
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"melakukan transaksi Phone Banking");
            MAPPUTSTR(rptBuf3,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"melalui Call BRI");
            MAPPUTSTR(rptBuf4,buf,lblKO); 	
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"ke 14017 atau 021-57987400");
            MAPPUTSTR(rptBuf5,buf,lblKO); 	     
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"     JAGA KERAHASIAAN PIN KARTU ANDA.");
            MAPPUTSTR(rptBuf6,buf,lblKO); 	
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"      HATI-HATI TERHADAP PENIPUAN.");
            MAPPUTSTR(rptBuf7,buf,lblKO); 	                      	    
		    
			key = rloRegistrasiPhoneBanking;
			break;	
		/*Changed By Ali*/
		case trtRegistrasiSmsBanking:
			singleReceipt = 1;
			strcpy(str,"REGISTRASI SMS BANKING");
			MAPPUTSTR(rptJudul,str,lblKO);

			mapGet(traNoTelpon,buf,sizeof(buf));
			sprintf(str,"Nomer HP  : %s",buf);
			MAPPUTSTR(rptBuf1,str,lblKO);	
			
            memset(buf,0,sizeof(buf));
            strcpy(buf,"   REGISTRASI BERHASIL");
            MAPPUTSTR(rptBuf2,buf,lblKO);	
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"***Terima Kasih***");
            MAPPUTSTR(rptBuf3,buf,lblKO);                   	    
		    
			key = rloRegistrasiPhoneBanking;
			break;

		case trtPembayaranKKBRI:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KK BRI");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
		    mapGet(traNamaPengirim,buf,sizeof(buf));
		    sprintf(str,"NAMA          : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    memset(amount,0,sizeof(amount));
		    mapGet(traPelangganId,amount,sizeof(amount));
            strcpy(buf,"Rp. ");
            fmtAmt(buf+4, amount, 0, ",.");
            sprintf(str,"TOTAL TAGIHAN : %28s",buf);
		    MAPPUTSTR(rptBuf2,str,lblKO);
			
			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traTotalAmount,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"MIN PAYMENT   : %28s",buf);
			MAPPUTSTR(rptBuf3,str,lblKO);

			memset(buf,0,sizeof(buf));
		    mapGet(traDueDate,buf,sizeof(buf));
		    sprintf(str,"JATUH TEMPO   : %s",buf);
		    MAPPUTSTR(rptBuf4,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf5,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKANZ:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KK ANZ");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKCITIKK:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KK CITIBANK");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKCITIKTA:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KTA CITIBANK");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKHSBCKK:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KK HSBC");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKHSBCKTA:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KTA HSBC");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKRBSKK:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KK RBS");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKRBSKTA:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KTA HSBC");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKStanCharKK:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KK SCB");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;
		case trtPembayaranKKStanCharKTA:
			singleReceipt=1; //@@OA
		    memset(str,0,sizeof(str));
		    mapGet(traSubType,buf,1);
		    
		    strcpy(str,"PEMB. KTA HSBC");
			MAPPUTSTR(rptJudul,str,lblKO);
			
		    strcpy(buf1,"      HARAP STRUK INI DISIMPAN SEBAGAI BUKTI");		
			MAPPUTSTR(rptPLNMsg1,buf1,lblKO);
			
		    strcpy(buf1,"              PEMBAYARAN YANG SAH");		
		    MAPPUTSTR(rptPLNMsg2,buf1,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    mapGet(traMeter,buf,sizeof(buf));
		    sprintf(str,"No Kartu      : %s",buf);
		    MAPPUTSTR(rptBuf1,str,lblKO);

			memset(buf,0,sizeof(buf));
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"TOTAL BAYAR   : %28s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);

			key = rloPembayaranCicilan;
			break;			
		/*End Of Changed By Ali*/				
		case trtAktivasiKartu:
		    singleReceipt = 1;
			strcpy(str,"AKTIVASI KARTU");		
			MAPPUTSTR(rptJudul,str,lblKO);
            
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));
            mapGet(traPan,buf,sizeof(buf));
            sprintf(str,"Nomor Kartu   : %s",buf);
            MAPPUTSTR(rptBuf1,str,lblKO);
            
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));            
            mapGet(traNomorRekeningAsalBRI,buf,sizeof(buf));
            sprintf(str,"Nomor Rekening: %s",buf);
            MAPPUTSTR(rptBuf2,str,lblKO);	
            
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));  
            mapGet(traNamaPenerima,buf,30);
            trimRight(buf,0x20);     
            sprintf(str,"Nama Nasabah  : %s",buf);  
            MAPPUTSTR(rptBuf3,str,lblKO);	                        
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"AKTIFASI KARTU BERHASIL");
            MAPPUTSTR(rptBuf4,buf,lblKO);	                
            
            MAPGET(traRspCod, RspCod, lblKO);
            if(strcmp(RspCod, "NC") == 0)
            {
        		strcpy(str,"Tetapi Pembentukan PIN baru gagal");
            	MAPPUTSTR(rptBuf8,str,lblKO);
            	strcpy(str,"Segera lakukan Reissue PIN");
            	MAPPUTSTR(rptBuf9,str,lblKO);
	            strcpy(str,"Melalui EDC BRI");
            	MAPPUTSTR(rptBuf10,str,lblKO);
            }
            else
            {
                MAPPUTSTR(rptBuf8,"",lblKO);
                MAPPUTSTR(rptBuf9,"",lblKO);
                MAPPUTSTR(rptBuf10,"",lblKO);
            }       

            memset(buf,0,sizeof(buf));
            strcpy(buf,"PASTIKAN ANDA REGISTRASI");
            MAPPUTSTR(rptBuf5,buf,lblKO);
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"PHONE BANKING & SMS BANKING");
            MAPPUTSTR(rptBuf6,buf,lblKO);  

            memset(buf,0,sizeof(buf));
            strcpy(buf,"MELALUI EDC ATAU ATM BRI");
            MAPPUTSTR(rptBuf7,buf,lblKO);  

            key = rloAktivasiKartu;
            
			break;		
			
		case trtRenewalKartu:
		{
			int isPB = 0, isSB = 0, isPIN = 1, isSBRegUnreg = 0;
		    singleReceipt = 1;
			strcpy(str,"RENEWAL KARTU");		
			MAPPUTSTR(rptJudul,str,lblKO);
            
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));
            mapGet(traNomorKartuLama,buf,sizeof(buf));
            sprintf(str,"Nomor Kartu Lama: %s",buf);
            MAPPUTSTR(rptBuf1,str,lblKO);
                        
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));
            mapGet(traPan,buf,sizeof(buf));
            sprintf(str,"Nomor Kartu Baru: %s",buf);
            MAPPUTSTR(rptBuf2,str,lblKO);                        
            
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));            
            mapGet(traNomorRekeningAsalBRI,buf,sizeof(buf));
            sprintf(str,"Nomor Rekening  : %s",buf);
            MAPPUTSTR(rptBuf3,str,lblKO);	
            
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));  
            mapGet(traNamaPenerima,buf,30);
            trimRight(buf,0x20);     
            sprintf(str,"Nama Nasabah    : %s",buf);  
            MAPPUTSTR(rptBuf4,str,lblKO);
            
// @@OA - mulai
			memset(buf,0,sizeof(buf));
            mapGet(traStatusKartu,buf,2);
            if(strcmp(buf, "03") == 0)
            	isPB = 1;
            MAPGET(traRspCod, RspCod, lblKO);
            if(strcmp(RspCod, "NC") == 0)    
            	isPIN = 0;
            memset(buf,0,sizeof(buf));
            mapGet(traNoTelpon,buf,lenNoTelpon);
			if(memcmp(buf,"0000000000000",13)==0)
            {
                isSB = 0;
            }              
            else if(memcmp(buf,"9999999999999",13)==0)
            {
                isSBRegUnreg = 1;
            }
			else
				isSB = 1;
				
			memset(str,0,sizeof(str));
			MAPPUTSTR(rptBuf5,str,lblKO);
			MAPPUTSTR(rptBuf6,str,lblKO);
			MAPPUTSTR(rptBuf7,str,lblKO);
			MAPPUTSTR(rptBuf8,str,lblKO);
		    MAPPUTSTR(rptBuf9,str,lblKO);
		    MAPPUTSTR(rptBuf10,str,lblKO);
		    MAPPUTSTR(rptBuf11,str,lblKO);
		    MAPPUTSTR(rptBuf12,str,lblKO);
		    MAPPUTSTR(rptBuf13,str,lblKO);
		    MAPPUTSTR(rptBuf14,str,lblKO);
		    MAPPUTSTR(rptBuf15,str,lblKO);
		    MAPPUTSTR(rptBuf16,str,lblKO);
		             		
			if(isSB ||isPB) 
			{//Salah satu dari phone banking atau sms banking sudah di registrasi
				strcpy(str,"REGISTRASI YANG SUDAH DILAKUKAN");
            	MAPPUTSTR(rptBuf5,str,lblKO);
                strcpy(str,"");
                if(isPB)
                {
                    strcpy(str,"- PHONE BANKING");
                }
                MAPPUTSTR(rptBuf6,str,lblKO);
                strcpy(str,"");
                if(isSB)
                {
                    strcpy(str,"- SMS BANKING");
                }
                MAPPUTSTR(rptBuf7,str,lblKO);
                strcpy(str," "); 
            	MAPPUTSTR(rptBuf8,str,lblKO);
            	strcpy(str,"RENEWAL KARTU BERHASIL");
            	MAPPUTSTR(rptBuf9,str,lblKO);
            	if(isPIN)
            	{// Jika Pembentukan PIN baru berhasil
	            	if(isSB != isPB) 
	            	{// jika salah satu belum registrasi
	            		strcpy(str," ");
		            	MAPPUTSTR(rptBuf10,str,lblKO);
		            	strcpy(str,"PASTIKAN ANDA MELAKUKAN REGISTRASI");
		            	MAPPUTSTR(rptBuf11,str,lblKO);
		            	if(!isSB)
		            		strcpy(str,"SMS BANKING");
		            	else
		            		strcpy(str,"PHONE BANKING");
		            	MAPPUTSTR(rptBuf12,str,lblKO);
		            	strcpy(str,"MELALUI ATM ATAU EDC BRI");
		            	MAPPUTSTR(rptBuf13,str,lblKO);
	            	}
            	}
            	else
            	{
            		strcpy(str,"Tetapi Pembentukan PIN baru gagal");
	            	MAPPUTSTR(rptBuf10,str,lblKO);
	            	strcpy(str,"Segera lakukan Reissue PIN");
	            	MAPPUTSTR(rptBuf11,str,lblKO);
		            strcpy(str,"Melalui EDC BRI");
	            	MAPPUTSTR(rptBuf12,str,lblKO);
		            	
            		if(isSB != isPB) 
	            	{// jika salah satu belum registrasi
	            		strcpy(str," ");
		            	MAPPUTSTR(rptBuf13,str,lblKO);
		            	strcpy(str,"PASTIKAN ANDA MELAKUKAN REGISTRASI");
		            	MAPPUTSTR(rptBuf14,str,lblKO);
		            	if(!isSB)
		            		strcpy(str,"SMS BANKING");
		            	else
		            		strcpy(str,"PHONE BANKING");
		            	MAPPUTSTR(rptBuf15,str,lblKO);
		            	strcpy(str,"MELALUI ATM ATAU EDC BRI");
		            	MAPPUTSTR(rptBuf16,str,lblKO);
	            	}
            	}
            }else
            {// PHONE & SMS Banking belum registrasi
            	strcpy(str,"RENEWAL KARTU BERHASIL");
            	MAPPUTSTR(rptBuf9,str,lblKO);
            	if(isPIN)
            	{
	            	strcpy(str," ");
	            	MAPPUTSTR(rptBuf10,str,lblKO);
	            	strcpy(str,"PASTIKAN ANDA MELAKUKAN REGISTRASI");
	            	MAPPUTSTR(rptBuf11,str,lblKO);
	            	strcpy(str,"SMS BANKING & PHONE BANKING");
	            	MAPPUTSTR(rptBuf12,str,lblKO);
	            	strcpy(str,"MELALUI ATM ATAU EDC BRI");
	            	MAPPUTSTR(rptBuf13,str,lblKO);
	            	//key = rloRenewalKartuBuf9;
	            	//break;
	            }else
	            {
	            	strcpy(str,"Tetapi Pembentukan PIN baru gagal");
	            	MAPPUTSTR(rptBuf10,str,lblKO);
	            	strcpy(str,"Segera lakukan Reissue PIN");
	            	MAPPUTSTR(rptBuf11,str,lblKO);
		            strcpy(str,"Melalui EDC BRI");
	            	MAPPUTSTR(rptBuf12,str,lblKO);
	            	strcpy(str," ");
	            	MAPPUTSTR(rptBuf13,str,lblKO);
	            	strcpy(str,"PASTIKAN ANDA MELAKUKAN REGISTRASI");
	            	MAPPUTSTR(rptBuf14,str,lblKO);
	            	strcpy(str,"SMS BANKING & PHONE BANKING");
	            	MAPPUTSTR(rptBuf15,str,lblKO);
	            	strcpy(str,"MELALUI ATM ATAU EDC BRI");
	            	MAPPUTSTR(rptBuf16,str,lblKO);
	            	//key = rloRenewalKartuBuf12;
	            	//break;
		        }
            }
            key = rloRenewalKartu;
		}
		break;
																										
		case trtReissuePIN:
		    singleReceipt = 1;
			strcpy(str,"REISSUE PIN");
			MAPPUTSTR(rptJudul,str,lblKO);
            
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));
            mapGet(traPan,buf,sizeof(buf));
            sprintf(str,"No Kartu : %s",buf);
            MAPPUTSTR(rptBuf1,str,lblKO);	
            
            memset(buf,0,sizeof(buf));
            memset(str,0,sizeof(str));
            mapGet(traNomorRekeningAsalBRI,buf,sizeof(buf));
            sprintf(str,"No REK   : %s",buf);
            MAPPUTSTR(rptBuf2,str,lblKO);	
            
            memset(buf,0,sizeof(buf));
            strcpy(buf,"REISSUE PIN BERHASIL");
            MAPPUTSTR(rptBuf3,buf,lblKO);
            	    
			memset(buf,0,sizeof(buf));
            strcpy(buf,"KARTU TELAH AKTIF KEMBALI DENGAN PIN BARU");
            MAPPUTSTR(rptBuf4,buf,lblKO);
            	    
			key = rloReissuePIN;
			break;
					
    	case trtGantiPIN:
    	    singleReceipt=1;
			strcpy(str,"UBAH PIN");
			MAPPUTSTR(rptJudul,str,lblKO); 	
			
			strcpy(str,"BERHASIL");
			MAPPUTSTR(rptBuf1,str,lblKO); 	
			
    	    key = rloGantiPIN;		
    	    break;		
        
    	case trtGantiPasswordSPV:
    	    singleReceipt=1;
			strcpy(str,"UBAH PASSWORD SPV");
			MAPPUTSTR(rptJudul,str,lblKO); 	
			
			strcpy(str,"PASSWORD SUPERVISOR BERHASIL DIUBAH");
			MAPPUTSTR(rptBuf1,str,lblKO); 	
    	    key = rloGantiPasswordSPV;		
    	    break;		       
    	    
		case trtPembayaranPascaBayar:
	        MAPGET(traRspCod, RspCod, lblKO);
	        mapGet(traSubType,&subType,1);
		    
		    switch(subType)
		    {
		        case PASCA_BAYAR_HALO:
		            strcpy(str,"PEMBAYARAN KARTU HALO");
		            MAPPUTSTR(rptJudul,str,lblKO);

		            strcpy(str,"No HALO        :");
		            mapGet(traNoTelpon,buf,sizeof(buf));
		            strcat(str,buf);
		            MAPPUTSTR(rptBuf1,str,lblKO);
		            
		            strcpy(str,"Nama           :");
		            mapGet(traNamaPenerima,buf,sizeof(buf));
		            trimRight(buf,'0');
		            strcat(str,buf);
		            MAPPUTSTR(rptBuf2,str,lblKO);
		            
		            strcpy(str,"Jumlah Tagihan :");
		           
                    mapGet(traTotalAmount,buf1,sizeof(buf1));
                    trimLeft(buf1,'0');
                    if(strlen(buf1) >=2)
                   	buf1[strlen(buf1)-2] = 0; //jumlah tagihan dibagi 100 untuk ditampilkan/2 digit dibelakan dibuang
                    memset(buf,0,sizeof(buf));
                    strcpy(buf,"Rp. ");
                    fmtAmt(buf+4,buf1,0,",.");
                    strcat(str,buf);		            
		            
                    MAPPUTSTR(rptBuf3,str,lblKO);
		            		            		            		            
		            strcpy(str,"PEMBAYARAN BERHASIL");
		            MAPPUTSTR(rptBuf4,str,lblKO);
        	        if(strcmp(RspCod, "68") == 0)
        	        {
        	            singleReceipt = 1;
		                strcpy(str,"PEMBAYARAN SEDANG DIPROSES");
		                MAPPUTSTR(rptBuf4,str,lblKO);        	            
        	            key = rloPembayaranPascaBayarSedangProses;
        	            
        	        }
        		    else
        		    {
        		    	singleReceipt = 1;
		                strcpy(str,"PEMBAYARAN BERHASIL");
		                MAPPUTSTR(rptBuf4,str,lblKO);        		          
		                key = rloPembayaranPascaBayarHalo;	
		            }
		            break;
		        case PASCA_BAYAR_MATRIX:
		            strcpy(str,"PEMBAYARAN MATRIX");
		            MAPPUTSTR(rptJudul,str,lblKO);

		            strcpy(str,"No MATRIX      : ");
		            mapGet(traNoTelpon,buf,sizeof(buf));
		            //trimLeft(buf,'0');
		            strcat(str,buf);
		            MAPPUTSTR(rptBuf1,str,lblKO);
		            
		            strcpy(str,"Nama           :");
		            mapGet(traNamaPenerima,buf,sizeof(buf));
		            trimRight(buf,'0');
		            strcat(str,buf);
		            MAPPUTSTR(rptBuf2,str,lblKO);
		            
		            strcpy(str,"Jumlah Tagihan :");
		           
                    mapGet(traTotalAmount,buf1,sizeof(buf1));             
                    /*trimLeft(buf1,'0');
                    if(strlen(buf1) >=2)
                    */
                    buf1[strlen(buf1)-2] = 0; //jumlah tagihan dibagi 100 untuk ditampilkan/2 digit dibelakan dibuang
                    memset(buf,0,sizeof(buf));
                    strcpy(buf,"Rp. ");
                    fmtAmt(buf+4,buf1,0,",.");
                    strcat(str,buf);		            
		            
                    MAPPUTSTR(rptBuf3,str,lblKO);
        	        if(strcmp(RspCod, "68") == 0)
        	        {
        	            singleReceipt = 1;
		                strcpy(str,"PEMBAYARAN SEDANG DIPROSES");
		                MAPPUTSTR(rptBuf4,str,lblKO);        	            
        	            key = rloPembayaranPascaBayarSedangProses;
        	        }
        		    else
        		    {
        		    	singleReceipt = 1;
		                strcpy(str,"PEMBAYARAN BERHASIL");
		                MAPPUTSTR(rptBuf4,str,lblKO);        		          
		                key = rloPembayaranPascaBayarMatrix;	
		            }
		            break;
		    }
		    break;
#ifdef PREPAID		
		case trtPrepaidPayment:
		    singleReceipt=0;
		    
        	mapGet(traPan,Pan,sizeof(Pan));
            memcpy(BlockedPan, Pan, lenPan); //@agmr
            BlockedPan[sizeof(BlockedPan)-1]=0;	                      //@agmr
            MAPPUTSTR(traBlockPan, BlockedPan,lblKO);
    		    
			MAPPUTSTR(rptJudul, "BRIZZI PEMBAYARAN", lblKO);  
            strcpy(str,"PEMBAYARAN");
            
            //amount
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"PEMBAYARAN %13s",buf);
//			strcpy(str,"123456789012345678901234");
			MAPPUTSTR(rptBuf1,str,lblKO);
			
			//saldo
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SISA_SALDO,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"SALDO %18s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);
		    
		    memset(buf,0,sizeof(buf));
		    memset(str,0,sizeof(str));
    	    MAPGET(TRA_HASH,buf,lblKO);
    	    bin2hex(str,buf,HASH_LEN);
    	    MAPPUTSTR(rptBuf16,str,lblKO);
    	    								
			key = rloPrepaidPayment;
	        break;

		case trtPrepaidDeposit:
			MAPPUTSTR(rptJudul, "ISI ULANG DEPOSIT", lblKO);  
			MAPPUTSTR(rptBuf17, "BRIZZI", lblKO);  
            MAPPUTSTR(rptBuf1, "No. Kartu BRIZZI :", lblKO);
            memset(Pan,0,sizeof(Pan));
            mapGet(TRA_NOMOR_KARTU_BRIZZI,Pan,sizeof(Pan));
            MAPPUTSTR(rptBuf2, Pan, lblKO);
            
            //nominal
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"NOMINAL %16s",buf);
			MAPPUTSTR(rptBuf3,str,lblKO);
            
            key = rloPrepaidDeposit;
	        break;

		case trtPrepaidTopUp:
			MAPPUTSTR(rptJudul, "ISI ULANG BRIZZI", lblKO);  
            
            //No. kartu
            MAPPUTSTR(rptBuf1, "No. Kartu BRIZZI :", lblKO);
            memset(buf,0,sizeof(buf));
            mapGet(TRA_NOMOR_KARTU_BRIZZI,buf,LEN_TRA_NOMOR_KARTU_BRIZZI);
            MAPPUTSTR(rptBuf2, buf, lblKO);
            
            //nominal
			memset(amount,0,sizeof(amount));
			mapGet(traAmt,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"NOMINAL %16s",buf);
			MAPPUTSTR(rptBuf3,str,lblKO);
            
			//saldo
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SISA_SALDO,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"SALDO %18s",buf);
			MAPPUTSTR(rptBuf4,str,lblKO);
            
            key = rloPrepaidTopUp;
	        break;
	        
        case trtPrepaidAktivasi:
            MAPPUTSTR(rptJudul, "AKTIVASI DEPOSIT", lblKO); 
            MAPPUTSTR(rptBuf17, "BRIZZI", lblKO);  
            
            //No. kartu
            memset(Pan,0,sizeof(Pan));
            mapGet(traPan,Pan,sizeof(Pan));
            sprintf(buf,"No. Kartu BRIZZI : %s",Pan);
            MAPPUTSTR(rptBuf1, buf, lblKO);  
            
            //saldo awal
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SALDO_AWAL,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Saldo Awal       : %s",buf);
			MAPPUTSTR(rptBuf2,str,lblKO);
            
            //amount AKTIVASI
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SALDO_DEPOSIT,amount,sizeof(amount));
			amount[LEN_TRA_SALDO_DEPOSIT-2]=0;
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Aktivasi Deposit : %s",buf);
			MAPPUTSTR(rptBuf3,str,lblKO);            
            
            //saldo akhir
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SISA_SALDO,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Saldo Akhir      : %s",buf);
			MAPPUTSTR(rptBuf4,str,lblKO);            
            
            //sisa deposit
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SISA_SALDO_DEPOSIT,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Sisa Deposit     : %s",buf);
			MAPPUTSTR(rptBuf5,str,lblKO);              
            
            //SALDO AKHIR          
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SISA_SALDO,amount,sizeof(amount));
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"SALDO %18s",buf);
			MAPPUTSTR(rptBuf6,str,lblKO);              
            
            key = rloPrepaidAktivasi;
            break;
            
        case trtPrepaidRedeem:
            MAPPUTSTR(rptJudul, "Redeem BRIZZI", lblKO); 
            
            //No. kartu
            memset(buf,0,sizeof(buf));
//            MAPPUTSTR(rptBuf1, "No Kartu BRIZZI :", lblKO);  
            mapGet(TRA_NOMOR_KARTU_BRIZZI,buf,LEN_TRA_NOMOR_KARTU_BRIZZI);
//            MAPPUTSTR(rptBuf2, buf, lblKO);
            sprintf(str,"No Kartu BRIZZI : %s",buf);  
            MAPPUTSTR(rptBuf1, str, lblKO);          

            //saldo kartu
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SISA_SALDO,amount,sizeof(amount));
			amount[AMOUNT_LEN_S]=0;
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Saldo Kartu     : %s",buf);
			MAPPUTSTR(rptBuf3,str,lblKO);        
            
            //saldo Deposit
			memset(amount,0,sizeof(amount));
			mapGet(TRA_SALDO_DEPOSIT,amount,sizeof(amount));
			amount[AMOUNT_LEN_S]=0;
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Saldo Deposit   : %s",buf);
			MAPPUTSTR(rptBuf4,str,lblKO);            
            
            //fee
			memset(amount,0,sizeof(amount));
			mapGet(TRA_FEE,amount,sizeof(amount));
			amount[AMOUNT_LEN_S]=0;
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Fee             : %s",buf);
			MAPPUTSTR(rptBuf5,str,lblKO);  
			               
            //Total Redeem
			memset(amount,0,sizeof(amount));
			mapGet(TRA_TOTAL_REDEEM,amount,sizeof(amount));
			amount[AMOUNT_LEN_S]=0;
		    memset(buf,0,sizeof(buf));
			strcpy(buf,"Rp. ");
			fmtAmt(buf+4, amount, 0, ",.");
			sprintf(str,"Total Redeem    : %s",buf);
			MAPPUTSTR(rptBuf6,str,lblKO);  
			
			MAPPUTSTR(rptBuf7,"Status Kartu    : CLOSE",lblKO);
			sprintf(str,"%18s","Redeem BERHASIL");
			MAPPUTSTR(rptBuf8,str,lblKO);
			
            key = rloPrepaidRedeem;
            break;   	        
#endif		        
// -- @agmr - BRI - receipt  			
			
		default:
		    ret = 0;
			goto lblEnd;
	}

    if(isOneReceipt != NULL)
        *isOneReceipt = singleReceipt;
    if(rlo != NULL)
        *rlo = key;
        
	ret = 1;
	goto lblEnd;

lblKO:
	ret = -1;
	goto lblEnd;
lblEnd:
	trcFN("briPrintData ret=%d\n", ret);
	return ret;    
}


void briLogDuplicata(byte jenisLog)
{
	int ret, logCount;
	char rocRef[lenInvNum + 1];
	char CrdType[lenCardTransType + 1];
	char traName[prtW + 1];
	char entMod;
	word txnType, ptrTrx, trxNum, key, idx = 0;
	card logRoc;
	byte voidTxn;

//++ @agmr - BRI    
    byte singleReceipt=0;
    word transType, menuItm;
    transType = key;
    word regBriLogSize,regBriLogIdx,briLogBeg,briLogROC,briLogEntMod;
    word briLogCardType,briLogMnuItm,briLogVoidFlag,briLogDatTim;
    
    trcS("briLogDuplicata Beg\n");
//-- @agmr - BRI        

	switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        regBriLogSize   = regCLogSize;
	        regBriLogIdx    = regCLogIdx;
	        briLogBeg       = cLogBeg;
	        briLogROC       = cLogROC;
	        briLogEntMod    = cLogEntMod;
	        briLogCardType  = cLogCardType;
	        briLogMnuItm    = cLogMnuItm;
	        briLogVoidFlag  = cLogVoidFlag;
	        briLogDatTim    = cLogDatTim;
	        briLogVoidFlag  = cLogVoidFlag;
	        break;
	    case MINI_ATM_LOG:
	        regBriLogSize   = regMLogSize;
	        regBriLogIdx    = regMLogIdx;
	        briLogBeg       = mLogBeg;
	        briLogROC       = mLogROC;
	        briLogEntMod    = mLogEntMod;
	        briLogCardType  = mLogCardType;
	        briLogMnuItm    = mLogMnuItm;
	        briLogVoidFlag  = mLogVoidFlag;
	        briLogDatTim    = mLogDatTim;
	        briLogVoidFlag  = mLogVoidFlag;
	        break;
	    case TUNAI_LOG:
	        regBriLogSize   = regTLogSize;
	        regBriLogIdx    = regTLogIdx;
	        briLogBeg       = tLogBeg;
	        briLogROC       = tLogROC;
	        briLogEntMod    = tLogEntMod;
	        briLogCardType  = tLogCardType;
	        briLogMnuItm    = tLogMnuItm;
	        briLogVoidFlag  = tLogVoidFlag;
	        briLogDatTim    = tLogDatTim;
	        briLogVoidFlag  = tLogVoidFlag;
	        break;
	    default:
	        goto lblKO;
	}

	memset(rocRef, 0x00, sizeof(rocRef));
	
	MAPGETWORD(regBriLogSize, trxNum, lblKO);
	logCount = trxNum;
	CHECK(logCount > 0, lblNoTran);

	MAPGETWORD(regBriLogIdx, ptrTrx, lblKO);

	if(ptrTrx > 0)
	{
		trxNum = ptrTrx;
		mapMove(briLogBeg, trxNum - 1);
	}
	else
	{
	    //jika diawal index, maka yang diambil record diakhir file.
	    mapMove(briLogBeg, trxNum - 1);
	}

	MAPGETCARD(briLogROC, logRoc, lblKO);
	num2dec(rocRef, logRoc, 0);

	MAPPUTSTR(traFindRoc, rocRef, lblKO);

    ret = briLogLoadByRoc(jenisLog);
	CHECK(ret >= 0, lblKO);

	if(ret == 0)
		goto lblEnd;

	ret = mapGetByte(briLogEntMod, entMod);    //Get Entry Mode
	CHECK(ret >= 0, lblKO);

	MAPGET(briLogCardType, CrdType, lblKO);
	MAPPUTSTR(traCardType, CrdType, lblKO);

//	if(entMod == 'k')
//		key = rloManualSaleDup;
//	else
//	{
		MAPGETWORD(briLogMnuItm, menuItm, lblKO);  //Get Transaction Type

		key = 0;
		getBriTransTypeName(&txnType, NULL, menuItm);
		ret = briPrintData(txnType, &key, &singleReceipt,1);
		if(ret <= 0)
		    goto lblKO;
		idx = txnType;

//	}
	VERIFY(key);

	MAPGETBYTE(briLogVoidFlag, voidTxn, lblKO);

	ret = usrInfo(infDuplicatePrinting);
	CHECK(ret >= 0, lblKO);

//	if(voidTxn)
//		key = rloVoidDup;

	mapMove(rqsBeg, idx - 1);

	MAPGET(rqsRpt, traName, lblKO);
	MAPPUTSTR(traTransType, traName, lblKO);

	ret = strFormatDatTim(briLogDatTim);
	CHECK(ret >= 0, lblKO);

//	MAPGET(logTraAmt, amtS, lblKO);
//	ret = dec2num(&traAmt, amtS, lenAmt);
//	MAPGET(logTipAmt, amtS, lblKO);
//	ret = dec2num(&tipAmt, amtS, lenAmt);
//	ret = num2dec(amtS, (traAmt + tipAmt), lenAmt);
//	MAPPUTSTR(traTotAmt, amtS, lblKO);

	trcS("Printing Receipt\n");
	rptReceipt(rloDuplicateLine2);
	ret = rptReceipt(key);      // Print Latest transaction receipt (Duplicate)
	rptReceipt(rloFeed);
	//ret = logLoadCurContext();
	ret = briLogLoadCurContext(jenisLog);
	CHECK(ret >= 0, lblKO);

	goto lblEnd;

lblNoTran:
	usrInfo(infNoTran);
	goto lblEnd;
lblKO:
	usrInfo(infProcessingError);
	goto lblEnd;
lblEnd:
	trcS("briLogDuplicata End\n");
}

void briLogPrintTxn(byte jenisLog)
{
	int ret, logCount;
	char rocRef[lenInvNum + 1];
	char CrdType[lenCardTransType + 1];
	char traName[prtW + 1];
	char entMod;
	word txnType, trxNum, key, idx = 0;
//	char amtS[lenAmt + 1];
//	card traAmt, tipAmt;
	byte voidTxn;

//++ @agmr - BRI    
    byte singleReceipt=0;
//    char str[128];
//    char buf[128],buf1[128];
//    char amount[20];
    word transType;
    transType = key;
//    card Amt;
    word regBriLogSize,regBriLogIdx,briLogBeg,briLogROC,briLogEntMod;
    word briLogCardType,briLogMnuItm,briLogVoidFlag,briLogDatTim;
    word menuItm;

//-- @agmr - BRI        


	trcS("logPrintTxn Beg\n");
	
	switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        regBriLogSize   = regCLogSize;
	        regBriLogIdx    = regCLogIdx;
	        briLogBeg       = cLogBeg;
	        briLogROC       = cLogROC;
	        briLogEntMod    = cLogEntMod;
	        briLogCardType  = cLogCardType;
	        briLogMnuItm    = cLogMnuItm;
	        briLogVoidFlag  = cLogVoidFlag;
	        briLogDatTim    = cLogDatTim;
	        briLogVoidFlag  = cLogVoidFlag;	        
	        break;
	    case MINI_ATM_LOG:
	        regBriLogSize   = regMLogSize;
	        regBriLogIdx    = regMLogIdx;
	        briLogBeg       = mLogBeg;
	        briLogROC       = mLogROC;
	        briLogEntMod    = mLogEntMod;
	        briLogCardType  = mLogCardType;
	        briLogMnuItm    = mLogMnuItm;
	        briLogVoidFlag  = mLogVoidFlag;
	        briLogDatTim    = mLogDatTim;
	        briLogVoidFlag  = mLogVoidFlag;	        
	        break;
	    case TUNAI_LOG:
	        regBriLogSize   = regTLogSize;
	        regBriLogIdx    = regTLogIdx;
	        briLogBeg       = tLogBeg;
	        briLogROC       = tLogROC;
	        briLogEntMod    = tLogEntMod;
	        briLogCardType  = tLogCardType;
	        briLogMnuItm    = tLogMnuItm;
	        briLogVoidFlag  = tLogVoidFlag;
	        briLogDatTim    = tLogDatTim;
	        briLogVoidFlag  = tLogVoidFlag;	        
	        break;
	    default:
	        goto lblKO;
	}
	
	
	memset(rocRef, 0x00, sizeof(rocRef));

    MAPGETWORD(regBriLogSize, trxNum, lblKO);
	logCount = trxNum;
	CHECK(logCount > 0, lblNoTran);

	ret = scrDlg(infEnterTrace, traFindRoc);
	CHECK(ret >= 0, lblKO);

    ret = briLogLoadByRoc(jenisLog);
	CHECK(ret >= 0, lblKO);

	if(ret == 0)
		goto lblEnd;

	ret = mapGetByte(briLogEntMod, entMod);    //Get Entry Mode
	CHECK(ret >= 0, lblKO);

	MAPGET(briLogCardType, CrdType, lblKO);
	MAPPUTSTR(traCardType, CrdType, lblKO);

//	if(entMod == 'k')
//		key = rloManualSaleDup;
//	else
//	{
		MAPGETWORD(briLogMnuItm, menuItm, lblKO);  //Get Transaction Type

		key = 0;
		getBriTransTypeName(&txnType, NULL, menuItm);
		ret = briPrintData(txnType, &key, &singleReceipt,1);
		if(ret <= 0)
		    goto lblKO;
		idx = txnType;		

//	}
	VERIFY(key);

	MAPGETBYTE(briLogVoidFlag, voidTxn, lblKO);

	ret = usrInfo(infDuplicatePrinting);
	CHECK(ret >= 0, lblKO);

	if(voidTxn)
		key = rloVoidDup;

	mapMove(rqsBeg, idx - 1);

	MAPGET(rqsRpt, traName, lblKO);
	MAPPUTSTR(traTransType, traName, lblKO);

	ret = strFormatDatTim(briLogDatTim);
	CHECK(ret >= 0, lblKO);

//	MAPGET(logTraAmt, amtS, lblKO);
//	ret = dec2num(&traAmt, amtS, lenAmt);
//	MAPGET(logTipAmt, amtS, lblKO);
//	ret = dec2num(&tipAmt, amtS, lenAmt);
//	ret = num2dec(amtS, (traAmt + tipAmt), lenAmt);
//	MAPPUTSTR(traTotAmt, amtS, lblKO);

	trcS("Printing Receipt\n");
	rptReceipt(rloDuplicateLine2);
	ret = rptReceipt(key);      // Print transaction receipt via Trace Number
	rptReceipt(rloFeed);
	ret = briLogLoadCurContext(jenisLog);
	CHECK(ret >= 0, lblKO);

	goto lblEnd;

lblNoTran:
	usrInfo(infNoTran);
	goto lblEnd;
lblKO:
	usrInfo(infProcessingError);
	goto lblEnd;
lblEnd:
	trcS("logPrintTxn End\n");
}


int briLogSaveCurContext(byte jenisLog)
{
	int ret;
	byte idx;
	word key;
	byte buf[256];
	word briLogBeg,briLogEnd;

	trcS("logSaveCurContext Beg\n");
	
    switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        briLogBeg       = cLogBeg;
	        briLogEnd       = cLogEnd;
	        break;
	    case MINI_ATM_LOG:
	        briLogBeg       = mLogBeg;
	        briLogEnd       = mLogEnd;
	        break;
	    case TUNAI_LOG:
	        briLogBeg       = tLogBeg;
	        briLogEnd       = tLogEnd;
	        break;
	    default:
	        goto lblKO;
	}	
	
	for (key = briLogBeg + 1; key < briLogEnd; key++) // Loop around each field from the record of the "log" table
	{
		idx = (byte) (key - briLogBeg - 1);    // Index key field
		switch(jenisLog)
		{
		case CARD_SERVICE_LOG:
			key = cLogKey[idx];
			MAPGET(key, buf, lblDBA);
			ret = mapPut(cLogKeyContext[idx], buf, mapDatLen(key));
			CHECK(ret >= 0, lblDBA);
			break;
		case MINI_ATM_LOG:
			key = mLogKey[idx];
			MAPGET(key, buf, lblDBA);
			ret = mapPut(mLogKeyContext[idx], buf, mapDatLen(key));
			CHECK(ret >= 0, lblDBA);
			break;
		case TUNAI_LOG:
			key = tLogKey[idx];
			MAPGET(key, buf, lblDBA);
			ret = mapPut(tLogKeyContext[idx], buf, mapDatLen(key));
			CHECK(ret >= 0, lblDBA);
			break;
		}

	}
	ret = 1;
	goto lblEnd;
lblKO:
lblDBA:                      // Data base access error encountered
	ret = -1;
	goto lblEnd;
lblEnd:
	trcFN("logSaveCurContext: ret=%d #\n", ret);
	return ret;

}

int briLogLoadCurContext(byte jenisLog)
{
	int ret;
	word key;
	byte idx;
	byte buf[256];
	card dupStan, dupROC;
	word regBriLogSize,regBriLogIdx,briLogBeg,briLogEnd;

	trcS("logLoadCurContext Beg\n");

    switch(jenisLog)
	{
	    case CARD_SERVICE_LOG:
	        regBriLogSize   = regCLogSize;
	        regBriLogIdx    = regCLogIdx;
	        briLogBeg       = cLogBeg;
	        briLogEnd       = cLogEnd;
	        break;
	    case MINI_ATM_LOG:
	        regBriLogSize   = regMLogSize;
	        regBriLogIdx    = regMLogIdx;
	        briLogBeg       = mLogBeg;
	        briLogEnd       = mLogEnd;
	        break;
	    case TUNAI_LOG:
	        regBriLogSize   = regTLogSize;
	        regBriLogIdx    = regTLogIdx;
	        briLogBeg       = tLogBeg;
	        briLogEnd       = tLogEnd;
	        break;
	    default:
	        goto lblKO;
	}
	for (key = briLogBeg + 1; key < briLogEnd; key++) // Loop around each field from the record of the "log" table
	{
		idx = (byte) (key - briLogBeg - 1);    // Index key field

		switch(jenisLog)
		{
    		case CARD_SERVICE_LOG:
        		key = cLogKeyContext[idx];
        		MAPGET(key, buf, lblDBA);	
        		ret = mapPut(cLogKey[idx], buf, mapDatLen(key));
        		CHECK(ret >= 0, lblDBA);    			    
    		    break;
    		case MINI_ATM_LOG:
        		key = mLogKeyContext[idx];
        		MAPGET(key, buf, lblDBA);	
        		ret = mapPut(mLogKey[idx], buf, mapDatLen(key));
        		CHECK(ret >= 0, lblDBA);		    
    		    break;
    		case TUNAI_LOG:
        		key = tLogKeyContext[idx];
        		MAPGET(key, buf, lblDBA);	
        		ret = mapPut(tLogKey[idx], buf, mapDatLen(key));
        		CHECK(ret >= 0, lblDBA);		    
    		    break;
		}

	}

	//-Create Copy-

	MAPGETCARD(regDupSTAN, dupStan, lblDBA);
	if(dupStan >= 1000000) //@agmr
	    dupStan-= 1000000;
	mapPutCard(regSTAN, dupStan);
	MAPGETCARD(regDupInvNum, dupROC, lblDBA);
	if(dupROC >= 1000000) //@agmr
	    dupROC -= 1000000;
	mapPutCard(regInvNum, dupROC);

	ret = 1;
	goto lblEnd;
lblKO:
lblDBA:                      // Data base access error encountered
	ret = -1;
	goto lblEnd;
lblEnd:
	trcFN("logLoadCurContext: ret=%d #\n", ret);
	return ret;
}

void briPrintDetail(byte jenisLog)
{
    int ret;
    char buf[20], buf1[15];
    card dd, mm, yy;
    
    dspClear();
    dspLS(2,"DDMMYYYY");
    
    while(1)
    {	
    	memset(buf,0,sizeof(buf));
    	ret = enterPhr(3, buf, 9);
    	if(ret !=kbdVAL)
    		return;
    	if(strlen(buf)<8)
    		continue;
    	dec2num(&dd,buf,2);
    	dec2num(&mm,buf+2,2);
    	dec2num(&yy,buf+4,4);
    	
    	if(mm>12 || mm<=0)
    	    continue;
    	
    	if(dd>31 || dd<=0)
    	    continue;
    	
    	break;   	
    }
    
    memset(buf1,0,sizeof(buf1));
    memcpy(buf1,buf+4,4);
    memcpy(buf1+4,buf+2,2);
    memcpy(buf1+6,buf,2);
    
	briLogPrintDetail(jenisLog,buf1);        
}

void briPrintDetailToday(byte jenisLog)
{
	briLogPrintDetail(jenisLog,"");
}

void briPrintTotal(byte jenisLog)
{
    int ret;
    char buf[20], buf1[15];
    card dd, mm, yy;
    
    dspClear();
    dspLS(2,"DDMMYYYY");
    while(1)
    {	
    	memset(buf,0,sizeof(buf));
    	ret = enterPhr(3, buf, 9);
    	if(ret !=kbdVAL)
    		return;
    	if(strlen(buf)<8)
    		continue;
    	dec2num(&dd,buf,2);
    	dec2num(&mm,buf+2,2);
    	dec2num(&yy,buf+4,4);
    	
    	if(mm>12 || mm<=0)
    	    continue;
    	
    	if(dd>31 || dd<=0)
    	    continue;
    	
    	break;   	
    }
    
    memset(buf1,0,sizeof(buf1));
    memcpy(buf1,buf+4,4);
    memcpy(buf1+4,buf+2,2);
    memcpy(buf1+6,buf,2);
    
	briLogPrintTotal(jenisLog,buf1);    
}

void briPrintTotalToday(byte jenisLog)
{
    briLogPrintTotal(jenisLog,"");
}

//-- @agmr - BRI2

//++ @agmr - BRI3
int briGetAcq(byte cardType, byte* acquirerId)
{
/*
    cardType = 1 -> credit
    cardType = 2 -> debit
*/    
    word menuItem;
    int ret;
    char name[20],expectedName[20];
    byte idx;
    
    memset(name,0,sizeof(name));
    if(acquirerId == NULL)
        goto lblKO;

    MAPGETWORD(traMnuItm, menuItem, lblKO);
    switch(menuItem)
    {
    	//pakai acq asli
        case mnuSale:
        case mnuInstallment:
        case mnuPreaut: //BRI5
        case mnuAut: //BRI5
        case mnuRefund:
//            if(cardType == CREDIT_CARD || cardType == NON_BRI_CARD)
//                mapGetByte(binCrAcqID, *acquirerId);
//            else
//                mapGetByte(binDbAcqID, *acquirerId);
            if(cardType == DEBIT_CARD)
                mapGetByte(binDbAcqID, *acquirerId);
            else
                mapGetByte(binCrAcqID, *acquirerId);
            return 1;
        case mnuInfoSaldo:
        case mnuInfoSaldoBankLain:
        case mnuTransferSesamaBRI:
        case mnuTransferAntarBank: 
		/*Changed By Ali*/
		case mnuPembayaranTvBerlangganan:
		case mnuPembayaranTvInd:
		case mnuPembayaranTvOkTv:
		case mnuPembayaranTvTopTv:
		case mnuRegistrasiSmsBanking:
		case mnuRegistrasiTrxTransfer:
		case mnuRegistrasiTrxPulsa:
		/*End of Changed By Ali*/                       
        case mnuPembayaranPLN:
        case mnuPembayaranCicilanFIF:
        case mnuPembayaranCicilanBAF:
        case mnuPembayaranCicilanOTO:
        case mnuPembayaranCicilanFinansia:
        case mnuPembayaranCicilanVerena:
        case mnuPembayaranCicilanWOM:
        case mnuPembayaranSimpati50:
        case mnuPembayaranSimpati100:
        case mnuPembayaranSimpati150:
        case mnuPembayaranSimpati200:
        case mnuPembayaranSimpati300:
        case mnuPembayaranSimpati500:
        case mnuPembayaranSimpati1000:
        case mnuPembayaranMentari50:
        case mnuPembayaranMentari100:
        case mnuPembayaranMentari250:
        case mnuPembayaranMentari500:
        case mnuPembayaranMentari1000:
        case mnuPembayaranIm325:    
        case mnuPembayaranIm350:    
        case mnuPembayaranIm375:    
        case mnuPembayaranIm3100:   
        case mnuPembayaranIm3150:   
        case mnuPembayaranIm3200:   
        case mnuPembayaranIm3500:   
        case mnuPembayaranIm31000:  
    	case mnuPembayaranXl25: 
        case mnuPembayaranXl50: 
        case mnuPembayaranXl75: 
        case mnuPembayaranXl100: 
        case mnuPembayaranXl150: 
        case mnuPembayaranXl200: 
        case mnuPembayaranXl300: 
        case mnuPembayaranXl500: 
           
        case mnuPembayaranZakat:
        case mnuPembayaranZakatDhuafa:
        case mnuPembayaranZakatYBM:
        case mnuPembayaranInfaqDhuafa:
        case mnuPembayaranInfaqYBM:
        case mnuPembayaranDPLKDhuafa:
            
        case mnuPembayaranHalo:
        case mnuPembayaranMatrix:

        case mnuRegistrasiInternetBanking:
        case mnuRegistrasiPhoneBanking:            	        

        //card service
        case mnuAktivasiKartu:
        case mnuRenewalKartu:
        case mnuReissuePIN:
        case mnuGantiPIN:
        case mnuGantiPasswordSPV:
            if(cardType == CREDIT_CARD)   	
        	    strcpy(expectedName,"MINI ATM C");
        	else //cardType = DEBIT_CARD, NON_BRI_DEBIT_CARD DAN NON_BRI_CREDIT_CARD
        	    strcpy(expectedName,"MINI ATM D");
  	        break;
        	
        //tunai
        case mnuSetorSimpanan:
        case mnuSetorPinjaman:
        case mnuTarikTunai:
        case mnuVoidTarikTunai:
            if(cardType == CREDIT_CARD)  
                strcpy(expectedName,"TUNAI C");
            else if(cardType == DEBIT_CARD) 
                strcpy(expectedName,"TUNAI D");                
            else //NON_BRI_CREDIT_CARD dan NON_BRI_DEBIT_CARD
                strcpy(expectedName,"MINI ATM D");
            break;
#ifdef PREPAID
        case mnuTopUpDeposit:
        case mnuTopUpOnline:
        case mnuAktivasiDeposit:
        case mnuInfoDeposit:
        case mnuPrepaidSettlement:
        case mnuPrepaidPayment:
        case mnuPrepaidRedeem:
            strcpy(expectedName,"BRIZZI");
            break;
#endif
#ifdef ABSENSI
		/*Changed By Ali*/
		//Absensi
		case mnuAbsen:
		case mnuDatang:
		case mnuPulangs:
		case mnuIstirahatA:
		case mnuIstirahatB:
		case mnuLemburA:
		case mnuLemburB:
		case mnuShifts:
		case mnuShiftsI:
		case mnuShiftsIA:
		case mnuShiftsIB:
		case mnuShiftsII:
		case mnuShiftsIIA:
		case mnuShiftsIII:
		case mnuShiftsIIIA:
		case mnuShiftsIIIB:
		/*End Of Changed By Ali*/
#endif	
        case mnuDebitLogon: //@@AS0.0.26     
        	strcpy(expectedName,"MINI ATM D");
        	break;             
        default:
            return 1;       
    }
	for (idx = 0; idx < dimAcq; idx++)
	{
		ret = mapMove(acqBeg, idx);
		CHECK(ret >= 0, lblKO);
		MAPGET(acqName, name, lblKO);

		if(memcmp(expectedName, name, strlen(expectedName)) == 0)
		{
			mapGetByte(acqID, *acquirerId);
			return 1;
		}
	} 
	*acquirerId = 0;
    return 0;
lblKO:	
	return -1;  
}
//-- @agmr - BRI3

void cLogReset(void)
{
	int ret;

	ret = usrInfo(infConfirmClearClog);
	if(ret != kbdVAL)
		return;

	ret = mapReset(cLogBeg);
	CHECK(ret >= 0, lblKO)
	MAPPUTWORD(regCLogIdx, 0, lblKO);
	MAPPUTWORD(regCLogSize, 0, lblKO);
	goto lblEnd;
lblKO:
	usrInfo(infProcessingError);
	ret = 0;
	goto lblEnd;
lblEnd:
	;
}

void mLogReset(void)
{
	int ret;

	ret = usrInfo(infConfirmClearMlog);
	if(ret != kbdVAL)
		return;
		
	ret = mapReset(mLogBeg);
	CHECK(ret >= 0, lblKO)
	MAPPUTWORD(regMLogIdx, 0, lblKO);
	MAPPUTWORD(regMLogSize, 0, lblKO);
	goto lblEnd;
lblKO:
	usrInfo(infProcessingError);
	ret = 0;
	goto lblEnd;
lblEnd:
	;
}

void tLogReset(void)
{
	int ret;

	ret = usrInfo(infConfirmClearTlog);
	if(ret != kbdVAL)
		return;
		
	ret = mapReset(tLogBeg);
	CHECK(ret >= 0, lblKO)
	MAPPUTWORD(regTLogIdx, 0, lblKO);
	MAPPUTWORD(regTLogSize, 0, lblKO);
	goto lblEnd;
lblKO:
	usrInfo(infProcessingError);
	ret = 0;
	goto lblEnd;
lblEnd:
	;
}

#ifndef REVERSAL_TERPISAH
int setBriReversalIdx()
{
//    byte idx;
//    char name[20];
//    int i;
    int ret;
    
    //semua transaksi reversal masuk ke stau record saja
    //tidak tergantung acquirer
    MAPPUTBYTE(appBriRevIndex,0,lblKO);
    return 1;

//	 ***dibuka dan dirubah bila reversal tergantung acquirer
//   ***dimana Mini atm dan Tunai satu kelompok, dan sale serta INSTALLMENT
//   ***dalam kelompok lain        
//	for (i = 0; i < dimAcq; i++)
//	{
//		ret = mapMove(acqBeg, i);
//		CHECK(ret >= 0, lblKO);
//		MAPGET(acqName, name, lblKO);
//
//		if(memcmp("MINI ATM", name, strlen("MINI ATM")) == 0 ||
//		   memcmp("TUNAI", name, strlen("TUNAI")) == 0 
//		  )
//		{
//		    ret = mapGetByte(acqID, idx);
//		    if(ret < 0)
//		        goto lblKO;
//		    if(idx > 0)
//		    {
//		        ret = mapPutByte(appBriRevIndex,idx-1);
//		        if(ret < 0)
//		            goto lblKO;
//		    }
//		    else
//		        goto lblKO;
//		    ret = 1;
//		    goto lblEnd;
//		}
//	}  
	
lblKO:
    ret = -1;
    goto lblEnd;

lblEnd:
    return ret;   
}

int getBriReversalIdx()
{
//    int tmp;
    int ret;
    byte idx;

    //semua transaksi reversal masuk ke stau record saja
    //tidak tergantung acquirer    
    MAPGETBYTE(appBriRevIndex,idx,lblKO);
    mapMove(revBeg,idx);

//	 ***dibuka dan dirubah bila reversal tergantung acquirer
//   ***dimana Mini atm dan Tunai satu kelompok, dan sale serta INSTALLMENT
//   ***dalam kelompok lain    
//    tmp = getJenisLog();
//    if(tmp>0)
//    {
//        MAPGETBYTE(appBriRevIndex,idx, lblKO);
//    }
//    else
//    {
//        MAPGETBYTE(traAcqIdx,idx,lblKO);
//    }

        
//    mapMove(revBeg, idx);
    return 1;    

lblKO:
    return -1;
}
#endif

int getJenisLog()
{
    word menuItem;
    int ret;
    
    MAPGETWORD(traMnuItm, menuItem, lblKO);
    switch(menuItem)
    {
        //Mini ATM
        case mnuInfoSaldo:
        case mnuInfoSaldoBankLain:
            
        case mnuTransferSesamaBRI:
        case mnuTransferAntarBank:
            
        case mnuPembayaranPLN:
        case mnuPembayaranCicilanFIF:
        case mnuPembayaranCicilanBAF:
        case mnuPembayaranCicilanOTO:
        case mnuPembayaranCicilanFinansia:
        case mnuPembayaranCicilanVerena:
        case mnuPembayaranCicilanWOM:
        case mnuPembayaranSimpati50:
        case mnuPembayaranSimpati100:
        case mnuPembayaranSimpati150:
        case mnuPembayaranSimpati200:
        case mnuPembayaranSimpati300:
        case mnuPembayaranSimpati500:
        case mnuPembayaranSimpati1000:
        case mnuPembayaranMentari50:
        case mnuPembayaranMentari100:
        case mnuPembayaranMentari250:
        case mnuPembayaranMentari500:
        case mnuPembayaranMentari1000:
        case mnuPembayaranIm325:    
        case mnuPembayaranIm350:    
        case mnuPembayaranIm375:    
        case mnuPembayaranIm3100:   
        case mnuPembayaranIm3150:   
        case mnuPembayaranIm3200:   
        case mnuPembayaranIm3500:   
        case mnuPembayaranIm31000:  
    	case mnuPembayaranXl25: 
        case mnuPembayaranXl50: 
        case mnuPembayaranXl75: 
        case mnuPembayaranXl100: 
        case mnuPembayaranXl150: 
        case mnuPembayaranXl200: 
        case mnuPembayaranXl300: 
        case mnuPembayaranXl500: 
           
        case mnuPembayaranZakat:
        case mnuPembayaranZakatDhuafa:
        case mnuPembayaranZakatYBM:
        case mnuPembayaranInfaqDhuafa:
        case mnuPembayaranInfaqYBM:
        case mnuPembayaranDPLKDhuafa:
            
        case mnuPembayaranHalo:
        case mnuPembayaranMatrix:

        case mnuRegistrasiInternetBanking:
        case mnuRegistrasiPhoneBanking: 
		/*Changed By Ali*/
		case mnuRegistrasiSmsBanking:
		case mnuPembayaranTvBerlangganan:
		case mnuPembayaranTvInd:
		case mnuPembayaranTvOkTv:
		case mnuPembayaranTvTopTv:
		case mnuRegistrasiTrxPulsa:
		case mnuRegistrasiTrxTransfer:
		/*End of Changed By Ali*/                       
            return MINI_ATM_LOG;
            
        //card service
        case mnuAktivasiKartu:
        case mnuRenewalKartu:
        case mnuReissuePIN:
        case mnuGantiPIN:
        case mnuGantiPasswordSPV:
            return CARD_SERVICE_LOG;    
        	
        //tunai
        case mnuSetorSimpanan:
        case mnuSetorPinjaman:
        case mnuTarikTunai:
        case mnuVoidTarikTunai:
            return CARD_SERVICE_LOG;	
#ifdef ABSENSI
		/*Changed By Ali*/
		//Absensi
		case mnuAbsen:
		case mnuDatang:
		case mnuPulangs:
		case mnuIstirahatA:
		case mnuIstirahatB:
		case mnuLemburA:
		case mnuLemburB:
		case mnuShifts:
		case mnuShiftsI:
		case mnuShiftsIA:
		case mnuShiftsIB:
		case mnuShiftsII:
		case mnuShiftsIIA:
		case mnuShiftsIII:
		case mnuShiftsIIIA:
		case mnuShiftsIIIB:
		/*End of Changed By Ali*/
#endif		                                    
        default:
            return 0;       
    }    
    
lblKO:
    return -1;
}

int getAllTid(ACQ_T* acq)
{
/* 
Hanya ada 1 TID yang sama yang disimpan
return: -1 error
        >0 banyaknya record yang disimpan
*/
	int ret;
    int i,j,idx=0;
    byte id;
    char tid[9];
    char name[lenName+1];
   
    for(i=0;i<dimAcq;i++)
    {
        mapMove(acqBeg,i);
        //MAPGET(acqID,&id, lblKO);
        MAPGETBYTE(acqID,id,lblKO);
        
        memset(tid,0,sizeof(tid));
        MAPGET(acqTID,tid,lblKO);
        
        memset(name,0,sizeof(name));
		MAPGET(acqName, name, lblKO);
		
		if(tid[0] == 0)
		    continue;
		
		for(j=0;j<idx;j++)
		{
		    //periksa tid ada yang sama atau tidak
		    if(memcmp((acq+j)->tid,tid,8)==0)
		    {
		        break;
		    }
		}
		if(j==idx)
		{
		    memcpy((acq+idx)->tid,tid,8);
		    (acq+idx)->acqIdx = id;
		    memcpy((acq+idx)->acqName,name,lenName);
		    idx++;
		}
    }
    return idx;
    
lblKO:
    return -1;
}

int getAllAcq(ACQ_T* acq)
{
	int ret;
    int i,idx=0;
    byte id;
    char tid[9];
    char name[lenName+1];
   
    for(i=0;i<dimAcq;i++)
    {
        mapMove(acqBeg,i);
        
        MAPGETBYTE(acqID,id,lblKO);

        memset(tid,0,sizeof(tid));
        MAPGET(acqTID,tid,lblKO);

        memset(name,0,sizeof(name));
		MAPGET(acqName, name, lblKO);
		
		if(name[0] == 0)
		    continue;
		
		(acq+idx)->acqIdx = id;
		memcpy((acq+idx)->tid,tid,8);
		memcpy((acq+idx)->acqName,name,lenName);
		
		idx++;		
	}
    return idx;
    
lblKO:
    return -1;
}

int selectAcquirer()
{
    ACQ_T acq[dimAcq];
    byte sta;  
    int ret;
    int i;
    int jumlahAcq;
	char mnu[MNUMAX][dspW + 1]; //the final menu array prepared to mnuSelect
	char *ptr[MNUMAX];          //array of pointers to mnu items
	int temp;
	byte acquirerId[MNUMAX+2];

    memset(acq,0,sizeof(acq));
    memset(mnu,0,sizeof(mnu));
    
    ret = getAllAcq(acq);
    if(ret < 0)
        goto lblKO;
    jumlahAcq = ret;
    
    for(i=0;i<MNUMAX;i++)
    {
        ptr[i]=NULL;
    }    
    
    strcpy(mnu[0],"Select Acquirer");
    ptr[0] = mnu[0];
    
    strcpy(mnu[1],"Semua Acquirer");
    ptr[1] = mnu[1];

    temp = 2;
    for(i=0;i<jumlahAcq;i++)
    {
        if( (memcmp(acq[i].acqName,"MINI ATM",8) == 0) ||
            (memcmp(acq[i].acqName,"TUNAI",5) == 0)   ||
            (memcmp(acq[i].acqName,"BRIZZI",5) == 0))
            continue;

        strcpy(mnu[temp],acq[i].acqName);
        ptr[temp] = mnu[temp];
        acquirerId[temp]=acq[i].acqIdx;
        temp++;
    }
    sta = 0; 

	ret = mnuSelect((Pchar *) ptr, sta, 60);    //perform user dialog
	if(ret <= 0)            //timeout or aborted - nothing to do
		goto lblKO;
    if(ret == 0)
        goto lblEnd;
    sta = ret;
	temp = sta % MNUMAX;
	if(temp == 1)
	    ret = 0xff;
	else
	    ret = (int)acquirerId[temp];
	goto lblEnd;        
lblKO:
    return -1;
lblEnd:
    return ret;
}

int selectAcquirer1()
{
    ACQ_T acq[dimAcq];
    byte sta;  
    int ret;
    int i;
    int jumlahAcq;
	char mnu[MNUMAX][dspW + 1]; //the final menu array prepared to mnuSelect
	char *ptr[MNUMAX];          //array of pointers to mnu items
	int temp;
	byte acquirerId[MNUMAX+2];

    memset(acq,0,sizeof(acq));
    memset(mnu,0,sizeof(mnu));
    
    ret = getAllAcq(acq);
    if(ret < 0)
        goto lblKO;
    jumlahAcq = ret;
    
    for(i=0;i<MNUMAX;i++)
    {
        ptr[i]=NULL;
    }    
    
    strcpy(mnu[0],"Select Acquirer");
    ptr[0] = mnu[0];
    
//    strcpy(mnu[1],"Semua Acquirer");
//    ptr[1] = mnu[1];

    temp = 1;
    for(i=0;i<jumlahAcq;i++)
    {
        if( (memcmp(acq[i].acqName,"MINI ATM",8) == 0) ||
            (memcmp(acq[i].acqName,"TUNAI",5) == 0)   ||
            (memcmp(acq[i].acqName,"BRIZZI",5) == 0))
            continue;

        strcpy(mnu[temp],acq[i].acqName);
        ptr[temp] = mnu[temp];
        acquirerId[temp]=acq[i].acqIdx;
        temp++;
    }
    sta = 0; 

	ret = mnuSelect((Pchar *) ptr, sta, 60);    //perform user dialog
	if(ret < 0)            //timeout or aborted - nothing to do
		goto lblKO;
    if(ret == 0)
        goto lblEnd;
    sta = ret;
	temp = sta % MNUMAX;
//	if(temp == 1)
//	    ret = 0xff;
//	else
	    ret = (int)acquirerId[temp];
	goto lblEnd;        
lblKO:
    return -1;
lblEnd:
    return ret;
}

int selectTerminalId(ACQ_T *acq, byte* jumlahTid)
{
    byte sta;  
    int ret;
    int i;
	char mnu[MNUMAX][dspW + 1]; //the final menu array prepared to mnuSelect
	char *ptr[MNUMAX];          //array of pointers to mnu items
	int temp;

    ret = getAllTid(acq);
    if(ret < 0)
        goto lblKO;
    *jumlahTid = ret;
    
    for(i=0;i<MNUMAX;i++)
    {
        ptr[i]=NULL;
    }    
    
    memset(mnu,0,sizeof(mnu));
    
    strcpy(mnu[0],"Pilih TID");
    ptr[0] = mnu[0];
    strcpy(mnu[1],"Semua TID");
    ptr[1] = mnu[1];

    for(i=0;i<*jumlahTid;i++)
    {
        strcpy(mnu[i+2],(acq+i)->tid);
        ptr[i+2] = mnu[i+2];
    }
    sta = 0; 

	ret = mnuSelect((Pchar *) ptr, sta, 60);    //perform user dialog
	if(ret <= 0)            //timeout or aborted - nothing to do
		goto lblKO;
    if(ret == 0)
        goto lblEnd;
    sta = ret;
	temp = sta % MNUMAX;
	//ret = (int)acq[temp-1].acqIdx;
	ret = (int) temp;
	goto lblEnd;        
lblKO:
    return -1;
lblEnd:
    return ret;
}

int checkPendingSettlement()
{
    byte isPending;
    int ret;

//#ifdef PREPAID
//    //Untuk prepaid tidak ada periksa pending settlement
//    if(isPrepaidTransaction(0)==1)
//        return 0;
//#endif
    
    MAPGETBYTE(acqIsPendingSettlement,isPending,lblKO);
    ret = (int) isPending;
    goto lblEnd;
    
lblKO:
    return -1;
lblEnd:
    if(ret == 1)
        usrInfo(infRetrySettle);
    return ret;
}

void ShowData(byte* txt, word len, int mode, int awalKolom, int banyakKolom)
{
//#define HEX_PAKAI_X	
   //mode = 0 hex, mode = 1 ascii, mode = 2 hex or ascii
//   char *buf;
	char buf[70];
   word c=0,i=0,j=0;
//   word column = 5;

/*
   if(mode == 0)
      buf = malloc(banyakKolom * 4+1+2);
   else if(mode == 1)
      buf = malloc(banyakKolom * 2+1+2);
   else
      buf = malloc(banyakKolom * 4+1+2);
*/	  
	memset(buf,0x20,awalKolom);
	j+=awalKolom;  	  
	  
   while(len != c)
   {

      if(mode == 0)
      {
#ifdef HEX_PAKAI_X      	
         sprintf(&buf[j],"x%02X ",txt[c]);
         j+=4;
#else
			sprintf(&buf[j],"%02X ",txt[c]);
         j+=3;         
#endif         
      }

      else if(mode == 1)
      {
         sprintf(&buf[j],"%c ",txt[c]);
         j+=2;
      }

      else
      {
         if(txt[c] < 0x20 || txt[c] > 0x7e)
         {
#ifdef HEX_PAKAI_X             	
            sprintf(&buf[j],"x%02X ",txt[c]);
            j+=4;
#else   
            sprintf(&buf[j],"%02X ",txt[c]);
            j+=3;
#endif                     
         }
         else
         {
            sprintf(&buf[j],"%c ",txt[c]);
            j+=2;
         }
      }
      i++;
      c++;
      if(i==banyakKolom || len==c)
      {   	
         prtES("\x1B\x20", buf);
         i=j=0;
//			memcpy(buf,"\x1B\x20",2);
//			memset(buf+2,0x20,awalKolom);
//			j+=(awalKolom+2);         
			memset(buf,0x20,awalKolom);
			j+=awalKolom;         
      }
   }
//   prtES("\x1B\x20"," ");
//    prtS("");
//   free(buf);
}

void viewMiniAtmLog()
{
	briViewBat(MINI_ATM_LOG,0);
}
void viewCardServiceLog()
{
	briViewBat(CARD_SERVICE_LOG,0);
}
void viewTunaiLog()
{
	briViewBat(TUNAI_LOG,0);
}

#ifdef TEST_BRI
#if 0
void testTulisNvm()
{
    int ret;
    byte buf[20];
    card tmp;
    word idx;
    
    mapReset(briLogBeg);
    MAPPUTCARD(regBriLogIdx, 0, lblDBA);
        
    mapPut(traBriBankId,"111",3);
    MAPPUTCARD(traBriLogROC,1,lblDBA);
    mapPut(traBriLogDateTime,"20110317121212",lenDatTim);
    ret = briLogSave();
    briLogLoadByIndex(0);
    
    mapPut(traBriBankId,"222",3);
    MAPPUTCARD(traBriLogROC,2,lblDBA);
    mapPut(traBriLogDateTime,"20220318121212",lenDatTim);
    ret = briLogSave();
    briLogLoadByIndex(1);
    
    mapPut(traBriBankId,"333",3);
    MAPPUTCARD(traBriLogROC,3,lblDBA);
    mapPut(traBriLogDateTime,"20330319121212",lenDatTim);
    ret = briLogSave();
    briLogLoadByIndex(2);
    
    mapPut(traBriBankId,"444",3);
    MAPPUTCARD(traBriLogROC,4,lblDBA);
    mapPut(traBriLogDateTime,"20440320121212",lenDatTim);
    ret = briLogSave();
    briLogLoadByIndex(3);
    
    mapPut(traBriBankId,"555",3);
    MAPPUTCARD(traBriLogROC,5,lblDBA);
    mapPut(traBriLogDateTime,"20550320121212",lenDatTim);
    ret = briLogSave();
    briLogLoadByIndex(0);
    briLogLoadByIndex(3);    


lblDBA:
	return;
}

void testBacaNvmIndex()
{
    int ret;
    byte buf[20];
    word idx;
    int i;
    
    for(i=0;i<5;i++)
    {
        ret = briLogLoadByIndex((card)i);
    }

lblDBA:
	return;
}

void testBacaNvmDate()
{
    int ret;
    byte buf[20];
    word idx;
    int i;
    
    for(i=0;i<5;i++)
    {
        ret = briLogLoadByDate((card)i,"20440320");
    }
    
lblDBA:
	return;
}

void testBacaNvmRoc()
{
    int ret;
    byte buf[20];
    word idx;
    int i;
    
    MAPPUTSTR(traFindRoc,"1",lblDBA);
    ret = briLogLoadByRoc();
    
    MAPPUTSTR(traFindRoc,"2",lblDBA);
    ret = briLogLoadByRoc();
    
    MAPPUTSTR(traFindRoc,"3",lblDBA);
    ret = briLogLoadByRoc();
    
    MAPPUTSTR(traFindRoc,"4",lblDBA);
    ret = briLogLoadByRoc();
    
    MAPPUTSTR(traFindRoc,"5",lblDBA);
    ret = briLogLoadByRoc();                


lblDBA:
	return;
}
#endif //if 0

void testBacaLogSemua()
{
    int ret;
    int i=0;

    /*
    dspClear();
    display_text(3,0,"test",dsp_ALIGN_LEFT);
    enterPhr(4,buf,10);
return;
    */
    i=0;
    do
    {
        ret = briLogLoadByIndex(MINI_ATM_LOG,(card)i++);
    }while(ret > 0);
    
    i=0;
    do
    {
        ret = briLogLoadByIndex(CARD_SERVICE_LOG,(card)i++);
    }while(ret > 0);
    
    i=0;
    do
    {
        ret = briLogLoadByIndex(TUNAI_LOG,(card)i++);
    }while(ret > 0);        

	return;
}
void testPrintTotalHariIni()
{
	briPrintTotalToday(MINI_ATM_LOG);
}

void testPrintTotalHariSemua()
{
	briLogPrintTotal(MINI_ATM_LOG,NULL);
}

void testPrintTotal()
{
    briPrintTotal(MINI_ATM_LOG);
}

void testPrintDetail()
{
    briPrintDetail(MINI_ATM_LOG);
}

void testReprintLastMiniAtm()
{
    briLogDuplicata(MINI_ATM_LOG);
}

void testReprintMiniAtm()
{
    briLogPrintTxn(MINI_ATM_LOG);
}

#endif //if TEST_BRI

#ifdef DUMP_ISO_MESSAGE
void setDumpIsoMessage()
{
	int iRet;
	char txt[20];
	int ret;
	
	dspClear();
	MAPPUTWORD(traMnuItm, mnuFn99, lblKO);
	ret = valOpr();
	CHECK(ret > 0, lblKO);
	
	dspLS(0,"Print Iso Msg");
	dspLS(1,"0-Mati 1-Nyala");
	dspLS(2,"Pilih?");
	
	while(1)
	{
		memset(txt,0,sizeof(txt));
		iRet = enterStr(3, txt, 2);
		if(iRet <= 0)
			return;
		if(txt[0] == 0x30)
		{
			MAPPUTBYTE(appDumpIsoMessageFlag,0,lblDBA);
			break;
		}
		else if(txt[0] == 0x31)
		{
			MAPPUTBYTE(appDumpIsoMessageFlag,1,lblDBA);
			break;
		}		
	}		
		
	return;
		
   lblDBA:
   	usrInfo(infDataAccessError);
lblKO:
    return;   	
}
#endif

void setDebugData()
{
	int iRet;
	char txt[20];
	int ret;
	
	dspClear();
	MAPPUTWORD(traMnuItm, mnuFn99, lblKO);
	ret = valOpr();
	CHECK(ret > 0, lblKO);
	
	dspLS(0,"Debug Data");
	dspLS(1,"0-Mati 1-Nyala");
	dspLS(2,"Pilih?");
	
	while(1)
	{
		memset(txt,0,sizeof(txt));
		iRet = enterStr(3, txt, 2);
		if(iRet <= 0)
			return;
		if(txt[0] == 0x30)
		{
			MAPPUTBYTE(appDebugDataFlag,0,lblDBA);
			break;
		}
		else if(txt[0] == 0x31)
		{
			MAPPUTBYTE(appDebugDataFlag,1,lblDBA);
			break;
		}		
	}		
		
	return;
		
   lblDBA:
   	usrInfo(infDataAccessError);
lblKO:
    return;   	
}

//@@AS0.0.26 - start
int parseField62(const byte* val, word len)
{
    int ret;
    byte txnType;
    const byte *ptr;
    byte WK[lenMKey];

    ptr = val;
    MAPGETBYTE(traTxnType,txnType,lblKO);
    switch (txnType)
    {
        case trtDebitLogon:
#ifdef _DEBUG_TLE
prtS("WK:");
ShowData(val,16,0,0,8);
#endif // _DEBUG_TLE
			if (len == lenMKey*2) {
				//assume it's 3DES
				hex2bin(WK,val,lenMKey);
			}
			else {
				hex2bin(WK,val,lenMKey/2);
				hex2bin(&WK[lenMKey/2],val,lenMKey/2);
			}
			ret = mapPut(traWorkingKey,WK,lenMKey);
			CHECK(ret >= 0, lblKO);
            break;
        default:
            break;
    }

    return 0;
lblKO:
    return -1;
}

int resetLogonDateTime()
{
	int ret=0;
    MAPPUTSTR(appLogonDT,"00000000000000",lblKO);

lblKO:
    ret = -1;
    goto lblEnd;

lblEnd:
    return ret;
}

int setFirstPowerOnFlag(byte flag_value)
{
	int ret=0;
    MAPPUTBYTE(appIsFirstPowerOn,flag_value,lblKO);

lblKO:
    ret = -1;
    goto lblEnd;

lblEnd:
    return ret;
}
//@@AS0.0.26 - end

//@@AS0.0.29 - start
byte OptionEnabled(byte idx, byte optflag) {
	char tempBuf[51];
	byte byteBuf[13];

	if (idx > 12)
		return (0);
		
	memset(tempBuf,0,sizeof(tempBuf));
	mapGet(rptHdrSiteAddr4, tempBuf, 0);

	hex2bin(byteBuf, tempBuf, 12);
	return(byteBuf[idx] & optflag);
}

void modifyMnuLayout(void) {
	byte tempBuf[25];

	mapGet(mnuCardService,tempBuf,sizeof(tempBuf));
	if (OptionEnabled(OPT1_IDX,OPT1_MNUL1_CARDSERVICES))
		tempBuf[0] = '1';
	else tempBuf[0] = '?';
	mapPut(mnuCardService,tempBuf,0);

	mapGet(mnuTunai,tempBuf,sizeof(tempBuf));
	if (OptionEnabled(OPT1_IDX,OPT1_MNUL1_TUNAI))
		tempBuf[0] = '1';
	else tempBuf[0] = '?';
	mapPut(mnuTunai,tempBuf,0);

	mapGet(mnuPembelian,tempBuf,sizeof(tempBuf));
	if (OptionEnabled(OPT1_IDX,OPT1_MNUL1_PEMBELIAN))
		tempBuf[0] = '1';
	else tempBuf[0] = '?';
	mapPut(mnuPembelian,tempBuf,0);

	mapGet(mnuMiniATM,tempBuf,sizeof(tempBuf));
	if (OptionEnabled(OPT1_IDX,OPT1_MNUL1_MINIATM))
		tempBuf[0] = '1';
	else tempBuf[0] = '?';
	mapPut(mnuMiniATM,tempBuf,0);

#ifdef PREPAID
	mapGet(mnuBrizzi,tempBuf,sizeof(tempBuf));
	if (OptionEnabled(OPT1_IDX,OPT1_MNUL1_BRIZZI))
	{
	    mapPutByte(appIsPrepaidEnable,1);
		tempBuf[0] = '1';
	}
	else
	{ 
		mapPutByte(appIsPrepaidEnable,0);
	    tempBuf[0] = '?';
	}
	mapPut(mnuBrizzi,tempBuf,0);
#endif

#ifdef ABSENSI
	mapGet(mnuAbsen,tempBuf,sizeof(tempBuf));
	if (OptionEnabled(OPT1_IDX,OPT1_MNUL1_ABSENSI))
		tempBuf[0] = '1';
	else tempBuf[0] = '?';
	mapPut(mnuAbsen,tempBuf,0);
#endif

	mapSave(mnuBeg);

	mapCache(-mnuBeg); //disable cache
	mapCache(mnuBeg);
	mapLoad(mnuBeg);
}

//@@AS0.0.29 - end

int briModifyPinEntry()
{
/*
    return 1: PIN
    return 0: non PIN
    return 100: tidak berubah
*/    
    byte kartu;
    word mnuItem;
    int ret;
    
    MAPGETBYTE(traKategoriKartu,kartu,lblKO);
    MAPGETWORD(traMnuItm,mnuItem,lblKO);
    switch(kartu)
    {
        case CREDIT_CARD:
        case NON_BRI_DEBIT_CARD:
        case NON_BRI_CREDIT_CARD:
            if(! (mnuItem > mnuPembelian && mnuItem <= mnuSettlement))
                return 0;
            else
                return 100;
            break;  
        default:
            return 100;
    }
    return 100;
lblKO:
    return -1; 
}

int adaTransPembelian()
{
    byte buf[25];
    
    memset(buf,0,sizeof(buf));
    mapGet(mnuPembelian,buf,sizeof(buf));
    if(buf[0] == '1')
        return 1;
    return 0;
}

